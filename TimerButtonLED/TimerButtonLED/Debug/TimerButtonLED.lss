
TimerButtonLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00803800  00803800  00000412  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036d6  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002726  00000000  00000000  00003c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f5  00000000  00000000  00006388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00006d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016e5  00000000  00000000  00006f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000372  00000000  00000000  00008675  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000089e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_12>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e3       	ldi	r18, 0x38	; 56
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e3       	ldi	r27, 0x38	; 56
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a5 30       	cpi	r26, 0x05	; 5
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 28 01 	call	0x250	; 0x250 <main>
  b0:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <ADC_Init>:
#include "Button.h"

void ADC_Init(void) {
	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_8BIT_gc;
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	f6 e0       	ldi	r31, 0x06	; 6
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_REFSEL_VDDREF_gc;
  c0:	80 e1       	ldi	r24, 0x10	; 16
  c2:	81 83       	std	Z+1, r24	; 0x01
  c4:	08 95       	ret

000000c6 <ADC_Switch>:
}

void ADC_Switch(uint8_t btn) {
	switch (btn)
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	41 f0       	breq	.+16     	; 0xda <ADC_Switch+0x14>
  ca:	18 f0       	brcs	.+6      	; 0xd2 <ADC_Switch+0xc>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	49 f0       	breq	.+18     	; 0xe2 <ADC_Switch+0x1c>
  d0:	08 95       	ret
	{
		case IGN_1:
			ADC0.MUXPOS = IGN_1_bm;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
  d8:	08 95       	ret
		case IGN_2:
			ADC0.MUXPOS = IGN_2_bm;
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
  e0:	08 95       	ret
		case HORN:
			ADC0.MUXPOS = HORN_bm;
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
  e8:	08 95       	ret

000000ea <BTN_Pressed>:
			break;
	}
}

uint8_t BTN_Pressed(uint8_t btn) {
	ADC_Switch(btn);
  ea:	0e 94 63 00 	call	0xc6	; 0xc6 <ADC_Switch>
	ADC0.COMMAND = 0x01;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7fc608>
	while((!ADC0.INTFLAGS & 0x01));
  f4:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7fc60b>
  f8:	88 23       	and	r24, r24
  fa:	e1 f3       	breq	.-8      	; 0xf4 <BTN_Pressed+0xa>
	if (ADC0.RES > 0xF0) {
  fc:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7fc610>
 100:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7fc611>
 104:	81 3f       	cpi	r24, 0xF1	; 241
 106:	91 05       	cpc	r25, r1
 108:	10 f0       	brcs	.+4      	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
		return 1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
	} else {
		return 0;
 10e:	80 e0       	ldi	r24, 0x00	; 0
	}
 110:	08 95       	ret

00000112 <LED_Init>:
#include "LED.h"

void LED_Init(void) {
	PORTF.DIRSET = (0x01 << RED_LED);
 112:	e0 ea       	ldi	r30, 0xA0	; 160
 114:	f4 e0       	ldi	r31, 0x04	; 4
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = (0x01 << GREEN_LED);
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTCLR = (0x01 << RED_LED);
 11e:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = (0x01 << GREEN_LED);
 120:	86 83       	std	Z+6, r24	; 0x06
 122:	08 95       	ret

00000124 <LED_On>:
}

void LED_On(uint8_t led) {
	PORTF.OUTSET = (0x01 << led);
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <LED_On+0xa>
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	8a 95       	dec	r24
 130:	e2 f7       	brpl	.-8      	; 0x12a <LED_On+0x6>
 132:	20 93 a5 04 	sts	0x04A5, r18	; 0x8004a5 <__RODATA_PM_OFFSET__+0x7fc4a5>
 136:	08 95       	ret

00000138 <LED_Off>:
}

void LED_Off(uint8_t led) {
	PORTF.OUTCLR = (0x01 << led);
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <LED_Off+0xa>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	8a 95       	dec	r24
 144:	e2 f7       	brpl	.-8      	; 0x13e <LED_Off+0x6>
 146:	20 93 a6 04 	sts	0x04A6, r18	; 0x8004a6 <__RODATA_PM_OFFSET__+0x7fc4a6>
 14a:	08 95       	ret

0000014c <__vector_12>:
uint8_t ign1Pressed = 0;
uint8_t ign2Pressed = 0;
uint8_t hornPressed = 0;

//Interrupt happens every 1/100th of a second
ISR(TCB0_INT_vect) {
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	TCB0.INTFLAGS = TCB_CAPT_bm;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7fca86>
	
	if (ign1Pressed) {
 174:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <ign1Pressed>
 178:	88 23       	and	r24, r24
 17a:	d9 f0       	breq	.+54     	; 0x1b2 <__vector_12+0x66>
		overflowCount++;
 17c:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <overflowCount>
 180:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <overflowCount+0x1>
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <overflowCount>
 18a:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <overflowCount+0x1>
		if (overflowCount >= 100) {
 18e:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <overflowCount>
 192:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <overflowCount+0x1>
 196:	84 36       	cpi	r24, 0x64	; 100
 198:	91 05       	cpc	r25, r1
 19a:	08 f4       	brcc	.+2      	; 0x19e <__vector_12+0x52>
 19c:	48 c0       	rjmp	.+144    	; 0x22e <__vector_12+0xe2>
			overflowCount = 0;
 19e:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <overflowCount>
 1a2:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <overflowCount+0x1>
			ign1Pressed = 0;
 1a6:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <ign1Pressed>
			LED_Off(RED_LED);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 9c 00 	call	0x138	; 0x138 <LED_Off>
 1b0:	3e c0       	rjmp	.+124    	; 0x22e <__vector_12+0xe2>
		}
	} else if (ign2Pressed) {
 1b2:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <ign2Pressed>
 1b6:	88 23       	and	r24, r24
 1b8:	d1 f0       	breq	.+52     	; 0x1ee <__vector_12+0xa2>
		overflowCount++;
 1ba:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <overflowCount>
 1be:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <overflowCount+0x1>
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <overflowCount>
 1c8:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <overflowCount+0x1>
		if (overflowCount >= 500) {
 1cc:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <overflowCount>
 1d0:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <overflowCount+0x1>
 1d4:	84 3f       	cpi	r24, 0xF4	; 244
 1d6:	91 40       	sbci	r25, 0x01	; 1
 1d8:	50 f1       	brcs	.+84     	; 0x22e <__vector_12+0xe2>
			overflowCount = 0;
 1da:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <overflowCount>
 1de:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <overflowCount+0x1>
			ign2Pressed = 0;
 1e2:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <ign2Pressed>
			LED_Off(GREEN_LED);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 9c 00 	call	0x138	; 0x138 <LED_Off>
 1ec:	20 c0       	rjmp	.+64     	; 0x22e <__vector_12+0xe2>
		}
	} else if (hornPressed) {
 1ee:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1f2:	88 23       	and	r24, r24
 1f4:	e1 f0       	breq	.+56     	; 0x22e <__vector_12+0xe2>
		overflowCount++;
 1f6:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <overflowCount>
 1fa:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <overflowCount+0x1>
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <overflowCount>
 204:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <overflowCount+0x1>
		if (overflowCount >= 1000) {
 208:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <overflowCount>
 20c:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <overflowCount+0x1>
 210:	88 3e       	cpi	r24, 0xE8	; 232
 212:	93 40       	sbci	r25, 0x03	; 3
 214:	60 f0       	brcs	.+24     	; 0x22e <__vector_12+0xe2>
			overflowCount = 0;
 216:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <overflowCount>
 21a:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <overflowCount+0x1>
			hornPressed = 0;
 21e:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__DATA_REGION_ORIGIN__>
			LED_Off(RED_LED);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 9c 00 	call	0x138	; 0x138 <LED_Off>
			LED_Off(GREEN_LED);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 9c 00 	call	0x138	; 0x138 <LED_Off>
		}
	}
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	7f 91       	pop	r23
 23c:	6f 91       	pop	r22
 23e:	5f 91       	pop	r21
 240:	4f 91       	pop	r20
 242:	3f 91       	pop	r19
 244:	2f 91       	pop	r18
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <main>:

int main(void)
{
    ADC_Init();
 250:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_Init>
	LED_Init();
 254:	0e 94 89 00 	call	0x112	; 0x112 <LED_Init>
	USART1_Init();
 258:	0e 94 84 01 	call	0x308	; 0x308 <USART1_Init>
	uint16_t topValue = TOP_VALUE;
	Timer_Init(topValue);
 25c:	88 e2       	ldi	r24, 0x28	; 40
 25e:	98 e6       	ldi	r25, 0x68	; 104
 260:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Timer_Init>
	Timer_Start();
 264:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Timer_Start>
	sei();
 268:	78 94       	sei
    while (1) 
    {
		if (BTN_Pressed(IGN_1) && !ign2Pressed && !hornPressed) {
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 75 00 	call	0xea	; 0xea <BTN_Pressed>
 270:	88 23       	and	r24, r24
 272:	71 f0       	breq	.+28     	; 0x290 <main+0x40>
 274:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <ign2Pressed>
 278:	81 11       	cpse	r24, r1
 27a:	0a c0       	rjmp	.+20     	; 0x290 <main+0x40>
 27c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 280:	81 11       	cpse	r24, r1
 282:	06 c0       	rjmp	.+12     	; 0x290 <main+0x40>
			LED_On(RED_LED);
 284:	0e 94 92 00 	call	0x124	; 0x124 <LED_On>
			ign1Pressed = 1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <ign1Pressed>
 28e:	29 c0       	rjmp	.+82     	; 0x2e2 <main+0x92>
		} else if (BTN_Pressed(IGN_2) && !ign1Pressed && !hornPressed) {
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 75 00 	call	0xea	; 0xea <BTN_Pressed>
 296:	88 23       	and	r24, r24
 298:	79 f0       	breq	.+30     	; 0x2b8 <main+0x68>
 29a:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <ign1Pressed>
 29e:	81 11       	cpse	r24, r1
 2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <main+0x68>
 2a2:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 2a6:	81 11       	cpse	r24, r1
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <main+0x68>
			LED_On(GREEN_LED);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 92 00 	call	0x124	; 0x124 <LED_On>
			ign2Pressed = 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <ign2Pressed>
 2b6:	15 c0       	rjmp	.+42     	; 0x2e2 <main+0x92>
		} else if (BTN_Pressed(HORN) && !ign1Pressed && !ign2Pressed) {
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	0e 94 75 00 	call	0xea	; 0xea <BTN_Pressed>
 2be:	88 23       	and	r24, r24
 2c0:	81 f0       	breq	.+32     	; 0x2e2 <main+0x92>
 2c2:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <ign1Pressed>
 2c6:	81 11       	cpse	r24, r1
 2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <main+0x92>
 2ca:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <ign2Pressed>
 2ce:	81 11       	cpse	r24, r1
 2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <main+0x92>
			LED_On(RED_LED);
 2d2:	0e 94 92 00 	call	0x124	; 0x124 <LED_On>
			LED_On(GREEN_LED);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 92 00 	call	0x124	; 0x124 <LED_On>
			hornPressed = 1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
		}
		wdt_reset();
 2e2:	a8 95       	wdr
    }
 2e4:	c2 cf       	rjmp	.-124    	; 0x26a <main+0x1a>

000002e6 <Timer_Init>:
#include "timer.h"

void Timer_Init(uint16_t topValue) {
 2e6:	9c 01       	movw	r18, r24
    TCB0.CTRLA &= ~TCB_ENABLE_bm;
 2e8:	e0 e8       	ldi	r30, 0x80	; 128
 2ea:	fa e0       	ldi	r31, 0x0A	; 10
 2ec:	90 81       	ld	r25, Z
 2ee:	9e 7f       	andi	r25, 0xFE	; 254
 2f0:	90 83       	st	Z, r25
    TCB0.CCMP = topValue;
 2f2:	24 87       	std	Z+12, r18	; 0x0c
 2f4:	35 87       	std	Z+13, r19	; 0x0d
    TCB0.INTCTRL = TCB_CAPT_bm;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	85 83       	std	Z+5, r24	; 0x05
 2fa:	08 95       	ret

000002fc <Timer_Start>:
    TCB0.CNT = 0;
	Timer_Start();
}

void Timer_Start(void) {
    TCB0.CTRLA |= TCB_ENABLE_bm;
 2fc:	e0 e8       	ldi	r30, 0x80	; 128
 2fe:	fa e0       	ldi	r31, 0x0A	; 10
 300:	80 81       	ld	r24, Z
 302:	81 60       	ori	r24, 0x01	; 1
 304:	80 83       	st	Z, r24
 306:	08 95       	ret

00000308 <USART1_Init>:
#include "UART.h"

void USART1_Init(void) {
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
	int8_t sigrow_val = SIGROW.OSC16ERR3V;
 30c:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
	int32_t baud_reg_val = BAUD_SETTING;
	baud_reg_val *= (1024 + sigrow_val);
 310:	0a 2e       	mov	r0, r26
 312:	00 0c       	add	r0, r0
 314:	bb 0b       	sbc	r27, r27
 316:	bc 5f       	subi	r27, 0xFC	; 252
 318:	27 e5       	ldi	r18, 0x57	; 87
 31a:	34 e0       	ldi	r19, 0x04	; 4
 31c:	0e 94 b7 01 	call	0x36e	; 0x36e <__usmulhisi3>
	baud_reg_val /= 1024;
 320:	8b 01       	movw	r16, r22
 322:	9c 01       	movw	r18, r24
 324:	99 23       	and	r25, r25
 326:	24 f4       	brge	.+8      	; 0x330 <USART1_Init+0x28>
 328:	01 50       	subi	r16, 0x01	; 1
 32a:	1c 4f       	sbci	r17, 0xFC	; 252
 32c:	2f 4f       	sbci	r18, 0xFF	; 255
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
 330:	d9 01       	movw	r26, r18
 332:	c8 01       	movw	r24, r16
 334:	07 2e       	mov	r0, r23
 336:	7a e0       	ldi	r23, 0x0A	; 10
 338:	b5 95       	asr	r27
 33a:	a7 95       	ror	r26
 33c:	97 95       	ror	r25
 33e:	87 95       	ror	r24
 340:	7a 95       	dec	r23
 342:	d1 f7       	brne	.-12     	; 0x338 <USART1_Init+0x30>
 344:	70 2d       	mov	r23, r0
	
	USART1.BAUD = (uint16_t)baud_reg_val;
 346:	e0 e2       	ldi	r30, 0x20	; 32
 348:	f8 e0       	ldi	r31, 0x08	; 8
 34a:	80 87       	std	Z+8, r24	; 0x08
 34c:	91 87       	std	Z+9, r25	; 0x09
	PORTC.DIRSET = PIN0_bm;
 34e:	a0 e4       	ldi	r26, 0x40	; 64
 350:	b4 e0       	ldi	r27, 0x04	; 4
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	11 96       	adiw	r26, 0x01	; 1
 356:	8c 93       	st	X, r24
 358:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.DIRCLR = PIN1_bm;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	12 96       	adiw	r26, 0x02	; 2
 35e:	8c 93       	st	X, r24
	
	USART1.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 360:	80 ec       	ldi	r24, 0xC0	; 192
 362:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	87 83       	std	Z+7, r24	; 0x07
}
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	08 95       	ret

0000036e <__usmulhisi3>:
 36e:	0e 94 be 01 	call	0x37c	; 0x37c <__umulhisi3>

00000372 <__usmulhisi3_tail>:
 372:	b7 ff       	sbrs	r27, 7
 374:	08 95       	ret
 376:	82 1b       	sub	r24, r18
 378:	93 0b       	sbc	r25, r19
 37a:	08 95       	ret

0000037c <__umulhisi3>:
 37c:	a2 9f       	mul	r26, r18
 37e:	b0 01       	movw	r22, r0
 380:	b3 9f       	mul	r27, r19
 382:	c0 01       	movw	r24, r0
 384:	a3 9f       	mul	r26, r19
 386:	70 0d       	add	r23, r0
 388:	81 1d       	adc	r24, r1
 38a:	11 24       	eor	r1, r1
 38c:	91 1d       	adc	r25, r1
 38e:	b2 9f       	mul	r27, r18
 390:	70 0d       	add	r23, r0
 392:	81 1d       	adc	r24, r1
 394:	11 24       	eor	r1, r1
 396:	91 1d       	adc	r25, r1
 398:	08 95       	ret

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
