
BlinkingLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025ac  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000021e2  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035c  00000000  00000000  00004976  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00004cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000111e  00000000  00000000  00004cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00005e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00005eee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  a0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <main>:
#define RED_LED 0
#define GREEN_LED 1

int main(void)
{
	PORTF.DIRSET = (0x01 << RED_LED);
  a8:	e0 ea       	ldi	r30, 0xA0	; 160
  aa:	f4 e0       	ldi	r31, 0x04	; 4
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	81 83       	std	Z+1, r24	; 0x01
	PORTF.DIRSET = (0x01 << GREEN_LED);
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	81 83       	std	Z+1, r24	; 0x01
	while(1) {
		PORTF.OUTCLR = (0x01 << GREEN_LED);
  b4:	e0 ea       	ldi	r30, 0xA0	; 160
  b6:	f4 e0       	ldi	r31, 0x04	; 4
  b8:	92 e0       	ldi	r25, 0x02	; 2
  ba:	96 83       	std	Z+6, r25	; 0x06
		PORTF.OUTSET = (0x01 << RED_LED);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2a ea       	ldi	r18, 0xAA	; 170
  c2:	31 e1       	ldi	r19, 0x11	; 17
  c4:	44 e0       	ldi	r20, 0x04	; 4
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	40 40       	sbci	r20, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x1e>
  ce:	00 00       	nop
		_delay_ms(500);
		wdt_reset();
  d0:	a8 95       	wdr
		PORTF.OUTCLR = (0x01 << RED_LED);
  d2:	86 83       	std	Z+6, r24	; 0x06
		PORTF.OUTSET = (0x01 << GREEN_LED);
  d4:	95 83       	std	Z+5, r25	; 0x05
  d6:	9a ea       	ldi	r25, 0xAA	; 170
  d8:	21 e1       	ldi	r18, 0x11	; 17
  da:	34 e0       	ldi	r19, 0x04	; 4
  dc:	91 50       	subi	r25, 0x01	; 1
  de:	20 40       	sbci	r18, 0x00	; 0
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x34>
  e4:	00 00       	nop
		_delay_ms(500);
		wdt_reset();
  e6:	a8 95       	wdr
		PORTF.OUTSET = (0x01 << RED_LED);
  e8:	85 83       	std	Z+5, r24	; 0x05
  ea:	4a ea       	ldi	r20, 0xAA	; 170
  ec:	81 e1       	ldi	r24, 0x11	; 17
  ee:	94 e0       	ldi	r25, 0x04	; 4
  f0:	41 50       	subi	r20, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x48>
  f8:	00 00       	nop
		_delay_ms(500);
		wdt_reset();
  fa:	a8 95       	wdr
  fc:	db cf       	rjmp	.-74     	; 0xb4 <main+0xc>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
