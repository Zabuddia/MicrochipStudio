
BatteryCalibration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000d17  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006f  00004bf2  00000bf2  00000ca6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000004  00803800  00803800  00000d15  2**0
                  ALLOC
  4 .eeprom       00000002  00810000  00810000  00000d15  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .comment      0000005c  00000000  00000000  00000d17  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000c8  00000000  00000000  00000db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000035c3  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002567  00000000  00000000  00004443  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000084b  00000000  00000000  000069aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000198  00000000  00000000  000071f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001af0  00000000  00000000  00007390  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000620  00000000  00000000  00008e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  000094a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e3       	ldi	r18, 0x38	; 56
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e3       	ldi	r27, 0x38	; 56
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a4 30       	cpi	r26, 0x04	; 4
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 cc 01 	call	0x398	; 0x398 <main>
  b0:	0c 94 f7 05 	jmp	0xbee	; 0xbee <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <ADC_Init>:

int32_t globalGain;
uint16_t EEMEM eepromGain;

void ADC_Init(void) {
    ADC0.CTRLA = ADC_RESSEL_10BIT_gc; // Set ADC resolution to 10 bits
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	f6 e0       	ldi	r31, 0x06	; 6
  bc:	10 82       	st	Z, r1
    ADC0.CTRLB = ADC_SAMPNUM_ACC8_gc; // Accumulate 8 samples
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	81 83       	std	Z+1, r24	; 0x01
    VREF.CTRLA = (VREF.CTRLA & ~VREF_ADC0REFSEL_gm) | VREF_ADC0REFSEL_2V5_gc; // Set reference to 2.5V
  c2:	a0 ea       	ldi	r26, 0xA0	; 160
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	8c 91       	ld	r24, X
  c8:	8f 78       	andi	r24, 0x8F	; 143
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	8c 93       	st	X, r24
    VREF.CTRLB &= ~VREF_ADC0REFEN_bm;
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	8c 91       	ld	r24, X
  d2:	11 97       	sbiw	r26, 0x01	; 1
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	8c 93       	st	X, r24
    ADC0.CTRLC = ADC_SAMPCAP_bm | ADC_REFSEL_INTREF_gc | ADC_PRESC_DIV2_gc; // Set sample capacitance, internal reference, and prescaler
  da:	80 e4       	ldi	r24, 0x40	; 64
  dc:	82 83       	std	Z+2, r24	; 0x02
    ADC0.CALIB = ADC_DUTYCYC_DUTY25_gc; // Set duty cycle
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	86 8b       	std	Z+22, r24	; 0x16
    ADC0.CTRLA |= ADC_ENABLE_bm; // Enable the ADC
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <ADC_Read>:
}

uint32_t ADC_Read(ADC_MUXPOS_t input) {
    while (ADC0.COMMAND & ADC_STCONV_bm); // Wait if a conversion is in progress
  ea:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7fc608>
  ee:	90 fd       	sbrc	r25, 0
  f0:	fc cf       	rjmp	.-8      	; 0xea <ADC_Read>
    ADC0.MUXPOS = input; // Select the input channel
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f6 e0       	ldi	r31, 0x06	; 6
  f6:	86 83       	std	Z+6, r24	; 0x06
    ADC0.COMMAND = ADC_STCONV_bm; // Start a conversion
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 87       	std	Z+8, r24	; 0x08
    while ((ADC0.INTFLAGS & ADC_RESRDY_bm) == 0); // Wait for the result to be ready
  fc:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7fc60b>
 100:	80 ff       	sbrs	r24, 0
 102:	fc cf       	rjmp	.-8      	; 0xfc <ADC_Read+0x12>
    return ADC0.RESL + (ADC0.RESH << 8); // Read the result
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	f6 e0       	ldi	r31, 0x06	; 6
 108:	80 89       	ldd	r24, Z+16	; 0x10
 10a:	61 89       	ldd	r22, Z+17	; 0x11
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	76 2f       	mov	r23, r22
 110:	66 27       	eor	r22, r22
 112:	68 0f       	add	r22, r24
 114:	71 1d       	adc	r23, r1
 116:	07 2e       	mov	r0, r23
 118:	00 0c       	add	r0, r0
 11a:	88 0b       	sbc	r24, r24
 11c:	99 0b       	sbc	r25, r25
}
 11e:	08 95       	ret

00000120 <Calibrate>:

void Calibrate(void) {
 120:	8f 92       	push	r8
 122:	9f 92       	push	r9
 124:	af 92       	push	r10
 126:	bf 92       	push	r11
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	69 97       	sbiw	r28, 0x19	; 25
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	de bf       	out	0x3e, r29	; 62
    USART1_Transmit_String("Enter multimeter-measured voltage (12V would be 1200):\n\r");
 142:	82 ef       	ldi	r24, 0xF2	; 242
 144:	9b e4       	ldi	r25, 0x4B	; 75
 146:	0e 94 43 02 	call	0x486	; 0x486 <USART1_Transmit_String>
    uint8_t actualVoltage1 = USART1_Receive();
 14a:	0e 94 66 02 	call	0x4cc	; 0x4cc <USART1_Receive>
 14e:	f8 2e       	mov	r15, r24
    uint8_t actualVoltage2 = USART1_Receive();
 150:	0e 94 66 02 	call	0x4cc	; 0x4cc <USART1_Receive>
 154:	08 2f       	mov	r16, r24
    uint8_t actualVoltage3 = USART1_Receive();
 156:	0e 94 66 02 	call	0x4cc	; 0x4cc <USART1_Receive>
 15a:	18 2f       	mov	r17, r24
    uint8_t actualVoltage4 = USART1_Receive();
 15c:	0e 94 66 02 	call	0x4cc	; 0x4cc <USART1_Receive>
    char actualVoltageStr[5] = {actualVoltage1, actualVoltage2, actualVoltage3, actualVoltage4, '\0'};
 160:	f9 82       	std	Y+1, r15	; 0x01
 162:	0a 83       	std	Y+2, r16	; 0x02
 164:	1b 83       	std	Y+3, r17	; 0x03
 166:	8c 83       	std	Y+4, r24	; 0x04
 168:	1d 82       	std	Y+5, r1	; 0x05
    int32_t actualVoltage = atoi(actualVoltageStr); // Convert string to integer
 16a:	ce 01       	movw	r24, r28
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <atoi>
 172:	6c 01       	movw	r12, r24
 174:	99 0f       	add	r25, r25
 176:	ee 08       	sbc	r14, r14
 178:	ff 08       	sbc	r15, r15
    
    // Debugging: print the actual voltage received
    char debugBuffer[20];
    sprintf(debugBuffer, "Actual: %ld\n\r", actualVoltage);
 17a:	ff 92       	push	r15
 17c:	ef 92       	push	r14
 17e:	df 92       	push	r13
 180:	cf 92       	push	r12
 182:	8b e2       	ldi	r24, 0x2B	; 43
 184:	9c e4       	ldi	r25, 0x4C	; 76
 186:	9f 93       	push	r25
 188:	8f 93       	push	r24
 18a:	8e 01       	movw	r16, r28
 18c:	0a 5f       	subi	r16, 0xFA	; 250
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
 190:	1f 93       	push	r17
 192:	0f 93       	push	r16
 194:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <sprintf>
    USART1_Transmit_String(debugBuffer);
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 43 02 	call	0x486	; 0x486 <USART1_Transmit_String>

    int32_t measuredVoltage = ADC_Read(POWER_VOLTS);
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 75 00 	call	0xea	; 0xea <ADC_Read>
 1a4:	9b 01       	movw	r18, r22
 1a6:	ac 01       	movw	r20, r24
    int32_t measuredVoltagemV = (measuredVoltage * 250UL) / 1023;
 1a8:	aa ef       	ldi	r26, 0xFA	; 250
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	0e 94 ba 02 	call	0x574	; 0x574 <__muluhisi3>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	33 e0       	ldi	r19, 0x03	; 3
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__udivmodsi4>
 1bc:	49 01       	movw	r8, r18
 1be:	5a 01       	movw	r10, r20

    // Debugging: print the measured voltage
    sprintf(debugBuffer, "Measured: %ld\n\r", measuredVoltagemV);
 1c0:	bf 92       	push	r11
 1c2:	af 92       	push	r10
 1c4:	9f 92       	push	r9
 1c6:	2f 93       	push	r18
 1c8:	89 e3       	ldi	r24, 0x39	; 57
 1ca:	9c e4       	ldi	r25, 0x4C	; 76
 1cc:	9f 93       	push	r25
 1ce:	8f 93       	push	r24
 1d0:	1f 93       	push	r17
 1d2:	0f 93       	push	r16
 1d4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <sprintf>
    USART1_Transmit_String(debugBuffer);
 1d8:	c8 01       	movw	r24, r16
 1da:	0e 94 43 02 	call	0x486	; 0x486 <USART1_Transmit_String>

    int32_t temp = actualVoltage - measuredVoltagemV;
 1de:	c8 18       	sub	r12, r8
 1e0:	d9 08       	sbc	r13, r9
 1e2:	ea 08       	sbc	r14, r10
 1e4:	fb 08       	sbc	r15, r11

    // Debugging: print the temp value
    sprintf(debugBuffer, "Temp: %ld\n\r", temp);
 1e6:	ff 92       	push	r15
 1e8:	ef 92       	push	r14
 1ea:	df 92       	push	r13
 1ec:	cf 92       	push	r12
 1ee:	89 e4       	ldi	r24, 0x49	; 73
 1f0:	9c e4       	ldi	r25, 0x4C	; 76
 1f2:	9f 93       	push	r25
 1f4:	8f 93       	push	r24
 1f6:	1f 93       	push	r17
 1f8:	0f 93       	push	r16
 1fa:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <sprintf>
    USART1_Transmit_String(debugBuffer);
 1fe:	c8 01       	movw	r24, r16
 200:	0e 94 43 02 	call	0x486	; 0x486 <USART1_Transmit_String>

    if (temp != 0) {
 204:	cd bf       	out	0x3d, r28	; 61
 206:	de bf       	out	0x3e, r29	; 62
 208:	c1 14       	cp	r12, r1
 20a:	d1 04       	cpc	r13, r1
 20c:	e1 04       	cpc	r14, r1
 20e:	f1 04       	cpc	r15, r1
 210:	19 f1       	breq	.+70     	; 0x258 <Calibrate+0x138>
        globalGain = (measuredVoltagemV * 1000L + temp / 2L) / temp;  // Calculate the globalGain using long integer division to avoid precision issues
 212:	a8 ee       	ldi	r26, 0xE8	; 232
 214:	b3 e0       	ldi	r27, 0x03	; 3
 216:	a5 01       	movw	r20, r10
 218:	94 01       	movw	r18, r8
 21a:	0e 94 ba 02 	call	0x574	; 0x574 <__muluhisi3>
 21e:	97 01       	movw	r18, r14
 220:	86 01       	movw	r16, r12
 222:	ff 20       	and	r15, r15
 224:	24 f4       	brge	.+8      	; 0x22e <Calibrate+0x10e>
 226:	0f 5f       	subi	r16, 0xFF	; 255
 228:	1f 4f       	sbci	r17, 0xFF	; 255
 22a:	2f 4f       	sbci	r18, 0xFF	; 255
 22c:	3f 4f       	sbci	r19, 0xFF	; 255
 22e:	35 95       	asr	r19
 230:	27 95       	ror	r18
 232:	17 95       	ror	r17
 234:	07 95       	ror	r16
 236:	60 0f       	add	r22, r16
 238:	71 1f       	adc	r23, r17
 23a:	82 1f       	adc	r24, r18
 23c:	93 1f       	adc	r25, r19
 23e:	a7 01       	movw	r20, r14
 240:	96 01       	movw	r18, r12
 242:	0e 94 94 02 	call	0x528	; 0x528 <__divmodsi4>
 246:	20 93 00 38 	sts	0x3800, r18	; 0x803800 <__DATA_REGION_ORIGIN__>
 24a:	30 93 01 38 	sts	0x3801, r19	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 24e:	40 93 02 38 	sts	0x3802, r20	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 252:	50 93 03 38 	sts	0x3803, r21	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
 256:	08 c0       	rjmp	.+16     	; 0x268 <Calibrate+0x148>
    } else {
        globalGain = 0;
 258:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__DATA_REGION_ORIGIN__>
 25c:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 260:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 264:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
    }
	
	eeprom_write_word(&eepromGain, (uint16_t)globalGain);
 268:	60 91 00 38 	lds	r22, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 26c:	70 91 01 38 	lds	r23, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 ad 05 	call	0xb5a	; 0xb5a <eeprom_write_word>

    // Debugging: print the globalGain value
    sprintf(debugBuffer, "Gain: %ld\n\r", globalGain);
 278:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
 27c:	8f 93       	push	r24
 27e:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 282:	8f 93       	push	r24
 284:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 288:	8f 93       	push	r24
 28a:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 28e:	8f 93       	push	r24
 290:	85 e5       	ldi	r24, 0x55	; 85
 292:	9c e4       	ldi	r25, 0x4C	; 76
 294:	9f 93       	push	r25
 296:	8f 93       	push	r24
 298:	8e 01       	movw	r16, r28
 29a:	0a 5f       	subi	r16, 0xFA	; 250
 29c:	1f 4f       	sbci	r17, 0xFF	; 255
 29e:	1f 93       	push	r17
 2a0:	0f 93       	push	r16
 2a2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <sprintf>
    USART1_Transmit_String(debugBuffer);
 2a6:	c8 01       	movw	r24, r16
 2a8:	0e 94 43 02 	call	0x486	; 0x486 <USART1_Transmit_String>
}
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	69 96       	adiw	r28, 0x19	; 25
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	bf 90       	pop	r11
 2c8:	af 90       	pop	r10
 2ca:	9f 90       	pop	r9
 2cc:	8f 90       	pop	r8
 2ce:	08 95       	ret

000002d0 <Read_Analog>:

int32_t Read_Analog(ADC_MUXPOS_t input) {
 2d0:	8f 92       	push	r8
 2d2:	9f 92       	push	r9
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	b8 2e       	mov	r11, r24
    int32_t value = ADC_Read(input);
 2e2:	0e 94 75 00 	call	0xea	; 0xea <ADC_Read>
 2e6:	6b 01       	movw	r12, r22
 2e8:	7c 01       	movw	r14, r24
    if (input == POWER_VOLTS) {
 2ea:	b1 10       	cpse	r11, r1
 2ec:	4a c0       	rjmp	.+148    	; 0x382 <Read_Analog+0xb2>
        value = (value * 250L) / 1023L;
 2ee:	aa ef       	ldi	r26, 0xFA	; 250
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	0e 94 ba 02 	call	0x574	; 0x574 <__muluhisi3>
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	33 e0       	ldi	r19, 0x03	; 3
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	0e 94 94 02 	call	0x528	; 0x528 <__divmodsi4>
 306:	49 01       	movw	r8, r18
 308:	5a 01       	movw	r10, r20
 30a:	69 01       	movw	r12, r18
 30c:	7a 01       	movw	r14, r20
        if (globalGain < 0) {
 30e:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 312:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <__DATA_REGION_ORIGIN__+0x1>
 316:	a0 91 02 38 	lds	r26, 0x3802	; 0x803802 <__DATA_REGION_ORIGIN__+0x2>
 31a:	b0 91 03 38 	lds	r27, 0x3803	; 0x803803 <__DATA_REGION_ORIGIN__+0x3>
 31e:	bb 23       	and	r27, r27
 320:	ac f4       	brge	.+42     	; 0x34c <Read_Analog+0x7c>
            value = value + (value / ((globalGain - 500L) / 1000L));  // Adjust the calculation for globalGain
 322:	bc 01       	movw	r22, r24
 324:	cd 01       	movw	r24, r26
 326:	64 5f       	subi	r22, 0xF4	; 244
 328:	71 40       	sbci	r23, 0x01	; 1
 32a:	81 09       	sbc	r24, r1
 32c:	91 09       	sbc	r25, r1
 32e:	28 ee       	ldi	r18, 0xE8	; 232
 330:	33 e0       	ldi	r19, 0x03	; 3
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	0e 94 94 02 	call	0x528	; 0x528 <__divmodsi4>
 33a:	c5 01       	movw	r24, r10
 33c:	b4 01       	movw	r22, r8
 33e:	0e 94 94 02 	call	0x528	; 0x528 <__divmodsi4>
 342:	c2 0e       	add	r12, r18
 344:	d3 1e       	adc	r13, r19
 346:	e4 1e       	adc	r14, r20
 348:	f5 1e       	adc	r15, r21
 34a:	1b c0       	rjmp	.+54     	; 0x382 <Read_Analog+0xb2>
        } else if (globalGain > 0) {
 34c:	18 16       	cp	r1, r24
 34e:	19 06       	cpc	r1, r25
 350:	1a 06       	cpc	r1, r26
 352:	1b 06       	cpc	r1, r27
 354:	b4 f4       	brge	.+44     	; 0x382 <Read_Analog+0xb2>
			value = value + (value / ((globalGain + 500L) / 1000L));  // Adjust the calculation for globalGain
 356:	bc 01       	movw	r22, r24
 358:	cd 01       	movw	r24, r26
 35a:	6c 50       	subi	r22, 0x0C	; 12
 35c:	7e 4f       	sbci	r23, 0xFE	; 254
 35e:	8f 4f       	sbci	r24, 0xFF	; 255
 360:	9f 4f       	sbci	r25, 0xFF	; 255
 362:	28 ee       	ldi	r18, 0xE8	; 232
 364:	33 e0       	ldi	r19, 0x03	; 3
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	0e 94 94 02 	call	0x528	; 0x528 <__divmodsi4>
 36e:	c5 01       	movw	r24, r10
 370:	b4 01       	movw	r22, r8
 372:	0e 94 94 02 	call	0x528	; 0x528 <__divmodsi4>
 376:	75 01       	movw	r14, r10
 378:	64 01       	movw	r12, r8
 37a:	c2 0e       	add	r12, r18
 37c:	d3 1e       	adc	r13, r19
 37e:	e4 1e       	adc	r14, r20
 380:	f5 1e       	adc	r15, r21
		}
    }
    return value;
}
 382:	c7 01       	movw	r24, r14
 384:	b6 01       	movw	r22, r12
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	df 90       	pop	r13
 38c:	cf 90       	pop	r12
 38e:	bf 90       	pop	r11
 390:	af 90       	pop	r10
 392:	9f 90       	pop	r9
 394:	8f 90       	pop	r8
 396:	08 95       	ret

00000398 <main>:

int main(void) {
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	2a 97       	sbiw	r28, 0x0a	; 10
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	de bf       	out	0x3e, r29	; 62
    ADC_Init(); // Initialize the ADC
 3a6:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_Init>
    USART1_Init(); // Initialize USART
 3aa:	0e 94 09 02 	call	0x412	; 0x412 <USART1_Init>
    int32_t batteryVolts = 0;
    while (1) {
		uint8_t calibrate = 0;
		batteryVolts = Read_Analog(POWER_VOLTS);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <Read_Analog>
		char buffer[10] = {0};
 3b4:	8e 01       	movw	r16, r28
 3b6:	0f 5f       	subi	r16, 0xFF	; 255
 3b8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ba:	2a e0       	ldi	r18, 0x0A	; 10
 3bc:	f8 01       	movw	r30, r16
 3be:	11 92       	st	Z+, r1
 3c0:	2a 95       	dec	r18
 3c2:	e9 f7       	brne	.-6      	; 0x3be <main+0x26>
		sprintf(buffer, "%ld\n\r", batteryVolts);
 3c4:	9f 93       	push	r25
 3c6:	8f 93       	push	r24
 3c8:	7f 93       	push	r23
 3ca:	6f 93       	push	r22
 3cc:	83 e4       	ldi	r24, 0x43	; 67
 3ce:	9c e4       	ldi	r25, 0x4C	; 76
 3d0:	9f 93       	push	r25
 3d2:	8f 93       	push	r24
 3d4:	1f 93       	push	r17
 3d6:	0f 93       	push	r16
 3d8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <sprintf>
		USART1_Transmit_String(buffer);
 3dc:	c8 01       	movw	r24, r16
 3de:	0e 94 43 02 	call	0x486	; 0x486 <USART1_Transmit_String>
		if (USART1.STATUS & USART_RXCIF_bm) {
 3e2:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	88 23       	and	r24, r24
 3ec:	1c f4       	brge	.+6      	; 0x3f4 <main+0x5c>
			calibrate = USART1_Receive_No_Wait();
 3ee:	0e 94 6f 02 	call	0x4de	; 0x4de <USART1_Receive_No_Wait>
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <main+0x5e>
int main(void) {
    ADC_Init(); // Initialize the ADC
    USART1_Init(); // Initialize USART
    int32_t batteryVolts = 0;
    while (1) {
		uint8_t calibrate = 0;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
		sprintf(buffer, "%ld\n\r", batteryVolts);
		USART1_Transmit_String(buffer);
		if (USART1.STATUS & USART_RXCIF_bm) {
			calibrate = USART1_Receive_No_Wait();
		}
		if (calibrate == 'c') {
 3f6:	83 36       	cpi	r24, 0x63	; 99
 3f8:	11 f4       	brne	.+4      	; 0x3fe <main+0x66>
			Calibrate();
 3fa:	0e 94 90 00 	call	0x120	; 0x120 <Calibrate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	34 e5       	ldi	r19, 0x54	; 84
 400:	83 e2       	ldi	r24, 0x23	; 35
 402:	98 e0       	ldi	r25, 0x08	; 8
 404:	31 50       	subi	r19, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		}
		_delay_ms(1000);
    }
 410:	ce cf       	rjmp	.-100    	; 0x3ae <main+0x16>

00000412 <USART1_Init>:
	sprintf(buffer, "%ld", num);

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
		USART1_Transmit((uint8_t)buffer[i]);
	}
}
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
 41a:	0a 2e       	mov	r0, r26
 41c:	00 0c       	add	r0, r0
 41e:	bb 0b       	sbc	r27, r27
 420:	bc 5f       	subi	r27, 0xFC	; 252
 422:	27 e5       	ldi	r18, 0x57	; 87
 424:	34 e0       	ldi	r19, 0x04	; 4
 426:	0e 94 b3 02 	call	0x566	; 0x566 <__usmulhisi3>
 42a:	8b 01       	movw	r16, r22
 42c:	9c 01       	movw	r18, r24
 42e:	99 23       	and	r25, r25
 430:	24 f4       	brge	.+8      	; 0x43a <USART1_Init+0x28>
 432:	01 50       	subi	r16, 0x01	; 1
 434:	1c 4f       	sbci	r17, 0xFC	; 252
 436:	2f 4f       	sbci	r18, 0xFF	; 255
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	d9 01       	movw	r26, r18
 43c:	c8 01       	movw	r24, r16
 43e:	07 2e       	mov	r0, r23
 440:	7a e0       	ldi	r23, 0x0A	; 10
 442:	b5 95       	asr	r27
 444:	a7 95       	ror	r26
 446:	97 95       	ror	r25
 448:	87 95       	ror	r24
 44a:	7a 95       	dec	r23
 44c:	d1 f7       	brne	.-12     	; 0x442 <USART1_Init+0x30>
 44e:	70 2d       	mov	r23, r0
 450:	e0 e2       	ldi	r30, 0x20	; 32
 452:	f8 e0       	ldi	r31, 0x08	; 8
 454:	80 87       	std	Z+8, r24	; 0x08
 456:	91 87       	std	Z+9, r25	; 0x09
 458:	a0 e4       	ldi	r26, 0x40	; 64
 45a:	b4 e0       	ldi	r27, 0x04	; 4
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	11 96       	adiw	r26, 0x01	; 1
 460:	8c 93       	st	X, r24
 462:	11 97       	sbiw	r26, 0x01	; 1
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	12 96       	adiw	r26, 0x02	; 2
 468:	8c 93       	st	X, r24
 46a:	80 ec       	ldi	r24, 0xC0	; 192
 46c:	86 83       	std	Z+6, r24	; 0x06
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	87 83       	std	Z+7, r24	; 0x07
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	08 95       	ret

00000478 <USART1_Transmit>:
 478:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 47c:	95 ff       	sbrs	r25, 5
 47e:	fc cf       	rjmp	.-8      	; 0x478 <USART1_Transmit>
 480:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7fc822>
 484:	08 95       	ret

00000486 <USART1_Transmit_String>:

void USART1_Transmit_String(char* string) {
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	7c 01       	movw	r14, r24
	uint16_t string_len = strlen(string);
 494:	fc 01       	movw	r30, r24
 496:	01 90       	ld	r0, Z+
 498:	00 20       	and	r0, r0
 49a:	e9 f7       	brne	.-6      	; 0x496 <USART1_Transmit_String+0x10>
 49c:	31 97       	sbiw	r30, 0x01	; 1
 49e:	8f 01       	movw	r16, r30
 4a0:	08 1b       	sub	r16, r24
 4a2:	19 0b       	sbc	r17, r25
	for (uint16_t i = 0; i < string_len; i++) {
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
 4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <USART1_Transmit_String+0x32>
		USART1_Transmit((uint8_t)string[i]);
 4aa:	f7 01       	movw	r30, r14
 4ac:	ec 0f       	add	r30, r28
 4ae:	fd 1f       	adc	r31, r29
 4b0:	80 81       	ld	r24, Z
 4b2:	0e 94 3c 02 	call	0x478	; 0x478 <USART1_Transmit>
	}
}

void USART1_Transmit_String(char* string) {
	uint16_t string_len = strlen(string);
	for (uint16_t i = 0; i < string_len; i++) {
 4b6:	21 96       	adiw	r28, 0x01	; 1
 4b8:	c0 17       	cp	r28, r16
 4ba:	d1 07       	cpc	r29, r17
 4bc:	b0 f3       	brcs	.-20     	; 0x4aa <USART1_Transmit_String+0x24>
		USART1_Transmit((uint8_t)string[i]);
	}
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	ff 90       	pop	r15
 4c8:	ef 90       	pop	r14
 4ca:	08 95       	ret

000004cc <USART1_Receive>:

uint8_t USART1_Receive(void) {
	while (!(USART1.STATUS & USART_RXCIF_bm)) wdt_reset();
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <USART1_Receive+0x4>
 4ce:	a8 95       	wdr
 4d0:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 4d4:	88 23       	and	r24, r24
 4d6:	dc f7       	brge	.-10     	; 0x4ce <USART1_Receive+0x2>
	return USART1.RXDATAL;
 4d8:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7fc820>
}
 4dc:	08 95       	ret

000004de <USART1_Receive_No_Wait>:

uint8_t USART1_Receive_No_Wait(void) {
	return USART1.RXDATAL;
 4de:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7fc820>
 4e2:	08 95       	ret

000004e4 <__udivmodsi4>:
 4e4:	a1 e2       	ldi	r26, 0x21	; 33
 4e6:	1a 2e       	mov	r1, r26
 4e8:	aa 1b       	sub	r26, r26
 4ea:	bb 1b       	sub	r27, r27
 4ec:	fd 01       	movw	r30, r26
 4ee:	0d c0       	rjmp	.+26     	; 0x50a <__udivmodsi4_ep>

000004f0 <__udivmodsi4_loop>:
 4f0:	aa 1f       	adc	r26, r26
 4f2:	bb 1f       	adc	r27, r27
 4f4:	ee 1f       	adc	r30, r30
 4f6:	ff 1f       	adc	r31, r31
 4f8:	a2 17       	cp	r26, r18
 4fa:	b3 07       	cpc	r27, r19
 4fc:	e4 07       	cpc	r30, r20
 4fe:	f5 07       	cpc	r31, r21
 500:	20 f0       	brcs	.+8      	; 0x50a <__udivmodsi4_ep>
 502:	a2 1b       	sub	r26, r18
 504:	b3 0b       	sbc	r27, r19
 506:	e4 0b       	sbc	r30, r20
 508:	f5 0b       	sbc	r31, r21

0000050a <__udivmodsi4_ep>:
 50a:	66 1f       	adc	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	88 1f       	adc	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	1a 94       	dec	r1
 514:	69 f7       	brne	.-38     	; 0x4f0 <__udivmodsi4_loop>
 516:	60 95       	com	r22
 518:	70 95       	com	r23
 51a:	80 95       	com	r24
 51c:	90 95       	com	r25
 51e:	9b 01       	movw	r18, r22
 520:	ac 01       	movw	r20, r24
 522:	bd 01       	movw	r22, r26
 524:	cf 01       	movw	r24, r30
 526:	08 95       	ret

00000528 <__divmodsi4>:
 528:	05 2e       	mov	r0, r21
 52a:	97 fb       	bst	r25, 7
 52c:	1e f4       	brtc	.+6      	; 0x534 <__divmodsi4+0xc>
 52e:	00 94       	com	r0
 530:	0e 94 ab 02 	call	0x556	; 0x556 <__negsi2>
 534:	57 fd       	sbrc	r21, 7
 536:	07 d0       	rcall	.+14     	; 0x546 <__divmodsi4_neg2>
 538:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__udivmodsi4>
 53c:	07 fc       	sbrc	r0, 7
 53e:	03 d0       	rcall	.+6      	; 0x546 <__divmodsi4_neg2>
 540:	4e f4       	brtc	.+18     	; 0x554 <__divmodsi4_exit>
 542:	0c 94 ab 02 	jmp	0x556	; 0x556 <__negsi2>

00000546 <__divmodsi4_neg2>:
 546:	50 95       	com	r21
 548:	40 95       	com	r20
 54a:	30 95       	com	r19
 54c:	21 95       	neg	r18
 54e:	3f 4f       	sbci	r19, 0xFF	; 255
 550:	4f 4f       	sbci	r20, 0xFF	; 255
 552:	5f 4f       	sbci	r21, 0xFF	; 255

00000554 <__divmodsi4_exit>:
 554:	08 95       	ret

00000556 <__negsi2>:
 556:	90 95       	com	r25
 558:	80 95       	com	r24
 55a:	70 95       	com	r23
 55c:	61 95       	neg	r22
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	8f 4f       	sbci	r24, 0xFF	; 255
 562:	9f 4f       	sbci	r25, 0xFF	; 255
 564:	08 95       	ret

00000566 <__usmulhisi3>:
 566:	0e 94 c5 02 	call	0x58a	; 0x58a <__umulhisi3>

0000056a <__usmulhisi3_tail>:
 56a:	b7 ff       	sbrs	r27, 7
 56c:	08 95       	ret
 56e:	82 1b       	sub	r24, r18
 570:	93 0b       	sbc	r25, r19
 572:	08 95       	ret

00000574 <__muluhisi3>:
 574:	0e 94 c5 02 	call	0x58a	; 0x58a <__umulhisi3>
 578:	a5 9f       	mul	r26, r21
 57a:	90 0d       	add	r25, r0
 57c:	b4 9f       	mul	r27, r20
 57e:	90 0d       	add	r25, r0
 580:	a4 9f       	mul	r26, r20
 582:	80 0d       	add	r24, r0
 584:	91 1d       	adc	r25, r1
 586:	11 24       	eor	r1, r1
 588:	08 95       	ret

0000058a <__umulhisi3>:
 58a:	a2 9f       	mul	r26, r18
 58c:	b0 01       	movw	r22, r0
 58e:	b3 9f       	mul	r27, r19
 590:	c0 01       	movw	r24, r0
 592:	a3 9f       	mul	r26, r19
 594:	70 0d       	add	r23, r0
 596:	81 1d       	adc	r24, r1
 598:	11 24       	eor	r1, r1
 59a:	91 1d       	adc	r25, r1
 59c:	b2 9f       	mul	r27, r18
 59e:	70 0d       	add	r23, r0
 5a0:	81 1d       	adc	r24, r1
 5a2:	11 24       	eor	r1, r1
 5a4:	91 1d       	adc	r25, r1
 5a6:	08 95       	ret

000005a8 <atoi>:
 5a8:	fc 01       	movw	r30, r24
 5aa:	88 27       	eor	r24, r24
 5ac:	99 27       	eor	r25, r25
 5ae:	e8 94       	clt
 5b0:	21 91       	ld	r18, Z+
 5b2:	20 32       	cpi	r18, 0x20	; 32
 5b4:	e9 f3       	breq	.-6      	; 0x5b0 <atoi+0x8>
 5b6:	29 30       	cpi	r18, 0x09	; 9
 5b8:	10 f0       	brcs	.+4      	; 0x5be <atoi+0x16>
 5ba:	2e 30       	cpi	r18, 0x0E	; 14
 5bc:	c8 f3       	brcs	.-14     	; 0x5b0 <atoi+0x8>
 5be:	2b 32       	cpi	r18, 0x2B	; 43
 5c0:	41 f0       	breq	.+16     	; 0x5d2 <atoi+0x2a>
 5c2:	2d 32       	cpi	r18, 0x2D	; 45
 5c4:	39 f4       	brne	.+14     	; 0x5d4 <atoi+0x2c>
 5c6:	68 94       	set
 5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <atoi+0x2a>
 5ca:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__mulhi_const_10>
 5ce:	82 0f       	add	r24, r18
 5d0:	91 1d       	adc	r25, r1
 5d2:	21 91       	ld	r18, Z+
 5d4:	20 53       	subi	r18, 0x30	; 48
 5d6:	2a 30       	cpi	r18, 0x0A	; 10
 5d8:	c0 f3       	brcs	.-16     	; 0x5ca <atoi+0x22>
 5da:	1e f4       	brtc	.+6      	; 0x5e2 <atoi+0x3a>
 5dc:	90 95       	com	r25
 5de:	81 95       	neg	r24
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	08 95       	ret

000005e4 <__mulhi_const_10>:
 5e4:	7a e0       	ldi	r23, 0x0A	; 10
 5e6:	97 9f       	mul	r25, r23
 5e8:	90 2d       	mov	r25, r0
 5ea:	87 9f       	mul	r24, r23
 5ec:	80 2d       	mov	r24, r0
 5ee:	91 0d       	add	r25, r1
 5f0:	11 24       	eor	r1, r1
 5f2:	08 95       	ret

000005f4 <sprintf>:
 5f4:	ae e0       	ldi	r26, 0x0E	; 14
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	e0 e0       	ldi	r30, 0x00	; 0
 5fa:	f3 e0       	ldi	r31, 0x03	; 3
 5fc:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__prologue_saves__+0x1c>
 600:	0d 89       	ldd	r16, Y+21	; 0x15
 602:	1e 89       	ldd	r17, Y+22	; 0x16
 604:	86 e0       	ldi	r24, 0x06	; 6
 606:	8c 83       	std	Y+4, r24	; 0x04
 608:	09 83       	std	Y+1, r16	; 0x01
 60a:	1a 83       	std	Y+2, r17	; 0x02
 60c:	8f ef       	ldi	r24, 0xFF	; 255
 60e:	9f e7       	ldi	r25, 0x7F	; 127
 610:	8d 83       	std	Y+5, r24	; 0x05
 612:	9e 83       	std	Y+6, r25	; 0x06
 614:	ae 01       	movw	r20, r28
 616:	47 5e       	subi	r20, 0xE7	; 231
 618:	5f 4f       	sbci	r21, 0xFF	; 255
 61a:	6f 89       	ldd	r22, Y+23	; 0x17
 61c:	78 8d       	ldd	r23, Y+24	; 0x18
 61e:	ce 01       	movw	r24, r28
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	0e 94 1c 03 	call	0x638	; 0x638 <vfprintf>
 626:	ef 81       	ldd	r30, Y+7	; 0x07
 628:	f8 85       	ldd	r31, Y+8	; 0x08
 62a:	e0 0f       	add	r30, r16
 62c:	f1 1f       	adc	r31, r17
 62e:	10 82       	st	Z, r1
 630:	2e 96       	adiw	r28, 0x0e	; 14
 632:	e4 e0       	ldi	r30, 0x04	; 4
 634:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__epilogue_restores__+0x1c>

00000638 <vfprintf>:
 638:	ab e0       	ldi	r26, 0x0B	; 11
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	e2 e2       	ldi	r30, 0x22	; 34
 63e:	f3 e0       	ldi	r31, 0x03	; 3
 640:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <__prologue_saves__>
 644:	6c 01       	movw	r12, r24
 646:	7b 01       	movw	r14, r22
 648:	8a 01       	movw	r16, r20
 64a:	fc 01       	movw	r30, r24
 64c:	16 82       	std	Z+6, r1	; 0x06
 64e:	17 82       	std	Z+7, r1	; 0x07
 650:	83 81       	ldd	r24, Z+3	; 0x03
 652:	81 ff       	sbrs	r24, 1
 654:	cc c1       	rjmp	.+920    	; 0x9ee <__DATA_REGION_LENGTH__+0x1ee>
 656:	ce 01       	movw	r24, r28
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	3c 01       	movw	r6, r24
 65c:	f6 01       	movw	r30, r12
 65e:	93 81       	ldd	r25, Z+3	; 0x03
 660:	f7 01       	movw	r30, r14
 662:	93 fd       	sbrc	r25, 3
 664:	85 91       	lpm	r24, Z+
 666:	93 ff       	sbrs	r25, 3
 668:	81 91       	ld	r24, Z+
 66a:	7f 01       	movw	r14, r30
 66c:	88 23       	and	r24, r24
 66e:	09 f4       	brne	.+2      	; 0x672 <vfprintf+0x3a>
 670:	ba c1       	rjmp	.+884    	; 0x9e6 <__DATA_REGION_LENGTH__+0x1e6>
 672:	85 32       	cpi	r24, 0x25	; 37
 674:	39 f4       	brne	.+14     	; 0x684 <vfprintf+0x4c>
 676:	93 fd       	sbrc	r25, 3
 678:	85 91       	lpm	r24, Z+
 67a:	93 ff       	sbrs	r25, 3
 67c:	81 91       	ld	r24, Z+
 67e:	7f 01       	movw	r14, r30
 680:	85 32       	cpi	r24, 0x25	; 37
 682:	29 f4       	brne	.+10     	; 0x68e <vfprintf+0x56>
 684:	b6 01       	movw	r22, r12
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 13 05 	call	0xa26	; 0xa26 <fputc>
 68c:	e7 cf       	rjmp	.-50     	; 0x65c <vfprintf+0x24>
 68e:	91 2c       	mov	r9, r1
 690:	21 2c       	mov	r2, r1
 692:	31 2c       	mov	r3, r1
 694:	ff e1       	ldi	r31, 0x1F	; 31
 696:	f3 15       	cp	r31, r3
 698:	d8 f0       	brcs	.+54     	; 0x6d0 <vfprintf+0x98>
 69a:	8b 32       	cpi	r24, 0x2B	; 43
 69c:	79 f0       	breq	.+30     	; 0x6bc <vfprintf+0x84>
 69e:	38 f4       	brcc	.+14     	; 0x6ae <vfprintf+0x76>
 6a0:	80 32       	cpi	r24, 0x20	; 32
 6a2:	79 f0       	breq	.+30     	; 0x6c2 <vfprintf+0x8a>
 6a4:	83 32       	cpi	r24, 0x23	; 35
 6a6:	a1 f4       	brne	.+40     	; 0x6d0 <vfprintf+0x98>
 6a8:	23 2d       	mov	r18, r3
 6aa:	20 61       	ori	r18, 0x10	; 16
 6ac:	1d c0       	rjmp	.+58     	; 0x6e8 <vfprintf+0xb0>
 6ae:	8d 32       	cpi	r24, 0x2D	; 45
 6b0:	61 f0       	breq	.+24     	; 0x6ca <vfprintf+0x92>
 6b2:	80 33       	cpi	r24, 0x30	; 48
 6b4:	69 f4       	brne	.+26     	; 0x6d0 <vfprintf+0x98>
 6b6:	23 2d       	mov	r18, r3
 6b8:	21 60       	ori	r18, 0x01	; 1
 6ba:	16 c0       	rjmp	.+44     	; 0x6e8 <vfprintf+0xb0>
 6bc:	83 2d       	mov	r24, r3
 6be:	82 60       	ori	r24, 0x02	; 2
 6c0:	38 2e       	mov	r3, r24
 6c2:	e3 2d       	mov	r30, r3
 6c4:	e4 60       	ori	r30, 0x04	; 4
 6c6:	3e 2e       	mov	r3, r30
 6c8:	2a c0       	rjmp	.+84     	; 0x71e <vfprintf+0xe6>
 6ca:	f3 2d       	mov	r31, r3
 6cc:	f8 60       	ori	r31, 0x08	; 8
 6ce:	1d c0       	rjmp	.+58     	; 0x70a <vfprintf+0xd2>
 6d0:	37 fc       	sbrc	r3, 7
 6d2:	2d c0       	rjmp	.+90     	; 0x72e <vfprintf+0xf6>
 6d4:	20 ed       	ldi	r18, 0xD0	; 208
 6d6:	28 0f       	add	r18, r24
 6d8:	2a 30       	cpi	r18, 0x0A	; 10
 6da:	40 f0       	brcs	.+16     	; 0x6ec <vfprintf+0xb4>
 6dc:	8e 32       	cpi	r24, 0x2E	; 46
 6de:	b9 f4       	brne	.+46     	; 0x70e <vfprintf+0xd6>
 6e0:	36 fc       	sbrc	r3, 6
 6e2:	81 c1       	rjmp	.+770    	; 0x9e6 <__DATA_REGION_LENGTH__+0x1e6>
 6e4:	23 2d       	mov	r18, r3
 6e6:	20 64       	ori	r18, 0x40	; 64
 6e8:	32 2e       	mov	r3, r18
 6ea:	19 c0       	rjmp	.+50     	; 0x71e <vfprintf+0xe6>
 6ec:	36 fe       	sbrs	r3, 6
 6ee:	06 c0       	rjmp	.+12     	; 0x6fc <vfprintf+0xc4>
 6f0:	8a e0       	ldi	r24, 0x0A	; 10
 6f2:	98 9e       	mul	r9, r24
 6f4:	20 0d       	add	r18, r0
 6f6:	11 24       	eor	r1, r1
 6f8:	92 2e       	mov	r9, r18
 6fa:	11 c0       	rjmp	.+34     	; 0x71e <vfprintf+0xe6>
 6fc:	ea e0       	ldi	r30, 0x0A	; 10
 6fe:	2e 9e       	mul	r2, r30
 700:	20 0d       	add	r18, r0
 702:	11 24       	eor	r1, r1
 704:	22 2e       	mov	r2, r18
 706:	f3 2d       	mov	r31, r3
 708:	f0 62       	ori	r31, 0x20	; 32
 70a:	3f 2e       	mov	r3, r31
 70c:	08 c0       	rjmp	.+16     	; 0x71e <vfprintf+0xe6>
 70e:	8c 36       	cpi	r24, 0x6C	; 108
 710:	21 f4       	brne	.+8      	; 0x71a <vfprintf+0xe2>
 712:	83 2d       	mov	r24, r3
 714:	80 68       	ori	r24, 0x80	; 128
 716:	38 2e       	mov	r3, r24
 718:	02 c0       	rjmp	.+4      	; 0x71e <vfprintf+0xe6>
 71a:	88 36       	cpi	r24, 0x68	; 104
 71c:	41 f4       	brne	.+16     	; 0x72e <vfprintf+0xf6>
 71e:	f7 01       	movw	r30, r14
 720:	93 fd       	sbrc	r25, 3
 722:	85 91       	lpm	r24, Z+
 724:	93 ff       	sbrs	r25, 3
 726:	81 91       	ld	r24, Z+
 728:	7f 01       	movw	r14, r30
 72a:	81 11       	cpse	r24, r1
 72c:	b3 cf       	rjmp	.-154    	; 0x694 <vfprintf+0x5c>
 72e:	98 2f       	mov	r25, r24
 730:	9f 7d       	andi	r25, 0xDF	; 223
 732:	95 54       	subi	r25, 0x45	; 69
 734:	93 30       	cpi	r25, 0x03	; 3
 736:	28 f4       	brcc	.+10     	; 0x742 <vfprintf+0x10a>
 738:	0c 5f       	subi	r16, 0xFC	; 252
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	9f e3       	ldi	r25, 0x3F	; 63
 73e:	99 83       	std	Y+1, r25	; 0x01
 740:	0d c0       	rjmp	.+26     	; 0x75c <vfprintf+0x124>
 742:	83 36       	cpi	r24, 0x63	; 99
 744:	31 f0       	breq	.+12     	; 0x752 <vfprintf+0x11a>
 746:	83 37       	cpi	r24, 0x73	; 115
 748:	71 f0       	breq	.+28     	; 0x766 <vfprintf+0x12e>
 74a:	83 35       	cpi	r24, 0x53	; 83
 74c:	09 f0       	breq	.+2      	; 0x750 <vfprintf+0x118>
 74e:	59 c0       	rjmp	.+178    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 750:	21 c0       	rjmp	.+66     	; 0x794 <vfprintf+0x15c>
 752:	f8 01       	movw	r30, r16
 754:	80 81       	ld	r24, Z
 756:	89 83       	std	Y+1, r24	; 0x01
 758:	0e 5f       	subi	r16, 0xFE	; 254
 75a:	1f 4f       	sbci	r17, 0xFF	; 255
 75c:	88 24       	eor	r8, r8
 75e:	83 94       	inc	r8
 760:	91 2c       	mov	r9, r1
 762:	53 01       	movw	r10, r6
 764:	13 c0       	rjmp	.+38     	; 0x78c <vfprintf+0x154>
 766:	28 01       	movw	r4, r16
 768:	f2 e0       	ldi	r31, 0x02	; 2
 76a:	4f 0e       	add	r4, r31
 76c:	51 1c       	adc	r5, r1
 76e:	f8 01       	movw	r30, r16
 770:	a0 80       	ld	r10, Z
 772:	b1 80       	ldd	r11, Z+1	; 0x01
 774:	36 fe       	sbrs	r3, 6
 776:	03 c0       	rjmp	.+6      	; 0x77e <vfprintf+0x146>
 778:	69 2d       	mov	r22, r9
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <vfprintf+0x14a>
 77e:	6f ef       	ldi	r22, 0xFF	; 255
 780:	7f ef       	ldi	r23, 0xFF	; 255
 782:	c5 01       	movw	r24, r10
 784:	0e 94 08 05 	call	0xa10	; 0xa10 <strnlen>
 788:	4c 01       	movw	r8, r24
 78a:	82 01       	movw	r16, r4
 78c:	f3 2d       	mov	r31, r3
 78e:	ff 77       	andi	r31, 0x7F	; 127
 790:	3f 2e       	mov	r3, r31
 792:	16 c0       	rjmp	.+44     	; 0x7c0 <vfprintf+0x188>
 794:	28 01       	movw	r4, r16
 796:	22 e0       	ldi	r18, 0x02	; 2
 798:	42 0e       	add	r4, r18
 79a:	51 1c       	adc	r5, r1
 79c:	f8 01       	movw	r30, r16
 79e:	a0 80       	ld	r10, Z
 7a0:	b1 80       	ldd	r11, Z+1	; 0x01
 7a2:	36 fe       	sbrs	r3, 6
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <vfprintf+0x174>
 7a6:	69 2d       	mov	r22, r9
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <vfprintf+0x178>
 7ac:	6f ef       	ldi	r22, 0xFF	; 255
 7ae:	7f ef       	ldi	r23, 0xFF	; 255
 7b0:	c5 01       	movw	r24, r10
 7b2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <strnlen_P>
 7b6:	4c 01       	movw	r8, r24
 7b8:	f3 2d       	mov	r31, r3
 7ba:	f0 68       	ori	r31, 0x80	; 128
 7bc:	3f 2e       	mov	r3, r31
 7be:	82 01       	movw	r16, r4
 7c0:	33 fc       	sbrc	r3, 3
 7c2:	1b c0       	rjmp	.+54     	; 0x7fa <vfprintf+0x1c2>
 7c4:	82 2d       	mov	r24, r2
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	88 16       	cp	r8, r24
 7ca:	99 06       	cpc	r9, r25
 7cc:	b0 f4       	brcc	.+44     	; 0x7fa <vfprintf+0x1c2>
 7ce:	b6 01       	movw	r22, r12
 7d0:	80 e2       	ldi	r24, 0x20	; 32
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 13 05 	call	0xa26	; 0xa26 <fputc>
 7d8:	2a 94       	dec	r2
 7da:	f4 cf       	rjmp	.-24     	; 0x7c4 <vfprintf+0x18c>
 7dc:	f5 01       	movw	r30, r10
 7de:	37 fc       	sbrc	r3, 7
 7e0:	85 91       	lpm	r24, Z+
 7e2:	37 fe       	sbrs	r3, 7
 7e4:	81 91       	ld	r24, Z+
 7e6:	5f 01       	movw	r10, r30
 7e8:	b6 01       	movw	r22, r12
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	0e 94 13 05 	call	0xa26	; 0xa26 <fputc>
 7f0:	21 10       	cpse	r2, r1
 7f2:	2a 94       	dec	r2
 7f4:	21 e0       	ldi	r18, 0x01	; 1
 7f6:	82 1a       	sub	r8, r18
 7f8:	91 08       	sbc	r9, r1
 7fa:	81 14       	cp	r8, r1
 7fc:	91 04       	cpc	r9, r1
 7fe:	71 f7       	brne	.-36     	; 0x7dc <vfprintf+0x1a4>
 800:	e8 c0       	rjmp	.+464    	; 0x9d2 <__DATA_REGION_LENGTH__+0x1d2>
 802:	84 36       	cpi	r24, 0x64	; 100
 804:	11 f0       	breq	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 806:	89 36       	cpi	r24, 0x69	; 105
 808:	41 f5       	brne	.+80     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 80a:	f8 01       	movw	r30, r16
 80c:	37 fe       	sbrs	r3, 7
 80e:	07 c0       	rjmp	.+14     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 810:	60 81       	ld	r22, Z
 812:	71 81       	ldd	r23, Z+1	; 0x01
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	93 81       	ldd	r25, Z+3	; 0x03
 818:	0c 5f       	subi	r16, 0xFC	; 252
 81a:	1f 4f       	sbci	r17, 0xFF	; 255
 81c:	08 c0       	rjmp	.+16     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 81e:	60 81       	ld	r22, Z
 820:	71 81       	ldd	r23, Z+1	; 0x01
 822:	07 2e       	mov	r0, r23
 824:	00 0c       	add	r0, r0
 826:	88 0b       	sbc	r24, r24
 828:	99 0b       	sbc	r25, r25
 82a:	0e 5f       	subi	r16, 0xFE	; 254
 82c:	1f 4f       	sbci	r17, 0xFF	; 255
 82e:	f3 2d       	mov	r31, r3
 830:	ff 76       	andi	r31, 0x6F	; 111
 832:	3f 2e       	mov	r3, r31
 834:	97 ff       	sbrs	r25, 7
 836:	09 c0       	rjmp	.+18     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 838:	90 95       	com	r25
 83a:	80 95       	com	r24
 83c:	70 95       	com	r23
 83e:	61 95       	neg	r22
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	f0 68       	ori	r31, 0x80	; 128
 848:	3f 2e       	mov	r3, r31
 84a:	2a e0       	ldi	r18, 0x0A	; 10
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	a3 01       	movw	r20, r6
 850:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__ultoa_invert>
 854:	88 2e       	mov	r8, r24
 856:	86 18       	sub	r8, r6
 858:	45 c0       	rjmp	.+138    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 85a:	85 37       	cpi	r24, 0x75	; 117
 85c:	31 f4       	brne	.+12     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 85e:	23 2d       	mov	r18, r3
 860:	2f 7e       	andi	r18, 0xEF	; 239
 862:	b2 2e       	mov	r11, r18
 864:	2a e0       	ldi	r18, 0x0A	; 10
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	25 c0       	rjmp	.+74     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 86a:	93 2d       	mov	r25, r3
 86c:	99 7f       	andi	r25, 0xF9	; 249
 86e:	b9 2e       	mov	r11, r25
 870:	8f 36       	cpi	r24, 0x6F	; 111
 872:	c1 f0       	breq	.+48     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 874:	18 f4       	brcc	.+6      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 876:	88 35       	cpi	r24, 0x58	; 88
 878:	79 f0       	breq	.+30     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 87a:	b5 c0       	rjmp	.+362    	; 0x9e6 <__DATA_REGION_LENGTH__+0x1e6>
 87c:	80 37       	cpi	r24, 0x70	; 112
 87e:	19 f0       	breq	.+6      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 880:	88 37       	cpi	r24, 0x78	; 120
 882:	21 f0       	breq	.+8      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 884:	b0 c0       	rjmp	.+352    	; 0x9e6 <__DATA_REGION_LENGTH__+0x1e6>
 886:	e9 2f       	mov	r30, r25
 888:	e0 61       	ori	r30, 0x10	; 16
 88a:	be 2e       	mov	r11, r30
 88c:	b4 fe       	sbrs	r11, 4
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 890:	fb 2d       	mov	r31, r11
 892:	f4 60       	ori	r31, 0x04	; 4
 894:	bf 2e       	mov	r11, r31
 896:	09 c0       	rjmp	.+18     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 898:	34 fe       	sbrs	r3, 4
 89a:	0a c0       	rjmp	.+20     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 89c:	29 2f       	mov	r18, r25
 89e:	26 60       	ori	r18, 0x06	; 6
 8a0:	b2 2e       	mov	r11, r18
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
 8a4:	28 e0       	ldi	r18, 0x08	; 8
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	05 c0       	rjmp	.+10     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8aa:	20 e1       	ldi	r18, 0x10	; 16
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8b0:	20 e1       	ldi	r18, 0x10	; 16
 8b2:	32 e0       	ldi	r19, 0x02	; 2
 8b4:	f8 01       	movw	r30, r16
 8b6:	b7 fe       	sbrs	r11, 7
 8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8ba:	60 81       	ld	r22, Z
 8bc:	71 81       	ldd	r23, Z+1	; 0x01
 8be:	82 81       	ldd	r24, Z+2	; 0x02
 8c0:	93 81       	ldd	r25, Z+3	; 0x03
 8c2:	0c 5f       	subi	r16, 0xFC	; 252
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8c8:	60 81       	ld	r22, Z
 8ca:	71 81       	ldd	r23, Z+1	; 0x01
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	0e 5f       	subi	r16, 0xFE	; 254
 8d2:	1f 4f       	sbci	r17, 0xFF	; 255
 8d4:	a3 01       	movw	r20, r6
 8d6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__ultoa_invert>
 8da:	88 2e       	mov	r8, r24
 8dc:	86 18       	sub	r8, r6
 8de:	fb 2d       	mov	r31, r11
 8e0:	ff 77       	andi	r31, 0x7F	; 127
 8e2:	3f 2e       	mov	r3, r31
 8e4:	36 fe       	sbrs	r3, 6
 8e6:	0d c0       	rjmp	.+26     	; 0x902 <__DATA_REGION_LENGTH__+0x102>
 8e8:	23 2d       	mov	r18, r3
 8ea:	2e 7f       	andi	r18, 0xFE	; 254
 8ec:	a2 2e       	mov	r10, r18
 8ee:	89 14       	cp	r8, r9
 8f0:	58 f4       	brcc	.+22     	; 0x908 <__DATA_REGION_LENGTH__+0x108>
 8f2:	34 fe       	sbrs	r3, 4
 8f4:	0b c0       	rjmp	.+22     	; 0x90c <__DATA_REGION_LENGTH__+0x10c>
 8f6:	32 fc       	sbrc	r3, 2
 8f8:	09 c0       	rjmp	.+18     	; 0x90c <__DATA_REGION_LENGTH__+0x10c>
 8fa:	83 2d       	mov	r24, r3
 8fc:	8e 7e       	andi	r24, 0xEE	; 238
 8fe:	a8 2e       	mov	r10, r24
 900:	05 c0       	rjmp	.+10     	; 0x90c <__DATA_REGION_LENGTH__+0x10c>
 902:	b8 2c       	mov	r11, r8
 904:	a3 2c       	mov	r10, r3
 906:	03 c0       	rjmp	.+6      	; 0x90e <__DATA_REGION_LENGTH__+0x10e>
 908:	b8 2c       	mov	r11, r8
 90a:	01 c0       	rjmp	.+2      	; 0x90e <__DATA_REGION_LENGTH__+0x10e>
 90c:	b9 2c       	mov	r11, r9
 90e:	a4 fe       	sbrs	r10, 4
 910:	0f c0       	rjmp	.+30     	; 0x930 <__DATA_REGION_LENGTH__+0x130>
 912:	fe 01       	movw	r30, r28
 914:	e8 0d       	add	r30, r8
 916:	f1 1d       	adc	r31, r1
 918:	80 81       	ld	r24, Z
 91a:	80 33       	cpi	r24, 0x30	; 48
 91c:	21 f4       	brne	.+8      	; 0x926 <__DATA_REGION_LENGTH__+0x126>
 91e:	9a 2d       	mov	r25, r10
 920:	99 7e       	andi	r25, 0xE9	; 233
 922:	a9 2e       	mov	r10, r25
 924:	09 c0       	rjmp	.+18     	; 0x938 <__DATA_REGION_LENGTH__+0x138>
 926:	a2 fe       	sbrs	r10, 2
 928:	06 c0       	rjmp	.+12     	; 0x936 <__DATA_REGION_LENGTH__+0x136>
 92a:	b3 94       	inc	r11
 92c:	b3 94       	inc	r11
 92e:	04 c0       	rjmp	.+8      	; 0x938 <__DATA_REGION_LENGTH__+0x138>
 930:	8a 2d       	mov	r24, r10
 932:	86 78       	andi	r24, 0x86	; 134
 934:	09 f0       	breq	.+2      	; 0x938 <__DATA_REGION_LENGTH__+0x138>
 936:	b3 94       	inc	r11
 938:	a3 fc       	sbrc	r10, 3
 93a:	11 c0       	rjmp	.+34     	; 0x95e <__DATA_REGION_LENGTH__+0x15e>
 93c:	a0 fe       	sbrs	r10, 0
 93e:	06 c0       	rjmp	.+12     	; 0x94c <__DATA_REGION_LENGTH__+0x14c>
 940:	b2 14       	cp	r11, r2
 942:	88 f4       	brcc	.+34     	; 0x966 <__DATA_REGION_LENGTH__+0x166>
 944:	28 0c       	add	r2, r8
 946:	92 2c       	mov	r9, r2
 948:	9b 18       	sub	r9, r11
 94a:	0e c0       	rjmp	.+28     	; 0x968 <__DATA_REGION_LENGTH__+0x168>
 94c:	b2 14       	cp	r11, r2
 94e:	60 f4       	brcc	.+24     	; 0x968 <__DATA_REGION_LENGTH__+0x168>
 950:	b6 01       	movw	r22, r12
 952:	80 e2       	ldi	r24, 0x20	; 32
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 13 05 	call	0xa26	; 0xa26 <fputc>
 95a:	b3 94       	inc	r11
 95c:	f7 cf       	rjmp	.-18     	; 0x94c <__DATA_REGION_LENGTH__+0x14c>
 95e:	b2 14       	cp	r11, r2
 960:	18 f4       	brcc	.+6      	; 0x968 <__DATA_REGION_LENGTH__+0x168>
 962:	2b 18       	sub	r2, r11
 964:	02 c0       	rjmp	.+4      	; 0x96a <__DATA_REGION_LENGTH__+0x16a>
 966:	98 2c       	mov	r9, r8
 968:	21 2c       	mov	r2, r1
 96a:	a4 fe       	sbrs	r10, 4
 96c:	10 c0       	rjmp	.+32     	; 0x98e <__DATA_REGION_LENGTH__+0x18e>
 96e:	b6 01       	movw	r22, r12
 970:	80 e3       	ldi	r24, 0x30	; 48
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 94 13 05 	call	0xa26	; 0xa26 <fputc>
 978:	a2 fe       	sbrs	r10, 2
 97a:	17 c0       	rjmp	.+46     	; 0x9aa <__DATA_REGION_LENGTH__+0x1aa>
 97c:	a1 fc       	sbrc	r10, 1
 97e:	03 c0       	rjmp	.+6      	; 0x986 <__DATA_REGION_LENGTH__+0x186>
 980:	88 e7       	ldi	r24, 0x78	; 120
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	02 c0       	rjmp	.+4      	; 0x98a <__DATA_REGION_LENGTH__+0x18a>
 986:	88 e5       	ldi	r24, 0x58	; 88
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	b6 01       	movw	r22, r12
 98c:	0c c0       	rjmp	.+24     	; 0x9a6 <__DATA_REGION_LENGTH__+0x1a6>
 98e:	8a 2d       	mov	r24, r10
 990:	86 78       	andi	r24, 0x86	; 134
 992:	59 f0       	breq	.+22     	; 0x9aa <__DATA_REGION_LENGTH__+0x1aa>
 994:	a1 fe       	sbrs	r10, 1
 996:	02 c0       	rjmp	.+4      	; 0x99c <__DATA_REGION_LENGTH__+0x19c>
 998:	8b e2       	ldi	r24, 0x2B	; 43
 99a:	01 c0       	rjmp	.+2      	; 0x99e <__DATA_REGION_LENGTH__+0x19e>
 99c:	80 e2       	ldi	r24, 0x20	; 32
 99e:	a7 fc       	sbrc	r10, 7
 9a0:	8d e2       	ldi	r24, 0x2D	; 45
 9a2:	b6 01       	movw	r22, r12
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 94 13 05 	call	0xa26	; 0xa26 <fputc>
 9aa:	89 14       	cp	r8, r9
 9ac:	38 f4       	brcc	.+14     	; 0x9bc <__DATA_REGION_LENGTH__+0x1bc>
 9ae:	b6 01       	movw	r22, r12
 9b0:	80 e3       	ldi	r24, 0x30	; 48
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0e 94 13 05 	call	0xa26	; 0xa26 <fputc>
 9b8:	9a 94       	dec	r9
 9ba:	f7 cf       	rjmp	.-18     	; 0x9aa <__DATA_REGION_LENGTH__+0x1aa>
 9bc:	8a 94       	dec	r8
 9be:	f3 01       	movw	r30, r6
 9c0:	e8 0d       	add	r30, r8
 9c2:	f1 1d       	adc	r31, r1
 9c4:	80 81       	ld	r24, Z
 9c6:	b6 01       	movw	r22, r12
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 13 05 	call	0xa26	; 0xa26 <fputc>
 9ce:	81 10       	cpse	r8, r1
 9d0:	f5 cf       	rjmp	.-22     	; 0x9bc <__DATA_REGION_LENGTH__+0x1bc>
 9d2:	22 20       	and	r2, r2
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <__DATA_REGION_LENGTH__+0x1d8>
 9d6:	42 ce       	rjmp	.-892    	; 0x65c <vfprintf+0x24>
 9d8:	b6 01       	movw	r22, r12
 9da:	80 e2       	ldi	r24, 0x20	; 32
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 13 05 	call	0xa26	; 0xa26 <fputc>
 9e2:	2a 94       	dec	r2
 9e4:	f6 cf       	rjmp	.-20     	; 0x9d2 <__DATA_REGION_LENGTH__+0x1d2>
 9e6:	f6 01       	movw	r30, r12
 9e8:	86 81       	ldd	r24, Z+6	; 0x06
 9ea:	97 81       	ldd	r25, Z+7	; 0x07
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <__DATA_REGION_LENGTH__+0x1f2>
 9ee:	8f ef       	ldi	r24, 0xFF	; 255
 9f0:	9f ef       	ldi	r25, 0xFF	; 255
 9f2:	2b 96       	adiw	r28, 0x0b	; 11
 9f4:	e2 e1       	ldi	r30, 0x12	; 18
 9f6:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__epilogue_restores__>

000009fa <strnlen_P>:
 9fa:	fc 01       	movw	r30, r24
 9fc:	05 90       	lpm	r0, Z+
 9fe:	61 50       	subi	r22, 0x01	; 1
 a00:	70 40       	sbci	r23, 0x00	; 0
 a02:	01 10       	cpse	r0, r1
 a04:	d8 f7       	brcc	.-10     	; 0x9fc <strnlen_P+0x2>
 a06:	80 95       	com	r24
 a08:	90 95       	com	r25
 a0a:	8e 0f       	add	r24, r30
 a0c:	9f 1f       	adc	r25, r31
 a0e:	08 95       	ret

00000a10 <strnlen>:
 a10:	fc 01       	movw	r30, r24
 a12:	61 50       	subi	r22, 0x01	; 1
 a14:	70 40       	sbci	r23, 0x00	; 0
 a16:	01 90       	ld	r0, Z+
 a18:	01 10       	cpse	r0, r1
 a1a:	d8 f7       	brcc	.-10     	; 0xa12 <strnlen+0x2>
 a1c:	80 95       	com	r24
 a1e:	90 95       	com	r25
 a20:	8e 0f       	add	r24, r30
 a22:	9f 1f       	adc	r25, r31
 a24:	08 95       	ret

00000a26 <fputc>:
 a26:	0f 93       	push	r16
 a28:	1f 93       	push	r17
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	fb 01       	movw	r30, r22
 a30:	23 81       	ldd	r18, Z+3	; 0x03
 a32:	21 fd       	sbrc	r18, 1
 a34:	03 c0       	rjmp	.+6      	; 0xa3c <fputc+0x16>
 a36:	8f ef       	ldi	r24, 0xFF	; 255
 a38:	9f ef       	ldi	r25, 0xFF	; 255
 a3a:	2c c0       	rjmp	.+88     	; 0xa94 <fputc+0x6e>
 a3c:	22 ff       	sbrs	r18, 2
 a3e:	16 c0       	rjmp	.+44     	; 0xa6c <fputc+0x46>
 a40:	46 81       	ldd	r20, Z+6	; 0x06
 a42:	57 81       	ldd	r21, Z+7	; 0x07
 a44:	24 81       	ldd	r18, Z+4	; 0x04
 a46:	35 81       	ldd	r19, Z+5	; 0x05
 a48:	42 17       	cp	r20, r18
 a4a:	53 07       	cpc	r21, r19
 a4c:	44 f4       	brge	.+16     	; 0xa5e <fputc+0x38>
 a4e:	a0 81       	ld	r26, Z
 a50:	b1 81       	ldd	r27, Z+1	; 0x01
 a52:	9d 01       	movw	r18, r26
 a54:	2f 5f       	subi	r18, 0xFF	; 255
 a56:	3f 4f       	sbci	r19, 0xFF	; 255
 a58:	20 83       	st	Z, r18
 a5a:	31 83       	std	Z+1, r19	; 0x01
 a5c:	8c 93       	st	X, r24
 a5e:	26 81       	ldd	r18, Z+6	; 0x06
 a60:	37 81       	ldd	r19, Z+7	; 0x07
 a62:	2f 5f       	subi	r18, 0xFF	; 255
 a64:	3f 4f       	sbci	r19, 0xFF	; 255
 a66:	26 83       	std	Z+6, r18	; 0x06
 a68:	37 83       	std	Z+7, r19	; 0x07
 a6a:	14 c0       	rjmp	.+40     	; 0xa94 <fputc+0x6e>
 a6c:	8b 01       	movw	r16, r22
 a6e:	ec 01       	movw	r28, r24
 a70:	fb 01       	movw	r30, r22
 a72:	00 84       	ldd	r0, Z+8	; 0x08
 a74:	f1 85       	ldd	r31, Z+9	; 0x09
 a76:	e0 2d       	mov	r30, r0
 a78:	09 95       	icall
 a7a:	89 2b       	or	r24, r25
 a7c:	e1 f6       	brne	.-72     	; 0xa36 <fputc+0x10>
 a7e:	d8 01       	movw	r26, r16
 a80:	16 96       	adiw	r26, 0x06	; 6
 a82:	8d 91       	ld	r24, X+
 a84:	9c 91       	ld	r25, X
 a86:	17 97       	sbiw	r26, 0x07	; 7
 a88:	01 96       	adiw	r24, 0x01	; 1
 a8a:	16 96       	adiw	r26, 0x06	; 6
 a8c:	8d 93       	st	X+, r24
 a8e:	9c 93       	st	X, r25
 a90:	17 97       	sbiw	r26, 0x07	; 7
 a92:	ce 01       	movw	r24, r28
 a94:	df 91       	pop	r29
 a96:	cf 91       	pop	r28
 a98:	1f 91       	pop	r17
 a9a:	0f 91       	pop	r16
 a9c:	08 95       	ret

00000a9e <__ultoa_invert>:
 a9e:	fa 01       	movw	r30, r20
 aa0:	aa 27       	eor	r26, r26
 aa2:	28 30       	cpi	r18, 0x08	; 8
 aa4:	51 f1       	breq	.+84     	; 0xafa <__ultoa_invert+0x5c>
 aa6:	20 31       	cpi	r18, 0x10	; 16
 aa8:	81 f1       	breq	.+96     	; 0xb0a <__ultoa_invert+0x6c>
 aaa:	e8 94       	clt
 aac:	6f 93       	push	r22
 aae:	6e 7f       	andi	r22, 0xFE	; 254
 ab0:	6e 5f       	subi	r22, 0xFE	; 254
 ab2:	7f 4f       	sbci	r23, 0xFF	; 255
 ab4:	8f 4f       	sbci	r24, 0xFF	; 255
 ab6:	9f 4f       	sbci	r25, 0xFF	; 255
 ab8:	af 4f       	sbci	r26, 0xFF	; 255
 aba:	b1 e0       	ldi	r27, 0x01	; 1
 abc:	3e d0       	rcall	.+124    	; 0xb3a <__ultoa_invert+0x9c>
 abe:	b4 e0       	ldi	r27, 0x04	; 4
 ac0:	3c d0       	rcall	.+120    	; 0xb3a <__ultoa_invert+0x9c>
 ac2:	67 0f       	add	r22, r23
 ac4:	78 1f       	adc	r23, r24
 ac6:	89 1f       	adc	r24, r25
 ac8:	9a 1f       	adc	r25, r26
 aca:	a1 1d       	adc	r26, r1
 acc:	68 0f       	add	r22, r24
 ace:	79 1f       	adc	r23, r25
 ad0:	8a 1f       	adc	r24, r26
 ad2:	91 1d       	adc	r25, r1
 ad4:	a1 1d       	adc	r26, r1
 ad6:	6a 0f       	add	r22, r26
 ad8:	71 1d       	adc	r23, r1
 ada:	81 1d       	adc	r24, r1
 adc:	91 1d       	adc	r25, r1
 ade:	a1 1d       	adc	r26, r1
 ae0:	20 d0       	rcall	.+64     	; 0xb22 <__ultoa_invert+0x84>
 ae2:	09 f4       	brne	.+2      	; 0xae6 <__ultoa_invert+0x48>
 ae4:	68 94       	set
 ae6:	3f 91       	pop	r19
 ae8:	2a e0       	ldi	r18, 0x0A	; 10
 aea:	26 9f       	mul	r18, r22
 aec:	11 24       	eor	r1, r1
 aee:	30 19       	sub	r19, r0
 af0:	30 5d       	subi	r19, 0xD0	; 208
 af2:	31 93       	st	Z+, r19
 af4:	de f6       	brtc	.-74     	; 0xaac <__ultoa_invert+0xe>
 af6:	cf 01       	movw	r24, r30
 af8:	08 95       	ret
 afa:	46 2f       	mov	r20, r22
 afc:	47 70       	andi	r20, 0x07	; 7
 afe:	40 5d       	subi	r20, 0xD0	; 208
 b00:	41 93       	st	Z+, r20
 b02:	b3 e0       	ldi	r27, 0x03	; 3
 b04:	0f d0       	rcall	.+30     	; 0xb24 <__ultoa_invert+0x86>
 b06:	c9 f7       	brne	.-14     	; 0xafa <__ultoa_invert+0x5c>
 b08:	f6 cf       	rjmp	.-20     	; 0xaf6 <__ultoa_invert+0x58>
 b0a:	46 2f       	mov	r20, r22
 b0c:	4f 70       	andi	r20, 0x0F	; 15
 b0e:	40 5d       	subi	r20, 0xD0	; 208
 b10:	4a 33       	cpi	r20, 0x3A	; 58
 b12:	18 f0       	brcs	.+6      	; 0xb1a <__ultoa_invert+0x7c>
 b14:	49 5d       	subi	r20, 0xD9	; 217
 b16:	31 fd       	sbrc	r19, 1
 b18:	40 52       	subi	r20, 0x20	; 32
 b1a:	41 93       	st	Z+, r20
 b1c:	02 d0       	rcall	.+4      	; 0xb22 <__ultoa_invert+0x84>
 b1e:	a9 f7       	brne	.-22     	; 0xb0a <__ultoa_invert+0x6c>
 b20:	ea cf       	rjmp	.-44     	; 0xaf6 <__ultoa_invert+0x58>
 b22:	b4 e0       	ldi	r27, 0x04	; 4
 b24:	a6 95       	lsr	r26
 b26:	97 95       	ror	r25
 b28:	87 95       	ror	r24
 b2a:	77 95       	ror	r23
 b2c:	67 95       	ror	r22
 b2e:	ba 95       	dec	r27
 b30:	c9 f7       	brne	.-14     	; 0xb24 <__ultoa_invert+0x86>
 b32:	00 97       	sbiw	r24, 0x00	; 0
 b34:	61 05       	cpc	r22, r1
 b36:	71 05       	cpc	r23, r1
 b38:	08 95       	ret
 b3a:	9b 01       	movw	r18, r22
 b3c:	ac 01       	movw	r20, r24
 b3e:	0a 2e       	mov	r0, r26
 b40:	06 94       	lsr	r0
 b42:	57 95       	ror	r21
 b44:	47 95       	ror	r20
 b46:	37 95       	ror	r19
 b48:	27 95       	ror	r18
 b4a:	ba 95       	dec	r27
 b4c:	c9 f7       	brne	.-14     	; 0xb40 <__ultoa_invert+0xa2>
 b4e:	62 0f       	add	r22, r18
 b50:	73 1f       	adc	r23, r19
 b52:	84 1f       	adc	r24, r20
 b54:	95 1f       	adc	r25, r21
 b56:	a0 1d       	adc	r26, r0
 b58:	08 95       	ret

00000b5a <eeprom_write_word>:
 b5a:	0e 94 b2 05 	call	0xb64	; 0xb64 <eeprom_write_byte>
 b5e:	27 2f       	mov	r18, r23
 b60:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <eeprom_write_r18>

00000b64 <eeprom_write_byte>:
 b64:	26 2f       	mov	r18, r22

00000b66 <eeprom_write_r18>:
 b66:	af 93       	push	r26
 b68:	bf 93       	push	r27
 b6a:	e0 e0       	ldi	r30, 0x00	; 0
 b6c:	f0 e1       	ldi	r31, 0x10	; 16
 b6e:	32 81       	ldd	r19, Z+2	; 0x02
 b70:	31 fd       	sbrc	r19, 1
 b72:	fd cf       	rjmp	.-6      	; 0xb6e <eeprom_write_r18+0x8>
 b74:	dc 01       	movw	r26, r24
 b76:	a0 50       	subi	r26, 0x00	; 0
 b78:	bc 4e       	sbci	r27, 0xEC	; 236
 b7a:	2c 93       	st	X, r18
 b7c:	2d e9       	ldi	r18, 0x9D	; 157
 b7e:	24 bf       	out	0x34, r18	; 52
 b80:	23 e0       	ldi	r18, 0x03	; 3
 b82:	20 83       	st	Z, r18
 b84:	01 96       	adiw	r24, 0x01	; 1
 b86:	bf 91       	pop	r27
 b88:	af 91       	pop	r26
 b8a:	08 95       	ret

00000b8c <__prologue_saves__>:
 b8c:	2f 92       	push	r2
 b8e:	3f 92       	push	r3
 b90:	4f 92       	push	r4
 b92:	5f 92       	push	r5
 b94:	6f 92       	push	r6
 b96:	7f 92       	push	r7
 b98:	8f 92       	push	r8
 b9a:	9f 92       	push	r9
 b9c:	af 92       	push	r10
 b9e:	bf 92       	push	r11
 ba0:	cf 92       	push	r12
 ba2:	df 92       	push	r13
 ba4:	ef 92       	push	r14
 ba6:	ff 92       	push	r15
 ba8:	0f 93       	push	r16
 baa:	1f 93       	push	r17
 bac:	cf 93       	push	r28
 bae:	df 93       	push	r29
 bb0:	cd b7       	in	r28, 0x3d	; 61
 bb2:	de b7       	in	r29, 0x3e	; 62
 bb4:	ca 1b       	sub	r28, r26
 bb6:	db 0b       	sbc	r29, r27
 bb8:	cd bf       	out	0x3d, r28	; 61
 bba:	de bf       	out	0x3e, r29	; 62
 bbc:	09 94       	ijmp

00000bbe <__epilogue_restores__>:
 bbe:	2a 88       	ldd	r2, Y+18	; 0x12
 bc0:	39 88       	ldd	r3, Y+17	; 0x11
 bc2:	48 88       	ldd	r4, Y+16	; 0x10
 bc4:	5f 84       	ldd	r5, Y+15	; 0x0f
 bc6:	6e 84       	ldd	r6, Y+14	; 0x0e
 bc8:	7d 84       	ldd	r7, Y+13	; 0x0d
 bca:	8c 84       	ldd	r8, Y+12	; 0x0c
 bcc:	9b 84       	ldd	r9, Y+11	; 0x0b
 bce:	aa 84       	ldd	r10, Y+10	; 0x0a
 bd0:	b9 84       	ldd	r11, Y+9	; 0x09
 bd2:	c8 84       	ldd	r12, Y+8	; 0x08
 bd4:	df 80       	ldd	r13, Y+7	; 0x07
 bd6:	ee 80       	ldd	r14, Y+6	; 0x06
 bd8:	fd 80       	ldd	r15, Y+5	; 0x05
 bda:	0c 81       	ldd	r16, Y+4	; 0x04
 bdc:	1b 81       	ldd	r17, Y+3	; 0x03
 bde:	aa 81       	ldd	r26, Y+2	; 0x02
 be0:	b9 81       	ldd	r27, Y+1	; 0x01
 be2:	ce 0f       	add	r28, r30
 be4:	d1 1d       	adc	r29, r1
 be6:	cd bf       	out	0x3d, r28	; 61
 be8:	de bf       	out	0x3e, r29	; 62
 bea:	ed 01       	movw	r28, r26
 bec:	08 95       	ret

00000bee <_exit>:
 bee:	f8 94       	cli

00000bf0 <__stop_program>:
 bf0:	ff cf       	rjmp	.-2      	; 0xbf0 <__stop_program>
