
Accelerometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000ba5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b18  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000019  00004b18  00000b18  00000b8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      0000005c  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000331c  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024d0  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000772  00000000  00000000  000064d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00006c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001646  00000000  00000000  00006e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067e  00000000  00000000  0000847a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00008af8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 a1 01 	call	0x342	; 0x342 <main>
  a0:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <lsqrt>:
#define FXLS8967_REG_SENS_CONFIG1   0x15
#define FXLS8967_REG_SENS_CONFIG5   0x19
#define FXLS8967_REG_OUT_X_LSB      0x04

// Function to compute the integer square root of a non-negative long integer
long lsqrt(long n) {
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	8b 01       	movw	r16, r22
  b6:	9c 01       	movw	r18, r24
	if (n < 0) {
  b8:	99 23       	and	r25, r25
  ba:	0c f4       	brge	.+2      	; 0xbe <lsqrt+0x16>
  bc:	43 c0       	rjmp	.+134    	; 0x144 <__EEPROM_REGION_LENGTH__+0x44>
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b0 e4       	ldi	r27, 0x40	; 64
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <lsqrt+0x30>
	long res = 0;
	long bit = 1L << (sizeof(long) * 8 - 2); // The second-to-top bit is set

	// "bit" starts at the highest power of four <= the argument.
	while (bit > n) {
		bit >>= 2;
  c8:	b5 95       	asr	r27
  ca:	a7 95       	ror	r26
  cc:	97 95       	ror	r25
  ce:	87 95       	ror	r24
  d0:	b5 95       	asr	r27
  d2:	a7 95       	ror	r26
  d4:	97 95       	ror	r25
  d6:	87 95       	ror	r24

	long res = 0;
	long bit = 1L << (sizeof(long) * 8 - 2); // The second-to-top bit is set

	// "bit" starts at the highest power of four <= the argument.
	while (bit > n) {
  d8:	08 17       	cp	r16, r24
  da:	19 07       	cpc	r17, r25
  dc:	2a 07       	cpc	r18, r26
  de:	3b 07       	cpc	r19, r27
  e0:	9c f3       	brlt	.-26     	; 0xc8 <lsqrt+0x20>
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	ba 01       	movw	r22, r20
  e8:	24 c0       	rjmp	.+72     	; 0x132 <__EEPROM_REGION_LENGTH__+0x32>
		bit >>= 2;
	}

	while (bit != 0) {
		if (n >= res + bit) {
  ea:	6a 01       	movw	r12, r20
  ec:	7b 01       	movw	r14, r22
  ee:	c8 0e       	add	r12, r24
  f0:	d9 1e       	adc	r13, r25
  f2:	ea 1e       	adc	r14, r26
  f4:	fb 1e       	adc	r15, r27
  f6:	0c 15       	cp	r16, r12
  f8:	1d 05       	cpc	r17, r13
  fa:	2e 05       	cpc	r18, r14
  fc:	3f 05       	cpc	r19, r15
  fe:	6c f0       	brlt	.+26     	; 0x11a <__EEPROM_REGION_LENGTH__+0x1a>
			n -= res + bit;
 100:	0c 19       	sub	r16, r12
 102:	1d 09       	sbc	r17, r13
 104:	2e 09       	sbc	r18, r14
 106:	3f 09       	sbc	r19, r15
			res = (res >> 1) + bit;
 108:	75 95       	asr	r23
 10a:	67 95       	ror	r22
 10c:	57 95       	ror	r21
 10e:	47 95       	ror	r20
 110:	48 0f       	add	r20, r24
 112:	59 1f       	adc	r21, r25
 114:	6a 1f       	adc	r22, r26
 116:	7b 1f       	adc	r23, r27
 118:	04 c0       	rjmp	.+8      	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
			} else {
			res >>= 1;
 11a:	75 95       	asr	r23
 11c:	67 95       	ror	r22
 11e:	57 95       	ror	r21
 120:	47 95       	ror	r20
		}
		bit >>= 2;
 122:	b5 95       	asr	r27
 124:	a7 95       	ror	r26
 126:	97 95       	ror	r25
 128:	87 95       	ror	r24
 12a:	b5 95       	asr	r27
 12c:	a7 95       	ror	r26
 12e:	97 95       	ror	r25
 130:	87 95       	ror	r24
	// "bit" starts at the highest power of four <= the argument.
	while (bit > n) {
		bit >>= 2;
	}

	while (bit != 0) {
 132:	00 97       	sbiw	r24, 0x00	; 0
 134:	a1 05       	cpc	r26, r1
 136:	b1 05       	cpc	r27, r1
 138:	c1 f6       	brne	.-80     	; 0xea <lsqrt+0x42>
			} else {
			res >>= 1;
		}
		bit >>= 2;
	}
	return res;
 13a:	34 2f       	mov	r19, r20
 13c:	25 2f       	mov	r18, r21
 13e:	86 2f       	mov	r24, r22
 140:	97 2f       	mov	r25, r23
 142:	04 c0       	rjmp	.+8      	; 0x14c <__EEPROM_REGION_LENGTH__+0x4c>

// Function to compute the integer square root of a non-negative long integer
long lsqrt(long n) {
	if (n < 0) {
		// Handle negative input as appropriate, here we return -1 to indicate an error
		return -1;
 144:	3f ef       	ldi	r19, 0xFF	; 255
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	9f ef       	ldi	r25, 0xFF	; 255
			res >>= 1;
		}
		bit >>= 2;
	}
	return res;
}
 14c:	63 2f       	mov	r22, r19
 14e:	72 2f       	mov	r23, r18
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	df 90       	pop	r13
 15a:	cf 90       	pop	r12
 15c:	08 95       	ret

0000015e <SPI_Init>:

// SPI Initialization
void SPI_Init(void) {
	// Set MOSI (PA4), SCK (PA6) as output, MISO (PA5) as input
	PORTA.DIRSET = PIN4_bm | PIN6_bm; // MOSI, SCK as output
 15e:	e0 e0       	ldi	r30, 0x00	; 0
 160:	f4 e0       	ldi	r31, 0x04	; 4
 162:	80 e5       	ldi	r24, 0x50	; 80
 164:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRCLR = PIN5_bm;           // MISO as input
 166:	80 e2       	ldi	r24, 0x20	; 32
 168:	82 83       	std	Z+2, r24	; 0x02
	PORTA.DIRSET = PIN7_bm;           // CS as output
 16a:	80 e8       	ldi	r24, 0x80	; 128
 16c:	81 83       	std	Z+1, r24	; 0x01

	// Enable SPI, Set as Master, Prescaler: Fosc/16, SPI Mode 0
	SPI0.CTRLA = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_PRESC_DIV128_gc;
 16e:	87 e2       	ldi	r24, 0x27	; 39
 170:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__RODATA_PM_OFFSET__+0x7fc8c0>
 174:	08 95       	ret

00000176 <SPI_Transfer>:
}

// SPI Send and Receive Data
uint8_t SPI_Transfer(uint8_t data) {
	SPI0.DATA = data;
 176:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
	while (!(SPI0.INTFLAGS & SPI_IF_bm)); // Wait for transmission complete
 17a:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__RODATA_PM_OFFSET__+0x7fc8c3>
 17e:	88 23       	and	r24, r24
 180:	e4 f7       	brge	.-8      	; 0x17a <SPI_Transfer+0x4>
	return SPI0.DATA;
 182:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
}
 186:	08 95       	ret

00000188 <FXLS8967_Select>:

// Select the FXLS8967 (Pull CS low)
void FXLS8967_Select(void) {
	PORTA.OUTCLR = PIN7_bm; // CS low
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7fc406>
 18e:	08 95       	ret

00000190 <FXLS8967_Deselect>:
}

// Deselect the FXLS8967 (Pull CS high)
void FXLS8967_Deselect(void) {
	PORTA.OUTSET = PIN7_bm; // CS high
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7fc405>
 196:	08 95       	ret

00000198 <FXLS8967_WriteByte>:
}

// Write a byte to a register
void FXLS8967_WriteByte(uint8_t reg, uint8_t data) {
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	d8 2f       	mov	r29, r24
 19e:	c6 2f       	mov	r28, r22
	FXLS8967_Select();
 1a0:	0e 94 c4 00 	call	0x188	; 0x188 <FXLS8967_Select>
	SPI_Transfer(reg & 0x7F); // Write command
 1a4:	8d 2f       	mov	r24, r29
 1a6:	8f 77       	andi	r24, 0x7F	; 127
 1a8:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
	SPI_Transfer(0x00);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
	SPI_Transfer(data);
 1b2:	8c 2f       	mov	r24, r28
 1b4:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
	FXLS8967_Deselect();
 1b8:	0e 94 c8 00 	call	0x190	; 0x190 <FXLS8967_Deselect>
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <FXLS8967_ReadByte>:

// Read a byte from a register
uint8_t FXLS8967_ReadByte(uint8_t reg) {
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
	uint8_t data;
	FXLS8967_Select();
 1c6:	0e 94 c4 00 	call	0x188	; 0x188 <FXLS8967_Select>
	SPI_Transfer(reg | 0x80); // Read command
 1ca:	8c 2f       	mov	r24, r28
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
	SPI_Transfer(0x00);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
	data = SPI_Transfer(0x00);
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
 1de:	c8 2f       	mov	r28, r24
	FXLS8967_Deselect();
 1e0:	0e 94 c8 00 	call	0x190	; 0x190 <FXLS8967_Deselect>
	return data;
}
 1e4:	8c 2f       	mov	r24, r28
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <FXLS8967_Init>:

// Initialize the FXLS8967
void FXLS8967_Init(void) {
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG1, 0x00);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	85 e1       	ldi	r24, 0x15	; 21
 1ee:	0e 94 cc 00 	call	0x198	; 0x198 <FXLS8967_WriteByte>
	
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG5, 0x10);
 1f2:	60 e1       	ldi	r22, 0x10	; 16
 1f4:	89 e1       	ldi	r24, 0x19	; 25
 1f6:	0e 94 cc 00 	call	0x198	; 0x198 <FXLS8967_WriteByte>
	
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG1, 0x07); // Set to active mode
 1fa:	67 e0       	ldi	r22, 0x07	; 7
 1fc:	85 e1       	ldi	r24, 0x15	; 21
 1fe:	0e 94 cc 00 	call	0x198	; 0x198 <FXLS8967_WriteByte>
 202:	08 95       	ret

00000204 <FXLS8967_ReadAccel>:
}

// Read accelerometer data
void FXLS8967_ReadAccel(int16_t *x, int16_t *y, int16_t *z, int16_t *a) {
 204:	6f 92       	push	r6
 206:	7f 92       	push	r7
 208:	8f 92       	push	r8
 20a:	9f 92       	push	r9
 20c:	af 92       	push	r10
 20e:	bf 92       	push	r11
 210:	cf 92       	push	r12
 212:	df 92       	push	r13
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	8c 01       	movw	r16, r24
 222:	eb 01       	movw	r28, r22
 224:	6a 01       	movw	r12, r20
 226:	79 01       	movw	r14, r18
	uint8_t x_msb, x_lsb, y_msb, y_lsb, z_msb, z_lsb;
	long la;
	
	FXLS8967_Select();
 228:	0e 94 c4 00 	call	0x188	; 0x188 <FXLS8967_Select>
	SPI_Transfer(FXLS8967_REG_OUT_X_LSB | 0x80);
 22c:	84 e8       	ldi	r24, 0x84	; 132
 22e:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
	SPI_Transfer(0x00);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
	x_lsb = SPI_Transfer(0x00);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
 23e:	68 2e       	mov	r6, r24
	x_msb = SPI_Transfer(0x00);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
 246:	78 2e       	mov	r7, r24
	y_lsb = SPI_Transfer(0x00);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
 24e:	88 2e       	mov	r8, r24
	y_msb = SPI_Transfer(0x00);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
 256:	98 2e       	mov	r9, r24
	z_lsb = SPI_Transfer(0x00);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
 25e:	a8 2e       	mov	r10, r24
	z_msb = SPI_Transfer(0x00);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_Transfer>
 266:	b8 2e       	mov	r11, r24
	FXLS8967_Deselect();
 268:	0e 94 c8 00 	call	0x190	; 0x190 <FXLS8967_Deselect>

	*x = (uint16_t)((((x_msb << 8) | x_lsb) << 4) / 2);
 26c:	87 2d       	mov	r24, r7
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	98 2f       	mov	r25, r24
 272:	88 27       	eor	r24, r24
 274:	86 29       	or	r24, r6
 276:	9c 01       	movw	r18, r24
 278:	22 95       	swap	r18
 27a:	32 95       	swap	r19
 27c:	30 7f       	andi	r19, 0xF0	; 240
 27e:	32 27       	eor	r19, r18
 280:	20 7f       	andi	r18, 0xF0	; 240
 282:	32 27       	eor	r19, r18
 284:	93 ff       	sbrs	r25, 3
 286:	02 c0       	rjmp	.+4      	; 0x28c <FXLS8967_ReadAccel+0x88>
 288:	2f 5f       	subi	r18, 0xFF	; 255
 28a:	3f 4f       	sbci	r19, 0xFF	; 255
 28c:	35 95       	asr	r19
 28e:	27 95       	ror	r18
 290:	f8 01       	movw	r30, r16
 292:	20 83       	st	Z, r18
 294:	31 83       	std	Z+1, r19	; 0x01
	*y = (uint16_t)((((y_msb << 8) | y_lsb) << 4) / 2);
 296:	89 2d       	mov	r24, r9
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	98 2f       	mov	r25, r24
 29c:	88 27       	eor	r24, r24
 29e:	88 29       	or	r24, r8
 2a0:	9c 01       	movw	r18, r24
 2a2:	22 95       	swap	r18
 2a4:	32 95       	swap	r19
 2a6:	30 7f       	andi	r19, 0xF0	; 240
 2a8:	32 27       	eor	r19, r18
 2aa:	20 7f       	andi	r18, 0xF0	; 240
 2ac:	32 27       	eor	r19, r18
 2ae:	93 ff       	sbrs	r25, 3
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <FXLS8967_ReadAccel+0xb2>
 2b2:	2f 5f       	subi	r18, 0xFF	; 255
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	35 95       	asr	r19
 2b8:	27 95       	ror	r18
 2ba:	28 83       	st	Y, r18
 2bc:	39 83       	std	Y+1, r19	; 0x01
	*z = (uint16_t)((((z_msb << 8) | z_lsb) << 4) / 2);
 2be:	8b 2d       	mov	r24, r11
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	98 2f       	mov	r25, r24
 2c4:	88 27       	eor	r24, r24
 2c6:	8a 29       	or	r24, r10
 2c8:	ac 01       	movw	r20, r24
 2ca:	42 95       	swap	r20
 2cc:	52 95       	swap	r21
 2ce:	50 7f       	andi	r21, 0xF0	; 240
 2d0:	54 27       	eor	r21, r20
 2d2:	40 7f       	andi	r20, 0xF0	; 240
 2d4:	54 27       	eor	r21, r20
 2d6:	93 ff       	sbrs	r25, 3
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <FXLS8967_ReadAccel+0xda>
 2da:	4f 5f       	subi	r20, 0xFF	; 255
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	55 95       	asr	r21
 2e0:	47 95       	ror	r20
 2e2:	f6 01       	movw	r30, r12
 2e4:	40 83       	st	Z, r20
 2e6:	51 83       	std	Z+1, r21	; 0x01
	
	la = (long)*x * (long)*x + (long)*y * (long)*y + (long)*z * (long)*z;
 2e8:	f8 01       	movw	r30, r16
 2ea:	a0 81       	ld	r26, Z
 2ec:	b1 81       	ldd	r27, Z+1	; 0x01
 2ee:	9d 01       	movw	r18, r26
 2f0:	0e 94 88 02 	call	0x510	; 0x510 <__mulhisi3>
 2f4:	4b 01       	movw	r8, r22
 2f6:	5c 01       	movw	r10, r24
 2f8:	a8 81       	ld	r26, Y
 2fa:	b9 81       	ldd	r27, Y+1	; 0x01
 2fc:	9d 01       	movw	r18, r26
 2fe:	0e 94 88 02 	call	0x510	; 0x510 <__mulhisi3>
 302:	86 0e       	add	r8, r22
 304:	97 1e       	adc	r9, r23
 306:	a8 1e       	adc	r10, r24
 308:	b9 1e       	adc	r11, r25
 30a:	9a 01       	movw	r18, r20
 30c:	da 01       	movw	r26, r20
 30e:	0e 94 88 02 	call	0x510	; 0x510 <__mulhisi3>
 312:	68 0d       	add	r22, r8
 314:	79 1d       	adc	r23, r9
 316:	8a 1d       	adc	r24, r10
 318:	9b 1d       	adc	r25, r11
	la = lsqrt(la);
 31a:	0e 94 54 00 	call	0xa8	; 0xa8 <lsqrt>
	*a = (uint16_t)la;
 31e:	f7 01       	movw	r30, r14
 320:	60 83       	st	Z, r22
 322:	71 83       	std	Z+1, r23	; 0x01
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	df 90       	pop	r13
 332:	cf 90       	pop	r12
 334:	bf 90       	pop	r11
 336:	af 90       	pop	r10
 338:	9f 90       	pop	r9
 33a:	8f 90       	pop	r8
 33c:	7f 90       	pop	r7
 33e:	6f 90       	pop	r6
 340:	08 95       	ret

00000342 <main>:

int main(void)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	28 97       	sbiw	r28, 0x08	; 8
 34c:	cd bf       	out	0x3d, r28	; 61
 34e:	de bf       	out	0x3e, r29	; 62
	uint8_t whoami = 0;
	int16_t x = 0;
 350:	19 82       	std	Y+1, r1	; 0x01
 352:	1a 82       	std	Y+2, r1	; 0x02
	int16_t y = 0;
 354:	1b 82       	std	Y+3, r1	; 0x03
 356:	1c 82       	std	Y+4, r1	; 0x04
	int16_t z = 0;
 358:	1d 82       	std	Y+5, r1	; 0x05
 35a:	1e 82       	std	Y+6, r1	; 0x06
	int16_t a = 0;
 35c:	1f 82       	std	Y+7, r1	; 0x07
 35e:	18 86       	std	Y+8, r1	; 0x08
	USART1_Init();
 360:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <USART1_Init>
    SPI_Init();
 364:	0e 94 af 00 	call	0x15e	; 0x15e <SPI_Init>
	FXLS8967_Init();
 368:	0e 94 f5 00 	call	0x1ea	; 0x1ea <FXLS8967_Init>
	whoami = FXLS8967_ReadByte(FXLS8967_REG_WHO_AM_I);
 36c:	83 e1       	ldi	r24, 0x13	; 19
 36e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <FXLS8967_ReadByte>
	USART1_Transmit_Number(whoami); //Supposed to be 135
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 36 02 	call	0x46c	; 0x46c <USART1_Transmit_Number>
	USART1_Transmit_String("\n\r");
 378:	88 e1       	ldi	r24, 0x18	; 24
 37a:	9b e4       	ldi	r25, 0x4B	; 75
 37c:	0e 94 65 02 	call	0x4ca	; 0x4ca <USART1_Transmit_String>
    while (1) 
    {
		wdt_reset();
 380:	a8 95       	wdr
		FXLS8967_ReadAccel(&x, &y, &z, &a);
 382:	9e 01       	movw	r18, r28
 384:	29 5f       	subi	r18, 0xF9	; 249
 386:	3f 4f       	sbci	r19, 0xFF	; 255
 388:	ae 01       	movw	r20, r28
 38a:	4b 5f       	subi	r20, 0xFB	; 251
 38c:	5f 4f       	sbci	r21, 0xFF	; 255
 38e:	be 01       	movw	r22, r28
 390:	6d 5f       	subi	r22, 0xFD	; 253
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	ce 01       	movw	r24, r28
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	0e 94 02 01 	call	0x204	; 0x204 <FXLS8967_ReadAccel>
		USART1_Transmit_String("X: ");
 39c:	8b e1       	ldi	r24, 0x1B	; 27
 39e:	9b e4       	ldi	r25, 0x4B	; 75
 3a0:	0e 94 65 02 	call	0x4ca	; 0x4ca <USART1_Transmit_String>
		USART1_Transmit_Number(x);
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	9a 81       	ldd	r25, Y+2	; 0x02
 3a8:	0e 94 36 02 	call	0x46c	; 0x46c <USART1_Transmit_Number>
		USART1_Transmit_String(" Y: ");
 3ac:	8f e1       	ldi	r24, 0x1F	; 31
 3ae:	9b e4       	ldi	r25, 0x4B	; 75
 3b0:	0e 94 65 02 	call	0x4ca	; 0x4ca <USART1_Transmit_String>
		USART1_Transmit_Number(y);
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03
 3b6:	9c 81       	ldd	r25, Y+4	; 0x04
 3b8:	0e 94 36 02 	call	0x46c	; 0x46c <USART1_Transmit_Number>
		USART1_Transmit_String(" Z: ");
 3bc:	84 e2       	ldi	r24, 0x24	; 36
 3be:	9b e4       	ldi	r25, 0x4B	; 75
 3c0:	0e 94 65 02 	call	0x4ca	; 0x4ca <USART1_Transmit_String>
		USART1_Transmit_Number(z);
 3c4:	8d 81       	ldd	r24, Y+5	; 0x05
 3c6:	9e 81       	ldd	r25, Y+6	; 0x06
 3c8:	0e 94 36 02 	call	0x46c	; 0x46c <USART1_Transmit_Number>
		USART1_Transmit_String(" A: ");
 3cc:	89 e2       	ldi	r24, 0x29	; 41
 3ce:	9b e4       	ldi	r25, 0x4B	; 75
 3d0:	0e 94 65 02 	call	0x4ca	; 0x4ca <USART1_Transmit_String>
		USART1_Transmit_Number(a);
 3d4:	8f 81       	ldd	r24, Y+7	; 0x07
 3d6:	98 85       	ldd	r25, Y+8	; 0x08
 3d8:	0e 94 36 02 	call	0x46c	; 0x46c <USART1_Transmit_Number>
		USART1_Transmit_String("\n\r");
 3dc:	88 e1       	ldi	r24, 0x18	; 24
 3de:	9b e4       	ldi	r25, 0x4B	; 75
 3e0:	0e 94 65 02 	call	0x4ca	; 0x4ca <USART1_Transmit_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e4:	2f ef       	ldi	r18, 0xFF	; 255
 3e6:	80 e7       	ldi	r24, 0x70	; 112
 3e8:	92 e0       	ldi	r25, 0x02	; 2
 3ea:	21 50       	subi	r18, 0x01	; 1
 3ec:	80 40       	sbci	r24, 0x00	; 0
 3ee:	90 40       	sbci	r25, 0x00	; 0
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0xa8>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0xb2>
 3f4:	00 00       	nop
 3f6:	c4 cf       	rjmp	.-120    	; 0x380 <main+0x3e>

000003f8 <USART1_Init>:
#include "UART.h"

void USART1_Init(void) {
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
	int8_t sigrow_val = SIGROW.OSC16ERR3V;
 3fc:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
	int32_t baud_reg_val = BAUD_SETTING;
	baud_reg_val *= (1024 + sigrow_val);
 400:	0a 2e       	mov	r0, r26
 402:	00 0c       	add	r0, r0
 404:	bb 0b       	sbc	r27, r27
 406:	bc 5f       	subi	r27, 0xFC	; 252
 408:	27 e5       	ldi	r18, 0x57	; 87
 40a:	34 e0       	ldi	r19, 0x04	; 4
 40c:	0e 94 9f 02 	call	0x53e	; 0x53e <__usmulhisi3>
	baud_reg_val /= 1024;
 410:	8b 01       	movw	r16, r22
 412:	9c 01       	movw	r18, r24
 414:	99 23       	and	r25, r25
 416:	24 f4       	brge	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 418:	01 50       	subi	r16, 0x01	; 1
 41a:	1c 4f       	sbci	r17, 0xFC	; 252
 41c:	2f 4f       	sbci	r18, 0xFF	; 255
 41e:	3f 4f       	sbci	r19, 0xFF	; 255
 420:	d9 01       	movw	r26, r18
 422:	c8 01       	movw	r24, r16
 424:	07 2e       	mov	r0, r23
 426:	7a e0       	ldi	r23, 0x0A	; 10
 428:	b5 95       	asr	r27
 42a:	a7 95       	ror	r26
 42c:	97 95       	ror	r25
 42e:	87 95       	ror	r24
 430:	7a 95       	dec	r23
 432:	d1 f7       	brne	.-12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 434:	70 2d       	mov	r23, r0
	
	USART1.BAUD = (uint16_t)baud_reg_val;
 436:	e0 e2       	ldi	r30, 0x20	; 32
 438:	f8 e0       	ldi	r31, 0x08	; 8
 43a:	80 87       	std	Z+8, r24	; 0x08
 43c:	91 87       	std	Z+9, r25	; 0x09
	PORTC.DIRSET = PIN0_bm;
 43e:	a0 e4       	ldi	r26, 0x40	; 64
 440:	b4 e0       	ldi	r27, 0x04	; 4
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	11 96       	adiw	r26, 0x01	; 1
 446:	8c 93       	st	X, r24
 448:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.DIRCLR = PIN1_bm;
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	12 96       	adiw	r26, 0x02	; 2
 44e:	8c 93       	st	X, r24
	
	USART1.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	87 83       	std	Z+7, r24	; 0x07
}
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <USART1_Transmit>:

void USART1_Transmit(uint8_t data) {
	while (!(USART1.STATUS & USART_DREIF_bm));
 45e:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 462:	95 ff       	sbrs	r25, 5
 464:	fc cf       	rjmp	.-8      	; 0x45e <USART1_Transmit>
	USART1.TXDATAL = data;
 466:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7fc822>
 46a:	08 95       	ret

0000046c <USART1_Transmit_Number>:
}

void USART1_Transmit_Number(uint16_t num) {
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	2a 97       	sbiw	r28, 0x0a	; 10
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	de bf       	out	0x3e, r29	; 62
	char buffer[10];
	sprintf(buffer, "%d", num);
 47c:	9f 93       	push	r25
 47e:	8f 93       	push	r24
 480:	8e e2       	ldi	r24, 0x2E	; 46
 482:	9b e4       	ldi	r25, 0x4B	; 75
 484:	9f 93       	push	r25
 486:	8f 93       	push	r24
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	9f 93       	push	r25
 48e:	8f 93       	push	r24
 490:	0e 94 a6 02 	call	0x54c	; 0x54c <sprintf>

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	10 e0       	ldi	r17, 0x00	; 0
 4a2:	03 c0       	rjmp	.+6      	; 0x4aa <USART1_Transmit_Number+0x3e>
		USART1_Transmit((uint8_t)buffer[i]);
 4a4:	0e 94 2f 02 	call	0x45e	; 0x45e <USART1_Transmit>

void USART1_Transmit_Number(uint16_t num) {
	char buffer[10];
	sprintf(buffer, "%d", num);

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 4a8:	1f 5f       	subi	r17, 0xFF	; 255
 4aa:	e1 e0       	ldi	r30, 0x01	; 1
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	ec 0f       	add	r30, r28
 4b0:	fd 1f       	adc	r31, r29
 4b2:	e1 0f       	add	r30, r17
 4b4:	f1 1d       	adc	r31, r1
 4b6:	80 81       	ld	r24, Z
 4b8:	81 11       	cpse	r24, r1
 4ba:	f4 cf       	rjmp	.-24     	; 0x4a4 <USART1_Transmit_Number+0x38>
		USART1_Transmit((uint8_t)buffer[i]);
	}
}
 4bc:	2a 96       	adiw	r28, 0x0a	; 10
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	08 95       	ret

000004ca <USART1_Transmit_String>:

void USART1_Transmit_String(char* string) {
 4ca:	ef 92       	push	r14
 4cc:	ff 92       	push	r15
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	7c 01       	movw	r14, r24
	uint16_t string_len = strlen(string);
 4d8:	fc 01       	movw	r30, r24
 4da:	01 90       	ld	r0, Z+
 4dc:	00 20       	and	r0, r0
 4de:	e9 f7       	brne	.-6      	; 0x4da <USART1_Transmit_String+0x10>
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	8f 01       	movw	r16, r30
 4e4:	08 1b       	sub	r16, r24
 4e6:	19 0b       	sbc	r17, r25
	for (uint16_t i = 0; i < string_len; i++) {
 4e8:	c0 e0       	ldi	r28, 0x00	; 0
 4ea:	d0 e0       	ldi	r29, 0x00	; 0
 4ec:	07 c0       	rjmp	.+14     	; 0x4fc <USART1_Transmit_String+0x32>
		USART1_Transmit((uint8_t)string[i]);
 4ee:	f7 01       	movw	r30, r14
 4f0:	ec 0f       	add	r30, r28
 4f2:	fd 1f       	adc	r31, r29
 4f4:	80 81       	ld	r24, Z
 4f6:	0e 94 2f 02 	call	0x45e	; 0x45e <USART1_Transmit>
	}
}

void USART1_Transmit_String(char* string) {
	uint16_t string_len = strlen(string);
	for (uint16_t i = 0; i < string_len; i++) {
 4fa:	21 96       	adiw	r28, 0x01	; 1
 4fc:	c0 17       	cp	r28, r16
 4fe:	d1 07       	cpc	r29, r17
 500:	b0 f3       	brcs	.-20     	; 0x4ee <USART1_Transmit_String+0x24>
		USART1_Transmit((uint8_t)string[i]);
	}
}
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	08 95       	ret

00000510 <__mulhisi3>:
 510:	0e 94 90 02 	call	0x520	; 0x520 <__umulhisi3>
 514:	33 23       	and	r19, r19
 516:	12 f4       	brpl	.+4      	; 0x51c <__mulhisi3+0xc>
 518:	8a 1b       	sub	r24, r26
 51a:	9b 0b       	sbc	r25, r27
 51c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__usmulhisi3_tail>

00000520 <__umulhisi3>:
 520:	a2 9f       	mul	r26, r18
 522:	b0 01       	movw	r22, r0
 524:	b3 9f       	mul	r27, r19
 526:	c0 01       	movw	r24, r0
 528:	a3 9f       	mul	r26, r19
 52a:	70 0d       	add	r23, r0
 52c:	81 1d       	adc	r24, r1
 52e:	11 24       	eor	r1, r1
 530:	91 1d       	adc	r25, r1
 532:	b2 9f       	mul	r27, r18
 534:	70 0d       	add	r23, r0
 536:	81 1d       	adc	r24, r1
 538:	11 24       	eor	r1, r1
 53a:	91 1d       	adc	r25, r1
 53c:	08 95       	ret

0000053e <__usmulhisi3>:
 53e:	0e 94 90 02 	call	0x520	; 0x520 <__umulhisi3>

00000542 <__usmulhisi3_tail>:
 542:	b7 ff       	sbrs	r27, 7
 544:	08 95       	ret
 546:	82 1b       	sub	r24, r18
 548:	93 0b       	sbc	r25, r19
 54a:	08 95       	ret

0000054c <sprintf>:
 54c:	ae e0       	ldi	r26, 0x0E	; 14
 54e:	b0 e0       	ldi	r27, 0x00	; 0
 550:	ec ea       	ldi	r30, 0xAC	; 172
 552:	f2 e0       	ldi	r31, 0x02	; 2
 554:	0c 94 67 05 	jmp	0xace	; 0xace <__prologue_saves__+0x1c>
 558:	0d 89       	ldd	r16, Y+21	; 0x15
 55a:	1e 89       	ldd	r17, Y+22	; 0x16
 55c:	86 e0       	ldi	r24, 0x06	; 6
 55e:	8c 83       	std	Y+4, r24	; 0x04
 560:	09 83       	std	Y+1, r16	; 0x01
 562:	1a 83       	std	Y+2, r17	; 0x02
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	9f e7       	ldi	r25, 0x7F	; 127
 568:	8d 83       	std	Y+5, r24	; 0x05
 56a:	9e 83       	std	Y+6, r25	; 0x06
 56c:	ae 01       	movw	r20, r28
 56e:	47 5e       	subi	r20, 0xE7	; 231
 570:	5f 4f       	sbci	r21, 0xFF	; 255
 572:	6f 89       	ldd	r22, Y+23	; 0x17
 574:	78 8d       	ldd	r23, Y+24	; 0x18
 576:	ce 01       	movw	r24, r28
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	0e 94 c8 02 	call	0x590	; 0x590 <vfprintf>
 57e:	ef 81       	ldd	r30, Y+7	; 0x07
 580:	f8 85       	ldd	r31, Y+8	; 0x08
 582:	e0 0f       	add	r30, r16
 584:	f1 1f       	adc	r31, r17
 586:	10 82       	st	Z, r1
 588:	2e 96       	adiw	r28, 0x0e	; 14
 58a:	e4 e0       	ldi	r30, 0x04	; 4
 58c:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__epilogue_restores__+0x1c>

00000590 <vfprintf>:
 590:	ab e0       	ldi	r26, 0x0B	; 11
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	ee ec       	ldi	r30, 0xCE	; 206
 596:	f2 e0       	ldi	r31, 0x02	; 2
 598:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__prologue_saves__>
 59c:	6c 01       	movw	r12, r24
 59e:	7b 01       	movw	r14, r22
 5a0:	8a 01       	movw	r16, r20
 5a2:	fc 01       	movw	r30, r24
 5a4:	16 82       	std	Z+6, r1	; 0x06
 5a6:	17 82       	std	Z+7, r1	; 0x07
 5a8:	83 81       	ldd	r24, Z+3	; 0x03
 5aa:	81 ff       	sbrs	r24, 1
 5ac:	cc c1       	rjmp	.+920    	; 0x946 <__DATA_REGION_LENGTH__+0x146>
 5ae:	ce 01       	movw	r24, r28
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	3c 01       	movw	r6, r24
 5b4:	f6 01       	movw	r30, r12
 5b6:	93 81       	ldd	r25, Z+3	; 0x03
 5b8:	f7 01       	movw	r30, r14
 5ba:	93 fd       	sbrc	r25, 3
 5bc:	85 91       	lpm	r24, Z+
 5be:	93 ff       	sbrs	r25, 3
 5c0:	81 91       	ld	r24, Z+
 5c2:	7f 01       	movw	r14, r30
 5c4:	88 23       	and	r24, r24
 5c6:	09 f4       	brne	.+2      	; 0x5ca <vfprintf+0x3a>
 5c8:	ba c1       	rjmp	.+884    	; 0x93e <__DATA_REGION_LENGTH__+0x13e>
 5ca:	85 32       	cpi	r24, 0x25	; 37
 5cc:	39 f4       	brne	.+14     	; 0x5dc <vfprintf+0x4c>
 5ce:	93 fd       	sbrc	r25, 3
 5d0:	85 91       	lpm	r24, Z+
 5d2:	93 ff       	sbrs	r25, 3
 5d4:	81 91       	ld	r24, Z+
 5d6:	7f 01       	movw	r14, r30
 5d8:	85 32       	cpi	r24, 0x25	; 37
 5da:	29 f4       	brne	.+10     	; 0x5e6 <vfprintf+0x56>
 5dc:	b6 01       	movw	r22, r12
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 bf 04 	call	0x97e	; 0x97e <fputc>
 5e4:	e7 cf       	rjmp	.-50     	; 0x5b4 <vfprintf+0x24>
 5e6:	91 2c       	mov	r9, r1
 5e8:	21 2c       	mov	r2, r1
 5ea:	31 2c       	mov	r3, r1
 5ec:	ff e1       	ldi	r31, 0x1F	; 31
 5ee:	f3 15       	cp	r31, r3
 5f0:	d8 f0       	brcs	.+54     	; 0x628 <vfprintf+0x98>
 5f2:	8b 32       	cpi	r24, 0x2B	; 43
 5f4:	79 f0       	breq	.+30     	; 0x614 <vfprintf+0x84>
 5f6:	38 f4       	brcc	.+14     	; 0x606 <vfprintf+0x76>
 5f8:	80 32       	cpi	r24, 0x20	; 32
 5fa:	79 f0       	breq	.+30     	; 0x61a <vfprintf+0x8a>
 5fc:	83 32       	cpi	r24, 0x23	; 35
 5fe:	a1 f4       	brne	.+40     	; 0x628 <vfprintf+0x98>
 600:	23 2d       	mov	r18, r3
 602:	20 61       	ori	r18, 0x10	; 16
 604:	1d c0       	rjmp	.+58     	; 0x640 <vfprintf+0xb0>
 606:	8d 32       	cpi	r24, 0x2D	; 45
 608:	61 f0       	breq	.+24     	; 0x622 <vfprintf+0x92>
 60a:	80 33       	cpi	r24, 0x30	; 48
 60c:	69 f4       	brne	.+26     	; 0x628 <vfprintf+0x98>
 60e:	23 2d       	mov	r18, r3
 610:	21 60       	ori	r18, 0x01	; 1
 612:	16 c0       	rjmp	.+44     	; 0x640 <vfprintf+0xb0>
 614:	83 2d       	mov	r24, r3
 616:	82 60       	ori	r24, 0x02	; 2
 618:	38 2e       	mov	r3, r24
 61a:	e3 2d       	mov	r30, r3
 61c:	e4 60       	ori	r30, 0x04	; 4
 61e:	3e 2e       	mov	r3, r30
 620:	2a c0       	rjmp	.+84     	; 0x676 <vfprintf+0xe6>
 622:	f3 2d       	mov	r31, r3
 624:	f8 60       	ori	r31, 0x08	; 8
 626:	1d c0       	rjmp	.+58     	; 0x662 <vfprintf+0xd2>
 628:	37 fc       	sbrc	r3, 7
 62a:	2d c0       	rjmp	.+90     	; 0x686 <vfprintf+0xf6>
 62c:	20 ed       	ldi	r18, 0xD0	; 208
 62e:	28 0f       	add	r18, r24
 630:	2a 30       	cpi	r18, 0x0A	; 10
 632:	40 f0       	brcs	.+16     	; 0x644 <vfprintf+0xb4>
 634:	8e 32       	cpi	r24, 0x2E	; 46
 636:	b9 f4       	brne	.+46     	; 0x666 <vfprintf+0xd6>
 638:	36 fc       	sbrc	r3, 6
 63a:	81 c1       	rjmp	.+770    	; 0x93e <__DATA_REGION_LENGTH__+0x13e>
 63c:	23 2d       	mov	r18, r3
 63e:	20 64       	ori	r18, 0x40	; 64
 640:	32 2e       	mov	r3, r18
 642:	19 c0       	rjmp	.+50     	; 0x676 <vfprintf+0xe6>
 644:	36 fe       	sbrs	r3, 6
 646:	06 c0       	rjmp	.+12     	; 0x654 <vfprintf+0xc4>
 648:	8a e0       	ldi	r24, 0x0A	; 10
 64a:	98 9e       	mul	r9, r24
 64c:	20 0d       	add	r18, r0
 64e:	11 24       	eor	r1, r1
 650:	92 2e       	mov	r9, r18
 652:	11 c0       	rjmp	.+34     	; 0x676 <vfprintf+0xe6>
 654:	ea e0       	ldi	r30, 0x0A	; 10
 656:	2e 9e       	mul	r2, r30
 658:	20 0d       	add	r18, r0
 65a:	11 24       	eor	r1, r1
 65c:	22 2e       	mov	r2, r18
 65e:	f3 2d       	mov	r31, r3
 660:	f0 62       	ori	r31, 0x20	; 32
 662:	3f 2e       	mov	r3, r31
 664:	08 c0       	rjmp	.+16     	; 0x676 <vfprintf+0xe6>
 666:	8c 36       	cpi	r24, 0x6C	; 108
 668:	21 f4       	brne	.+8      	; 0x672 <vfprintf+0xe2>
 66a:	83 2d       	mov	r24, r3
 66c:	80 68       	ori	r24, 0x80	; 128
 66e:	38 2e       	mov	r3, r24
 670:	02 c0       	rjmp	.+4      	; 0x676 <vfprintf+0xe6>
 672:	88 36       	cpi	r24, 0x68	; 104
 674:	41 f4       	brne	.+16     	; 0x686 <vfprintf+0xf6>
 676:	f7 01       	movw	r30, r14
 678:	93 fd       	sbrc	r25, 3
 67a:	85 91       	lpm	r24, Z+
 67c:	93 ff       	sbrs	r25, 3
 67e:	81 91       	ld	r24, Z+
 680:	7f 01       	movw	r14, r30
 682:	81 11       	cpse	r24, r1
 684:	b3 cf       	rjmp	.-154    	; 0x5ec <vfprintf+0x5c>
 686:	98 2f       	mov	r25, r24
 688:	9f 7d       	andi	r25, 0xDF	; 223
 68a:	95 54       	subi	r25, 0x45	; 69
 68c:	93 30       	cpi	r25, 0x03	; 3
 68e:	28 f4       	brcc	.+10     	; 0x69a <vfprintf+0x10a>
 690:	0c 5f       	subi	r16, 0xFC	; 252
 692:	1f 4f       	sbci	r17, 0xFF	; 255
 694:	9f e3       	ldi	r25, 0x3F	; 63
 696:	99 83       	std	Y+1, r25	; 0x01
 698:	0d c0       	rjmp	.+26     	; 0x6b4 <vfprintf+0x124>
 69a:	83 36       	cpi	r24, 0x63	; 99
 69c:	31 f0       	breq	.+12     	; 0x6aa <vfprintf+0x11a>
 69e:	83 37       	cpi	r24, 0x73	; 115
 6a0:	71 f0       	breq	.+28     	; 0x6be <vfprintf+0x12e>
 6a2:	83 35       	cpi	r24, 0x53	; 83
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <vfprintf+0x118>
 6a6:	59 c0       	rjmp	.+178    	; 0x75a <vfprintf+0x1ca>
 6a8:	21 c0       	rjmp	.+66     	; 0x6ec <vfprintf+0x15c>
 6aa:	f8 01       	movw	r30, r16
 6ac:	80 81       	ld	r24, Z
 6ae:	89 83       	std	Y+1, r24	; 0x01
 6b0:	0e 5f       	subi	r16, 0xFE	; 254
 6b2:	1f 4f       	sbci	r17, 0xFF	; 255
 6b4:	88 24       	eor	r8, r8
 6b6:	83 94       	inc	r8
 6b8:	91 2c       	mov	r9, r1
 6ba:	53 01       	movw	r10, r6
 6bc:	13 c0       	rjmp	.+38     	; 0x6e4 <vfprintf+0x154>
 6be:	28 01       	movw	r4, r16
 6c0:	f2 e0       	ldi	r31, 0x02	; 2
 6c2:	4f 0e       	add	r4, r31
 6c4:	51 1c       	adc	r5, r1
 6c6:	f8 01       	movw	r30, r16
 6c8:	a0 80       	ld	r10, Z
 6ca:	b1 80       	ldd	r11, Z+1	; 0x01
 6cc:	36 fe       	sbrs	r3, 6
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <vfprintf+0x146>
 6d0:	69 2d       	mov	r22, r9
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <vfprintf+0x14a>
 6d6:	6f ef       	ldi	r22, 0xFF	; 255
 6d8:	7f ef       	ldi	r23, 0xFF	; 255
 6da:	c5 01       	movw	r24, r10
 6dc:	0e 94 b4 04 	call	0x968	; 0x968 <strnlen>
 6e0:	4c 01       	movw	r8, r24
 6e2:	82 01       	movw	r16, r4
 6e4:	f3 2d       	mov	r31, r3
 6e6:	ff 77       	andi	r31, 0x7F	; 127
 6e8:	3f 2e       	mov	r3, r31
 6ea:	16 c0       	rjmp	.+44     	; 0x718 <vfprintf+0x188>
 6ec:	28 01       	movw	r4, r16
 6ee:	22 e0       	ldi	r18, 0x02	; 2
 6f0:	42 0e       	add	r4, r18
 6f2:	51 1c       	adc	r5, r1
 6f4:	f8 01       	movw	r30, r16
 6f6:	a0 80       	ld	r10, Z
 6f8:	b1 80       	ldd	r11, Z+1	; 0x01
 6fa:	36 fe       	sbrs	r3, 6
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <vfprintf+0x174>
 6fe:	69 2d       	mov	r22, r9
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <vfprintf+0x178>
 704:	6f ef       	ldi	r22, 0xFF	; 255
 706:	7f ef       	ldi	r23, 0xFF	; 255
 708:	c5 01       	movw	r24, r10
 70a:	0e 94 a9 04 	call	0x952	; 0x952 <strnlen_P>
 70e:	4c 01       	movw	r8, r24
 710:	f3 2d       	mov	r31, r3
 712:	f0 68       	ori	r31, 0x80	; 128
 714:	3f 2e       	mov	r3, r31
 716:	82 01       	movw	r16, r4
 718:	33 fc       	sbrc	r3, 3
 71a:	1b c0       	rjmp	.+54     	; 0x752 <vfprintf+0x1c2>
 71c:	82 2d       	mov	r24, r2
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	88 16       	cp	r8, r24
 722:	99 06       	cpc	r9, r25
 724:	b0 f4       	brcc	.+44     	; 0x752 <vfprintf+0x1c2>
 726:	b6 01       	movw	r22, r12
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 bf 04 	call	0x97e	; 0x97e <fputc>
 730:	2a 94       	dec	r2
 732:	f4 cf       	rjmp	.-24     	; 0x71c <vfprintf+0x18c>
 734:	f5 01       	movw	r30, r10
 736:	37 fc       	sbrc	r3, 7
 738:	85 91       	lpm	r24, Z+
 73a:	37 fe       	sbrs	r3, 7
 73c:	81 91       	ld	r24, Z+
 73e:	5f 01       	movw	r10, r30
 740:	b6 01       	movw	r22, r12
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 bf 04 	call	0x97e	; 0x97e <fputc>
 748:	21 10       	cpse	r2, r1
 74a:	2a 94       	dec	r2
 74c:	21 e0       	ldi	r18, 0x01	; 1
 74e:	82 1a       	sub	r8, r18
 750:	91 08       	sbc	r9, r1
 752:	81 14       	cp	r8, r1
 754:	91 04       	cpc	r9, r1
 756:	71 f7       	brne	.-36     	; 0x734 <vfprintf+0x1a4>
 758:	e8 c0       	rjmp	.+464    	; 0x92a <__DATA_REGION_LENGTH__+0x12a>
 75a:	84 36       	cpi	r24, 0x64	; 100
 75c:	11 f0       	breq	.+4      	; 0x762 <vfprintf+0x1d2>
 75e:	89 36       	cpi	r24, 0x69	; 105
 760:	41 f5       	brne	.+80     	; 0x7b2 <vfprintf+0x222>
 762:	f8 01       	movw	r30, r16
 764:	37 fe       	sbrs	r3, 7
 766:	07 c0       	rjmp	.+14     	; 0x776 <vfprintf+0x1e6>
 768:	60 81       	ld	r22, Z
 76a:	71 81       	ldd	r23, Z+1	; 0x01
 76c:	82 81       	ldd	r24, Z+2	; 0x02
 76e:	93 81       	ldd	r25, Z+3	; 0x03
 770:	0c 5f       	subi	r16, 0xFC	; 252
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	08 c0       	rjmp	.+16     	; 0x786 <vfprintf+0x1f6>
 776:	60 81       	ld	r22, Z
 778:	71 81       	ldd	r23, Z+1	; 0x01
 77a:	07 2e       	mov	r0, r23
 77c:	00 0c       	add	r0, r0
 77e:	88 0b       	sbc	r24, r24
 780:	99 0b       	sbc	r25, r25
 782:	0e 5f       	subi	r16, 0xFE	; 254
 784:	1f 4f       	sbci	r17, 0xFF	; 255
 786:	f3 2d       	mov	r31, r3
 788:	ff 76       	andi	r31, 0x6F	; 111
 78a:	3f 2e       	mov	r3, r31
 78c:	97 ff       	sbrs	r25, 7
 78e:	09 c0       	rjmp	.+18     	; 0x7a2 <vfprintf+0x212>
 790:	90 95       	com	r25
 792:	80 95       	com	r24
 794:	70 95       	com	r23
 796:	61 95       	neg	r22
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	8f 4f       	sbci	r24, 0xFF	; 255
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	f0 68       	ori	r31, 0x80	; 128
 7a0:	3f 2e       	mov	r3, r31
 7a2:	2a e0       	ldi	r18, 0x0A	; 10
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	a3 01       	movw	r20, r6
 7a8:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__ultoa_invert>
 7ac:	88 2e       	mov	r8, r24
 7ae:	86 18       	sub	r8, r6
 7b0:	45 c0       	rjmp	.+138    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 7b2:	85 37       	cpi	r24, 0x75	; 117
 7b4:	31 f4       	brne	.+12     	; 0x7c2 <vfprintf+0x232>
 7b6:	23 2d       	mov	r18, r3
 7b8:	2f 7e       	andi	r18, 0xEF	; 239
 7ba:	b2 2e       	mov	r11, r18
 7bc:	2a e0       	ldi	r18, 0x0A	; 10
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	25 c0       	rjmp	.+74     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7c2:	93 2d       	mov	r25, r3
 7c4:	99 7f       	andi	r25, 0xF9	; 249
 7c6:	b9 2e       	mov	r11, r25
 7c8:	8f 36       	cpi	r24, 0x6F	; 111
 7ca:	c1 f0       	breq	.+48     	; 0x7fc <vfprintf+0x26c>
 7cc:	18 f4       	brcc	.+6      	; 0x7d4 <vfprintf+0x244>
 7ce:	88 35       	cpi	r24, 0x58	; 88
 7d0:	79 f0       	breq	.+30     	; 0x7f0 <vfprintf+0x260>
 7d2:	b5 c0       	rjmp	.+362    	; 0x93e <__DATA_REGION_LENGTH__+0x13e>
 7d4:	80 37       	cpi	r24, 0x70	; 112
 7d6:	19 f0       	breq	.+6      	; 0x7de <vfprintf+0x24e>
 7d8:	88 37       	cpi	r24, 0x78	; 120
 7da:	21 f0       	breq	.+8      	; 0x7e4 <vfprintf+0x254>
 7dc:	b0 c0       	rjmp	.+352    	; 0x93e <__DATA_REGION_LENGTH__+0x13e>
 7de:	e9 2f       	mov	r30, r25
 7e0:	e0 61       	ori	r30, 0x10	; 16
 7e2:	be 2e       	mov	r11, r30
 7e4:	b4 fe       	sbrs	r11, 4
 7e6:	0d c0       	rjmp	.+26     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e8:	fb 2d       	mov	r31, r11
 7ea:	f4 60       	ori	r31, 0x04	; 4
 7ec:	bf 2e       	mov	r11, r31
 7ee:	09 c0       	rjmp	.+18     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f0:	34 fe       	sbrs	r3, 4
 7f2:	0a c0       	rjmp	.+20     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f4:	29 2f       	mov	r18, r25
 7f6:	26 60       	ori	r18, 0x06	; 6
 7f8:	b2 2e       	mov	r11, r18
 7fa:	06 c0       	rjmp	.+12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fc:	28 e0       	ldi	r18, 0x08	; 8
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	05 c0       	rjmp	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 802:	20 e1       	ldi	r18, 0x10	; 16
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	20 e1       	ldi	r18, 0x10	; 16
 80a:	32 e0       	ldi	r19, 0x02	; 2
 80c:	f8 01       	movw	r30, r16
 80e:	b7 fe       	sbrs	r11, 7
 810:	07 c0       	rjmp	.+14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 812:	60 81       	ld	r22, Z
 814:	71 81       	ldd	r23, Z+1	; 0x01
 816:	82 81       	ldd	r24, Z+2	; 0x02
 818:	93 81       	ldd	r25, Z+3	; 0x03
 81a:	0c 5f       	subi	r16, 0xFC	; 252
 81c:	1f 4f       	sbci	r17, 0xFF	; 255
 81e:	06 c0       	rjmp	.+12     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 820:	60 81       	ld	r22, Z
 822:	71 81       	ldd	r23, Z+1	; 0x01
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 5f       	subi	r16, 0xFE	; 254
 82a:	1f 4f       	sbci	r17, 0xFF	; 255
 82c:	a3 01       	movw	r20, r6
 82e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__ultoa_invert>
 832:	88 2e       	mov	r8, r24
 834:	86 18       	sub	r8, r6
 836:	fb 2d       	mov	r31, r11
 838:	ff 77       	andi	r31, 0x7F	; 127
 83a:	3f 2e       	mov	r3, r31
 83c:	36 fe       	sbrs	r3, 6
 83e:	0d c0       	rjmp	.+26     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 840:	23 2d       	mov	r18, r3
 842:	2e 7f       	andi	r18, 0xFE	; 254
 844:	a2 2e       	mov	r10, r18
 846:	89 14       	cp	r8, r9
 848:	58 f4       	brcc	.+22     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 84a:	34 fe       	sbrs	r3, 4
 84c:	0b c0       	rjmp	.+22     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 84e:	32 fc       	sbrc	r3, 2
 850:	09 c0       	rjmp	.+18     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 852:	83 2d       	mov	r24, r3
 854:	8e 7e       	andi	r24, 0xEE	; 238
 856:	a8 2e       	mov	r10, r24
 858:	05 c0       	rjmp	.+10     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 85a:	b8 2c       	mov	r11, r8
 85c:	a3 2c       	mov	r10, r3
 85e:	03 c0       	rjmp	.+6      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 860:	b8 2c       	mov	r11, r8
 862:	01 c0       	rjmp	.+2      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 864:	b9 2c       	mov	r11, r9
 866:	a4 fe       	sbrs	r10, 4
 868:	0f c0       	rjmp	.+30     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 86a:	fe 01       	movw	r30, r28
 86c:	e8 0d       	add	r30, r8
 86e:	f1 1d       	adc	r31, r1
 870:	80 81       	ld	r24, Z
 872:	80 33       	cpi	r24, 0x30	; 48
 874:	21 f4       	brne	.+8      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 876:	9a 2d       	mov	r25, r10
 878:	99 7e       	andi	r25, 0xE9	; 233
 87a:	a9 2e       	mov	r10, r25
 87c:	09 c0       	rjmp	.+18     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 87e:	a2 fe       	sbrs	r10, 2
 880:	06 c0       	rjmp	.+12     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 882:	b3 94       	inc	r11
 884:	b3 94       	inc	r11
 886:	04 c0       	rjmp	.+8      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 888:	8a 2d       	mov	r24, r10
 88a:	86 78       	andi	r24, 0x86	; 134
 88c:	09 f0       	breq	.+2      	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 88e:	b3 94       	inc	r11
 890:	a3 fc       	sbrc	r10, 3
 892:	11 c0       	rjmp	.+34     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 894:	a0 fe       	sbrs	r10, 0
 896:	06 c0       	rjmp	.+12     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 898:	b2 14       	cp	r11, r2
 89a:	88 f4       	brcc	.+34     	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 89c:	28 0c       	add	r2, r8
 89e:	92 2c       	mov	r9, r2
 8a0:	9b 18       	sub	r9, r11
 8a2:	0e c0       	rjmp	.+28     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8a4:	b2 14       	cp	r11, r2
 8a6:	60 f4       	brcc	.+24     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8a8:	b6 01       	movw	r22, r12
 8aa:	80 e2       	ldi	r24, 0x20	; 32
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 bf 04 	call	0x97e	; 0x97e <fputc>
 8b2:	b3 94       	inc	r11
 8b4:	f7 cf       	rjmp	.-18     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 8b6:	b2 14       	cp	r11, r2
 8b8:	18 f4       	brcc	.+6      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8ba:	2b 18       	sub	r2, r11
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8be:	98 2c       	mov	r9, r8
 8c0:	21 2c       	mov	r2, r1
 8c2:	a4 fe       	sbrs	r10, 4
 8c4:	10 c0       	rjmp	.+32     	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8c6:	b6 01       	movw	r22, r12
 8c8:	80 e3       	ldi	r24, 0x30	; 48
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 bf 04 	call	0x97e	; 0x97e <fputc>
 8d0:	a2 fe       	sbrs	r10, 2
 8d2:	17 c0       	rjmp	.+46     	; 0x902 <__DATA_REGION_LENGTH__+0x102>
 8d4:	a1 fc       	sbrc	r10, 1
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8d8:	88 e7       	ldi	r24, 0x78	; 120
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
 8de:	88 e5       	ldi	r24, 0x58	; 88
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	b6 01       	movw	r22, r12
 8e4:	0c c0       	rjmp	.+24     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8e6:	8a 2d       	mov	r24, r10
 8e8:	86 78       	andi	r24, 0x86	; 134
 8ea:	59 f0       	breq	.+22     	; 0x902 <__DATA_REGION_LENGTH__+0x102>
 8ec:	a1 fe       	sbrs	r10, 1
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8f0:	8b e2       	ldi	r24, 0x2B	; 43
 8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8f4:	80 e2       	ldi	r24, 0x20	; 32
 8f6:	a7 fc       	sbrc	r10, 7
 8f8:	8d e2       	ldi	r24, 0x2D	; 45
 8fa:	b6 01       	movw	r22, r12
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 bf 04 	call	0x97e	; 0x97e <fputc>
 902:	89 14       	cp	r8, r9
 904:	38 f4       	brcc	.+14     	; 0x914 <__DATA_REGION_LENGTH__+0x114>
 906:	b6 01       	movw	r22, r12
 908:	80 e3       	ldi	r24, 0x30	; 48
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 bf 04 	call	0x97e	; 0x97e <fputc>
 910:	9a 94       	dec	r9
 912:	f7 cf       	rjmp	.-18     	; 0x902 <__DATA_REGION_LENGTH__+0x102>
 914:	8a 94       	dec	r8
 916:	f3 01       	movw	r30, r6
 918:	e8 0d       	add	r30, r8
 91a:	f1 1d       	adc	r31, r1
 91c:	80 81       	ld	r24, Z
 91e:	b6 01       	movw	r22, r12
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 94 bf 04 	call	0x97e	; 0x97e <fputc>
 926:	81 10       	cpse	r8, r1
 928:	f5 cf       	rjmp	.-22     	; 0x914 <__DATA_REGION_LENGTH__+0x114>
 92a:	22 20       	and	r2, r2
 92c:	09 f4       	brne	.+2      	; 0x930 <__DATA_REGION_LENGTH__+0x130>
 92e:	42 ce       	rjmp	.-892    	; 0x5b4 <vfprintf+0x24>
 930:	b6 01       	movw	r22, r12
 932:	80 e2       	ldi	r24, 0x20	; 32
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 bf 04 	call	0x97e	; 0x97e <fputc>
 93a:	2a 94       	dec	r2
 93c:	f6 cf       	rjmp	.-20     	; 0x92a <__DATA_REGION_LENGTH__+0x12a>
 93e:	f6 01       	movw	r30, r12
 940:	86 81       	ldd	r24, Z+6	; 0x06
 942:	97 81       	ldd	r25, Z+7	; 0x07
 944:	02 c0       	rjmp	.+4      	; 0x94a <__DATA_REGION_LENGTH__+0x14a>
 946:	8f ef       	ldi	r24, 0xFF	; 255
 948:	9f ef       	ldi	r25, 0xFF	; 255
 94a:	2b 96       	adiw	r28, 0x0b	; 11
 94c:	e2 e1       	ldi	r30, 0x12	; 18
 94e:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__epilogue_restores__>

00000952 <strnlen_P>:
 952:	fc 01       	movw	r30, r24
 954:	05 90       	lpm	r0, Z+
 956:	61 50       	subi	r22, 0x01	; 1
 958:	70 40       	sbci	r23, 0x00	; 0
 95a:	01 10       	cpse	r0, r1
 95c:	d8 f7       	brcc	.-10     	; 0x954 <strnlen_P+0x2>
 95e:	80 95       	com	r24
 960:	90 95       	com	r25
 962:	8e 0f       	add	r24, r30
 964:	9f 1f       	adc	r25, r31
 966:	08 95       	ret

00000968 <strnlen>:
 968:	fc 01       	movw	r30, r24
 96a:	61 50       	subi	r22, 0x01	; 1
 96c:	70 40       	sbci	r23, 0x00	; 0
 96e:	01 90       	ld	r0, Z+
 970:	01 10       	cpse	r0, r1
 972:	d8 f7       	brcc	.-10     	; 0x96a <strnlen+0x2>
 974:	80 95       	com	r24
 976:	90 95       	com	r25
 978:	8e 0f       	add	r24, r30
 97a:	9f 1f       	adc	r25, r31
 97c:	08 95       	ret

0000097e <fputc>:
 97e:	0f 93       	push	r16
 980:	1f 93       	push	r17
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	fb 01       	movw	r30, r22
 988:	23 81       	ldd	r18, Z+3	; 0x03
 98a:	21 fd       	sbrc	r18, 1
 98c:	03 c0       	rjmp	.+6      	; 0x994 <fputc+0x16>
 98e:	8f ef       	ldi	r24, 0xFF	; 255
 990:	9f ef       	ldi	r25, 0xFF	; 255
 992:	2c c0       	rjmp	.+88     	; 0x9ec <fputc+0x6e>
 994:	22 ff       	sbrs	r18, 2
 996:	16 c0       	rjmp	.+44     	; 0x9c4 <fputc+0x46>
 998:	46 81       	ldd	r20, Z+6	; 0x06
 99a:	57 81       	ldd	r21, Z+7	; 0x07
 99c:	24 81       	ldd	r18, Z+4	; 0x04
 99e:	35 81       	ldd	r19, Z+5	; 0x05
 9a0:	42 17       	cp	r20, r18
 9a2:	53 07       	cpc	r21, r19
 9a4:	44 f4       	brge	.+16     	; 0x9b6 <fputc+0x38>
 9a6:	a0 81       	ld	r26, Z
 9a8:	b1 81       	ldd	r27, Z+1	; 0x01
 9aa:	9d 01       	movw	r18, r26
 9ac:	2f 5f       	subi	r18, 0xFF	; 255
 9ae:	3f 4f       	sbci	r19, 0xFF	; 255
 9b0:	20 83       	st	Z, r18
 9b2:	31 83       	std	Z+1, r19	; 0x01
 9b4:	8c 93       	st	X, r24
 9b6:	26 81       	ldd	r18, Z+6	; 0x06
 9b8:	37 81       	ldd	r19, Z+7	; 0x07
 9ba:	2f 5f       	subi	r18, 0xFF	; 255
 9bc:	3f 4f       	sbci	r19, 0xFF	; 255
 9be:	26 83       	std	Z+6, r18	; 0x06
 9c0:	37 83       	std	Z+7, r19	; 0x07
 9c2:	14 c0       	rjmp	.+40     	; 0x9ec <fputc+0x6e>
 9c4:	8b 01       	movw	r16, r22
 9c6:	ec 01       	movw	r28, r24
 9c8:	fb 01       	movw	r30, r22
 9ca:	00 84       	ldd	r0, Z+8	; 0x08
 9cc:	f1 85       	ldd	r31, Z+9	; 0x09
 9ce:	e0 2d       	mov	r30, r0
 9d0:	09 95       	icall
 9d2:	89 2b       	or	r24, r25
 9d4:	e1 f6       	brne	.-72     	; 0x98e <fputc+0x10>
 9d6:	d8 01       	movw	r26, r16
 9d8:	16 96       	adiw	r26, 0x06	; 6
 9da:	8d 91       	ld	r24, X+
 9dc:	9c 91       	ld	r25, X
 9de:	17 97       	sbiw	r26, 0x07	; 7
 9e0:	01 96       	adiw	r24, 0x01	; 1
 9e2:	16 96       	adiw	r26, 0x06	; 6
 9e4:	8d 93       	st	X+, r24
 9e6:	9c 93       	st	X, r25
 9e8:	17 97       	sbiw	r26, 0x07	; 7
 9ea:	ce 01       	movw	r24, r28
 9ec:	df 91       	pop	r29
 9ee:	cf 91       	pop	r28
 9f0:	1f 91       	pop	r17
 9f2:	0f 91       	pop	r16
 9f4:	08 95       	ret

000009f6 <__ultoa_invert>:
 9f6:	fa 01       	movw	r30, r20
 9f8:	aa 27       	eor	r26, r26
 9fa:	28 30       	cpi	r18, 0x08	; 8
 9fc:	51 f1       	breq	.+84     	; 0xa52 <__ultoa_invert+0x5c>
 9fe:	20 31       	cpi	r18, 0x10	; 16
 a00:	81 f1       	breq	.+96     	; 0xa62 <__ultoa_invert+0x6c>
 a02:	e8 94       	clt
 a04:	6f 93       	push	r22
 a06:	6e 7f       	andi	r22, 0xFE	; 254
 a08:	6e 5f       	subi	r22, 0xFE	; 254
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	af 4f       	sbci	r26, 0xFF	; 255
 a12:	b1 e0       	ldi	r27, 0x01	; 1
 a14:	3e d0       	rcall	.+124    	; 0xa92 <__ultoa_invert+0x9c>
 a16:	b4 e0       	ldi	r27, 0x04	; 4
 a18:	3c d0       	rcall	.+120    	; 0xa92 <__ultoa_invert+0x9c>
 a1a:	67 0f       	add	r22, r23
 a1c:	78 1f       	adc	r23, r24
 a1e:	89 1f       	adc	r24, r25
 a20:	9a 1f       	adc	r25, r26
 a22:	a1 1d       	adc	r26, r1
 a24:	68 0f       	add	r22, r24
 a26:	79 1f       	adc	r23, r25
 a28:	8a 1f       	adc	r24, r26
 a2a:	91 1d       	adc	r25, r1
 a2c:	a1 1d       	adc	r26, r1
 a2e:	6a 0f       	add	r22, r26
 a30:	71 1d       	adc	r23, r1
 a32:	81 1d       	adc	r24, r1
 a34:	91 1d       	adc	r25, r1
 a36:	a1 1d       	adc	r26, r1
 a38:	20 d0       	rcall	.+64     	; 0xa7a <__ultoa_invert+0x84>
 a3a:	09 f4       	brne	.+2      	; 0xa3e <__ultoa_invert+0x48>
 a3c:	68 94       	set
 a3e:	3f 91       	pop	r19
 a40:	2a e0       	ldi	r18, 0x0A	; 10
 a42:	26 9f       	mul	r18, r22
 a44:	11 24       	eor	r1, r1
 a46:	30 19       	sub	r19, r0
 a48:	30 5d       	subi	r19, 0xD0	; 208
 a4a:	31 93       	st	Z+, r19
 a4c:	de f6       	brtc	.-74     	; 0xa04 <__ultoa_invert+0xe>
 a4e:	cf 01       	movw	r24, r30
 a50:	08 95       	ret
 a52:	46 2f       	mov	r20, r22
 a54:	47 70       	andi	r20, 0x07	; 7
 a56:	40 5d       	subi	r20, 0xD0	; 208
 a58:	41 93       	st	Z+, r20
 a5a:	b3 e0       	ldi	r27, 0x03	; 3
 a5c:	0f d0       	rcall	.+30     	; 0xa7c <__ultoa_invert+0x86>
 a5e:	c9 f7       	brne	.-14     	; 0xa52 <__ultoa_invert+0x5c>
 a60:	f6 cf       	rjmp	.-20     	; 0xa4e <__ultoa_invert+0x58>
 a62:	46 2f       	mov	r20, r22
 a64:	4f 70       	andi	r20, 0x0F	; 15
 a66:	40 5d       	subi	r20, 0xD0	; 208
 a68:	4a 33       	cpi	r20, 0x3A	; 58
 a6a:	18 f0       	brcs	.+6      	; 0xa72 <__ultoa_invert+0x7c>
 a6c:	49 5d       	subi	r20, 0xD9	; 217
 a6e:	31 fd       	sbrc	r19, 1
 a70:	40 52       	subi	r20, 0x20	; 32
 a72:	41 93       	st	Z+, r20
 a74:	02 d0       	rcall	.+4      	; 0xa7a <__ultoa_invert+0x84>
 a76:	a9 f7       	brne	.-22     	; 0xa62 <__ultoa_invert+0x6c>
 a78:	ea cf       	rjmp	.-44     	; 0xa4e <__ultoa_invert+0x58>
 a7a:	b4 e0       	ldi	r27, 0x04	; 4
 a7c:	a6 95       	lsr	r26
 a7e:	97 95       	ror	r25
 a80:	87 95       	ror	r24
 a82:	77 95       	ror	r23
 a84:	67 95       	ror	r22
 a86:	ba 95       	dec	r27
 a88:	c9 f7       	brne	.-14     	; 0xa7c <__ultoa_invert+0x86>
 a8a:	00 97       	sbiw	r24, 0x00	; 0
 a8c:	61 05       	cpc	r22, r1
 a8e:	71 05       	cpc	r23, r1
 a90:	08 95       	ret
 a92:	9b 01       	movw	r18, r22
 a94:	ac 01       	movw	r20, r24
 a96:	0a 2e       	mov	r0, r26
 a98:	06 94       	lsr	r0
 a9a:	57 95       	ror	r21
 a9c:	47 95       	ror	r20
 a9e:	37 95       	ror	r19
 aa0:	27 95       	ror	r18
 aa2:	ba 95       	dec	r27
 aa4:	c9 f7       	brne	.-14     	; 0xa98 <__ultoa_invert+0xa2>
 aa6:	62 0f       	add	r22, r18
 aa8:	73 1f       	adc	r23, r19
 aaa:	84 1f       	adc	r24, r20
 aac:	95 1f       	adc	r25, r21
 aae:	a0 1d       	adc	r26, r0
 ab0:	08 95       	ret

00000ab2 <__prologue_saves__>:
 ab2:	2f 92       	push	r2
 ab4:	3f 92       	push	r3
 ab6:	4f 92       	push	r4
 ab8:	5f 92       	push	r5
 aba:	6f 92       	push	r6
 abc:	7f 92       	push	r7
 abe:	8f 92       	push	r8
 ac0:	9f 92       	push	r9
 ac2:	af 92       	push	r10
 ac4:	bf 92       	push	r11
 ac6:	cf 92       	push	r12
 ac8:	df 92       	push	r13
 aca:	ef 92       	push	r14
 acc:	ff 92       	push	r15
 ace:	0f 93       	push	r16
 ad0:	1f 93       	push	r17
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	cd b7       	in	r28, 0x3d	; 61
 ad8:	de b7       	in	r29, 0x3e	; 62
 ada:	ca 1b       	sub	r28, r26
 adc:	db 0b       	sbc	r29, r27
 ade:	cd bf       	out	0x3d, r28	; 61
 ae0:	de bf       	out	0x3e, r29	; 62
 ae2:	09 94       	ijmp

00000ae4 <__epilogue_restores__>:
 ae4:	2a 88       	ldd	r2, Y+18	; 0x12
 ae6:	39 88       	ldd	r3, Y+17	; 0x11
 ae8:	48 88       	ldd	r4, Y+16	; 0x10
 aea:	5f 84       	ldd	r5, Y+15	; 0x0f
 aec:	6e 84       	ldd	r6, Y+14	; 0x0e
 aee:	7d 84       	ldd	r7, Y+13	; 0x0d
 af0:	8c 84       	ldd	r8, Y+12	; 0x0c
 af2:	9b 84       	ldd	r9, Y+11	; 0x0b
 af4:	aa 84       	ldd	r10, Y+10	; 0x0a
 af6:	b9 84       	ldd	r11, Y+9	; 0x09
 af8:	c8 84       	ldd	r12, Y+8	; 0x08
 afa:	df 80       	ldd	r13, Y+7	; 0x07
 afc:	ee 80       	ldd	r14, Y+6	; 0x06
 afe:	fd 80       	ldd	r15, Y+5	; 0x05
 b00:	0c 81       	ldd	r16, Y+4	; 0x04
 b02:	1b 81       	ldd	r17, Y+3	; 0x03
 b04:	aa 81       	ldd	r26, Y+2	; 0x02
 b06:	b9 81       	ldd	r27, Y+1	; 0x01
 b08:	ce 0f       	add	r28, r30
 b0a:	d1 1d       	adc	r29, r1
 b0c:	cd bf       	out	0x3d, r28	; 61
 b0e:	de bf       	out	0x3e, r29	; 62
 b10:	ed 01       	movw	r28, r26
 b12:	08 95       	ret

00000b14 <_exit>:
 b14:	f8 94       	cli

00000b16 <__stop_program>:
 b16:	ff cf       	rjmp	.-2      	; 0xb16 <__stop_program>
