
SerialButtonLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000d15  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000087  00004bfa  00000bfa  00000c8e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000015  00803800  00803800  00000d15  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00000d15  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000d8  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032fa  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023bc  00000000  00000000  00004186  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000091d  00000000  00000000  00006542  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e4  00000000  00000000  00006e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001793  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000035d  00000000  00000000  000087d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c8  00000000  00000000  00008b34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e3       	ldi	r18, 0x38	; 56
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e3       	ldi	r27, 0x38	; 56
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a5 31       	cpi	r26, 0x15	; 21
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <main>
  b0:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <fsmIGN1>:
	Get_input ? Perceive_Input() : Perceive_Buttons();
}

void fsmIGN1(void) {
	static uint8_t IGN1_state = 0;
	switch (IGN1_state)
  b8:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <IGN1_state.3459>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	81 f0       	breq	.+32     	; 0xe0 <fsmIGN1+0x28>
  c0:	18 f0       	brcs	.+6      	; 0xc8 <fsmIGN1+0x10>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	c1 f0       	breq	.+48     	; 0xf6 <fsmIGN1+0x3e>
  c6:	08 95       	ret
	{
		case 0:
			Send_IGN1_message = false;
  c8:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <Send_IGN1_message>
			Turn_red_on = false;
  cc:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <Turn_red_on>
			if (IGN1_pressed) {
  d0:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <IGN1_pressed>
  d4:	88 23       	and	r24, r24
  d6:	a1 f0       	breq	.+40     	; 0x100 <__EEPROM_REGION_LENGTH__>
				IGN1_state = 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <IGN1_state.3459>
  de:	08 95       	ret
			}
			break;
		case 1:
			Turn_red_on = true;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <Turn_red_on>
			if (!IGN1_pressed) {
  e6:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <IGN1_pressed>
  ea:	81 11       	cpse	r24, r1
  ec:	09 c0       	rjmp	.+18     	; 0x100 <__EEPROM_REGION_LENGTH__>
				IGN1_state = 2;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <IGN1_state.3459>
  f4:	08 95       	ret
			}
			break;
		case 2:
			Send_IGN1_message = true;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <Send_IGN1_message>
			IGN1_state = 0;
  fc:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <IGN1_state.3459>
 100:	08 95       	ret

00000102 <fsmIGN2>:
	}
}

void fsmIGN2(void) {
	static uint8_t IGN2_state = 0;
	switch (IGN2_state)
 102:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <IGN2_state.3467>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	81 f0       	breq	.+32     	; 0x12a <fsmIGN2+0x28>
 10a:	18 f0       	brcs	.+6      	; 0x112 <fsmIGN2+0x10>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	c1 f0       	breq	.+48     	; 0x140 <fsmIGN2+0x3e>
 110:	08 95       	ret
	{
		case 0:
			Send_IGN2_message = false;
 112:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <Send_IGN2_message>
			Turn_green_on = false;
 116:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <Turn_green_on>
			if (IGN2_pressed) {
 11a:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <IGN2_pressed>
 11e:	88 23       	and	r24, r24
 120:	a1 f0       	breq	.+40     	; 0x14a <fsmIGN2+0x48>
				IGN2_state = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <IGN2_state.3467>
 128:	08 95       	ret
			}
			break;
		case 1:
			Turn_green_on = true;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <Turn_green_on>
			if (!IGN2_pressed) {
 130:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <IGN2_pressed>
 134:	81 11       	cpse	r24, r1
 136:	09 c0       	rjmp	.+18     	; 0x14a <fsmIGN2+0x48>
				IGN2_state = 2;
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <IGN2_state.3467>
 13e:	08 95       	ret
			}
			break;
		case 2:
			Send_IGN2_message = true;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <Send_IGN2_message>
			IGN2_state = 0;
 146:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <IGN2_state.3467>
 14a:	08 95       	ret

0000014c <fsmHorn>:
	}
}

void fsmHorn(void) {
	static uint8_t Horn_state = 0;
	switch (Horn_state)
 14c:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <Horn_state.3475>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	71 f0       	breq	.+28     	; 0x170 <fsmHorn+0x24>
 154:	18 f0       	brcs	.+6      	; 0x15c <fsmHorn+0x10>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	c1 f0       	breq	.+48     	; 0x18a <fsmHorn+0x3e>
 15a:	08 95       	ret
	{
		case 0:
			Send_Horn_message = false;
 15c:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <Send_Horn_message>
			if (Horn_pressed) {
 160:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <Horn_pressed>
 164:	88 23       	and	r24, r24
 166:	b1 f0       	breq	.+44     	; 0x194 <fsmHorn+0x48>
				Horn_state = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <Horn_state.3475>
 16e:	08 95       	ret
			}
			break;
		case 1:
			Turn_red_on = true;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <Turn_red_on>
			Turn_green_on = true;
 176:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <Turn_green_on>
			if (!Horn_pressed) {
 17a:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <Horn_pressed>
 17e:	81 11       	cpse	r24, r1
 180:	09 c0       	rjmp	.+18     	; 0x194 <fsmHorn+0x48>
				Horn_state = 2;
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <Horn_state.3475>
 188:	08 95       	ret
			}
			break;
		case 2:
			Send_Horn_message = true;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <Send_Horn_message>
			Horn_state = 0;
 190:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <Horn_state.3475>
 194:	08 95       	ret

00000196 <fsmR>:
	}
}

void fsmR(void) {
	static uint8_t R_state = 0;
	switch (R_state)
 196:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <R_state.3483>
 19a:	88 23       	and	r24, r24
 19c:	19 f0       	breq	.+6      	; 0x1a4 <fsmR+0xe>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <fsmR+0x22>
 1a2:	08 95       	ret
	{
		case 0:
			Toggle_red = false;
 1a4:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <Toggle_red>
			if (Input_R) {
 1a8:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <Input_R>
 1ac:	88 23       	and	r24, r24
 1ae:	49 f0       	breq	.+18     	; 0x1c2 <fsmR+0x2c>
				R_state = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <R_state.3483>
 1b6:	08 95       	ret
			}
			break;
		case 1:
			Toggle_red = true;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <Toggle_red>
			R_state = 0;
 1be:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <R_state.3483>
 1c2:	08 95       	ret

000001c4 <fsmG>:
	}
}

void fsmG(void) {
	static uint8_t G_state = 0;
	switch (G_state)
 1c4:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <G_state.3490>
 1c8:	88 23       	and	r24, r24
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <fsmG+0xe>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	59 f0       	breq	.+22     	; 0x1e6 <fsmG+0x22>
 1d0:	08 95       	ret
	{
		case 0:
			Toggle_green = false;
 1d2:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <Toggle_green>
			if (Input_G) {
 1d6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <Input_G>
 1da:	88 23       	and	r24, r24
 1dc:	49 f0       	breq	.+18     	; 0x1f0 <fsmG+0x2c>
				G_state = 1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <G_state.3490>
 1e4:	08 95       	ret
			}
			break;
		case 1:
			Toggle_green = true;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <Toggle_green>
			G_state = 0;
 1ec:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <G_state.3490>
 1f0:	08 95       	ret

000001f2 <fsmY>:
	}
}

void fsmY(void) {
	static uint8_t Y_state = 0;
	switch (Y_state)
 1f2:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1f6:	88 23       	and	r24, r24
 1f8:	19 f0       	breq	.+6      	; 0x200 <fsmY+0xe>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	59 f0       	breq	.+22     	; 0x214 <fsmY+0x22>
 1fe:	08 95       	ret
	{
		case 0:
			Toggle_yellow = false;
 200:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <Toggle_yellow>
			if (Input_Y) {
 204:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <Input_Y>
 208:	88 23       	and	r24, r24
 20a:	49 f0       	breq	.+18     	; 0x21e <fsmY+0x2c>
				Y_state = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 212:	08 95       	ret
			}
			break;
		case 1:
			Toggle_yellow = true;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <Toggle_yellow>
			Y_state = 0;
 21a:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__DATA_REGION_ORIGIN__>
 21e:	08 95       	ret

00000220 <Planning>:
			break;
	}
}

void Planning(void) {
	if (Get_input) {
 220:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <Get_input>
 224:	88 23       	and	r24, r24
 226:	39 f0       	breq	.+14     	; 0x236 <Planning+0x16>
		fsmR();
 228:	0e 94 cb 00 	call	0x196	; 0x196 <fsmR>
		fsmG();
 22c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <fsmG>
		fsmY();	
 230:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <fsmY>
 234:	08 95       	ret
	} else {
		fsmIGN1();
 236:	0e 94 5c 00 	call	0xb8	; 0xb8 <fsmIGN1>
		fsmIGN2();
 23a:	0e 94 81 00 	call	0x102	; 0x102 <fsmIGN2>
		fsmHorn();
 23e:	0e 94 a6 00 	call	0x14c	; 0x14c <fsmHorn>
 242:	08 95       	ret

00000244 <USART1_Init>:

		Send_Horn_message ? USART1_Transmit_String("HORN button was pressed\r\n") : (void)0;
	}
}

void USART1_Init(void) {
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
	int8_t sigrow_val = SIGROW.OSC16ERR3V;
 248:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
	int32_t baud_reg_val = BAUD_SETTING;
	baud_reg_val *= (1024 + sigrow_val);
 24c:	0a 2e       	mov	r0, r26
 24e:	00 0c       	add	r0, r0
 250:	bb 0b       	sbc	r27, r27
 252:	bc 5f       	subi	r27, 0xFC	; 252
 254:	27 e5       	ldi	r18, 0x57	; 87
 256:	34 e0       	ldi	r19, 0x04	; 4
 258:	0e 94 01 03 	call	0x602	; 0x602 <__usmulhisi3>
	baud_reg_val /= 1024;
 25c:	8b 01       	movw	r16, r22
 25e:	9c 01       	movw	r18, r24
 260:	99 23       	and	r25, r25
 262:	24 f4       	brge	.+8      	; 0x26c <USART1_Init+0x28>
 264:	01 50       	subi	r16, 0x01	; 1
 266:	1c 4f       	sbci	r17, 0xFC	; 252
 268:	2f 4f       	sbci	r18, 0xFF	; 255
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	d9 01       	movw	r26, r18
 26e:	c8 01       	movw	r24, r16
 270:	07 2e       	mov	r0, r23
 272:	7a e0       	ldi	r23, 0x0A	; 10
 274:	b5 95       	asr	r27
 276:	a7 95       	ror	r26
 278:	97 95       	ror	r25
 27a:	87 95       	ror	r24
 27c:	7a 95       	dec	r23
 27e:	d1 f7       	brne	.-12     	; 0x274 <USART1_Init+0x30>
 280:	70 2d       	mov	r23, r0
	
	USART1.BAUD = (uint16_t)baud_reg_val;
 282:	e0 e2       	ldi	r30, 0x20	; 32
 284:	f8 e0       	ldi	r31, 0x08	; 8
 286:	80 87       	std	Z+8, r24	; 0x08
 288:	91 87       	std	Z+9, r25	; 0x09
	PORTC.DIRSET = PIN0_bm;
 28a:	a0 e4       	ldi	r26, 0x40	; 64
 28c:	b4 e0       	ldi	r27, 0x04	; 4
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	11 96       	adiw	r26, 0x01	; 1
 292:	8c 93       	st	X, r24
 294:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.DIRCLR = PIN1_bm;
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	12 96       	adiw	r26, 0x02	; 2
 29a:	8c 93       	st	X, r24
	
	USART1.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 29c:	80 ec       	ldi	r24, 0xC0	; 192
 29e:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	87 83       	std	Z+7, r24	; 0x07
}
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <USART1_Transmit>:

void USART1_Transmit(uint8_t data) {
	while (!(USART1.STATUS & USART_DREIF_bm));
 2aa:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 2ae:	95 ff       	sbrs	r25, 5
 2b0:	fc cf       	rjmp	.-8      	; 0x2aa <USART1_Transmit>
	USART1.TXDATAL = data;
 2b2:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7fc822>
 2b6:	08 95       	ret

000002b8 <USART1_Transmit_Number>:
}

void USART1_Transmit_Number(uint8_t num) {
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	2a 97       	sbiw	r28, 0x0a	; 10
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	de bf       	out	0x3e, r29	; 62
	char buffer[10];
	sprintf(buffer, "%d", num);
 2c8:	1f 92       	push	r1
 2ca:	8f 93       	push	r24
 2cc:	8a ef       	ldi	r24, 0xFA	; 250
 2ce:	9b e4       	ldi	r25, 0x4B	; 75
 2d0:	9f 93       	push	r25
 2d2:	8f 93       	push	r24
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	9f 93       	push	r25
 2da:	8f 93       	push	r24
 2dc:	0e 94 17 03 	call	0x62e	; 0x62e <sprintf>

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <USART1_Transmit_Number+0x3e>
		USART1_Transmit((uint8_t)buffer[i]);
 2f0:	0e 94 55 01 	call	0x2aa	; 0x2aa <USART1_Transmit>

void USART1_Transmit_Number(uint8_t num) {
	char buffer[10];
	sprintf(buffer, "%d", num);

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
 2f4:	1f 5f       	subi	r17, 0xFF	; 255
 2f6:	e1 e0       	ldi	r30, 0x01	; 1
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ec 0f       	add	r30, r28
 2fc:	fd 1f       	adc	r31, r29
 2fe:	e1 0f       	add	r30, r17
 300:	f1 1d       	adc	r31, r1
 302:	80 81       	ld	r24, Z
 304:	81 11       	cpse	r24, r1
 306:	f4 cf       	rjmp	.-24     	; 0x2f0 <USART1_Transmit_Number+0x38>
		USART1_Transmit((uint8_t)buffer[i]);
	}
}
 308:	2a 96       	adiw	r28, 0x0a	; 10
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	08 95       	ret

00000316 <USART1_Transmit_String>:

void USART1_Transmit_String(char* string) {
 316:	ef 92       	push	r14
 318:	ff 92       	push	r15
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	7c 01       	movw	r14, r24
	uint16_t string_len = strlen(string);
 324:	fc 01       	movw	r30, r24
 326:	01 90       	ld	r0, Z+
 328:	00 20       	and	r0, r0
 32a:	e9 f7       	brne	.-6      	; 0x326 <USART1_Transmit_String+0x10>
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	8f 01       	movw	r16, r30
 330:	08 1b       	sub	r16, r24
 332:	19 0b       	sbc	r17, r25
	for (uint16_t i = 0; i < string_len; i++) {
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d0 e0       	ldi	r29, 0x00	; 0
 338:	07 c0       	rjmp	.+14     	; 0x348 <USART1_Transmit_String+0x32>
		USART1_Transmit((uint8_t)string[i]);
 33a:	f7 01       	movw	r30, r14
 33c:	ec 0f       	add	r30, r28
 33e:	fd 1f       	adc	r31, r29
 340:	80 81       	ld	r24, Z
 342:	0e 94 55 01 	call	0x2aa	; 0x2aa <USART1_Transmit>
	}
}

void USART1_Transmit_String(char* string) {
	uint16_t string_len = strlen(string);
	for (uint16_t i = 0; i < string_len; i++) {
 346:	21 96       	adiw	r28, 0x01	; 1
 348:	c0 17       	cp	r28, r16
 34a:	d1 07       	cpc	r29, r17
 34c:	b0 f3       	brcs	.-20     	; 0x33a <USART1_Transmit_String+0x24>
		USART1_Transmit((uint8_t)string[i]);
	}
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	08 95       	ret

0000035c <USART1_Receive>:

uint8_t USART1_Receive(void) {
	while (!(USART1.STATUS & USART_RXCIF_bm));
 35c:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 360:	88 23       	and	r24, r24
 362:	e4 f7       	brge	.-8      	; 0x35c <USART1_Receive>
	return USART1.RXDATAL;
 364:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7fc820>
}
 368:	08 95       	ret

0000036a <Perceive_Input>:
}

void Perceive_Input(void) {
	uint8_t input = 0;
	do {
		wdt_reset();
 36a:	a8 95       	wdr
		input = USART1_Receive();
 36c:	0e 94 ae 01 	call	0x35c	; 0x35c <USART1_Receive>
	} while (!((input == 'G') || (input == 'R') || (input == 'Y')));
 370:	87 34       	cpi	r24, 0x47	; 71
 372:	21 f0       	breq	.+8      	; 0x37c <Perceive_Input+0x12>
 374:	82 35       	cpi	r24, 0x52	; 82
 376:	11 f0       	breq	.+4      	; 0x37c <Perceive_Input+0x12>
 378:	89 35       	cpi	r24, 0x59	; 89
 37a:	b9 f7       	brne	.-18     	; 0x36a <Perceive_Input>
	
	switch (input)
 37c:	82 35       	cpi	r24, 0x52	; 82
 37e:	29 f0       	breq	.+10     	; 0x38a <Perceive_Input+0x20>
 380:	89 35       	cpi	r24, 0x59	; 89
 382:	59 f0       	breq	.+22     	; 0x39a <Perceive_Input+0x30>
 384:	87 34       	cpi	r24, 0x47	; 71
 386:	69 f4       	brne	.+26     	; 0x3a2 <Perceive_Input+0x38>
 388:	04 c0       	rjmp	.+8      	; 0x392 <Perceive_Input+0x28>
	{
	case 'R':
		Input_R = true;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <Input_R>
		break;
 390:	08 95       	ret
	case 'G':
		Input_G = true;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <Input_G>
		break;
 398:	08 95       	ret
	case 'Y':
		Input_Y = true;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <Input_Y>
		break;
 3a0:	08 95       	ret
	default:
		Input_R = false;
 3a2:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <Input_R>
		Input_G = false;
 3a6:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <Input_G>
		Input_Y = false;
 3aa:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <Input_Y>
 3ae:	08 95       	ret

000003b0 <LED_Init>:
	while (!(USART1.STATUS & USART_RXCIF_bm));
	return USART1.RXDATAL;
}

void LED_Init(void) {
	PORTF.DIRSET = (0x01 << RED_LED);
 3b0:	e0 ea       	ldi	r30, 0xA0	; 160
 3b2:	f4 e0       	ldi	r31, 0x04	; 4
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = (0x01 << GREEN_LED);
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTCLR = (0x01 << RED_LED);
 3bc:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = (0x01 << GREEN_LED);
 3be:	86 83       	std	Z+6, r24	; 0x06
 3c0:	08 95       	ret

000003c2 <LED_On>:
}

void LED_On(uint8_t led) {
	PORTF.OUTSET = (0x01 << led);
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <LED_On+0xa>
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	8a 95       	dec	r24
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <LED_On+0x6>
 3d0:	20 93 a5 04 	sts	0x04A5, r18	; 0x8004a5 <__RODATA_PM_OFFSET__+0x7fc4a5>
 3d4:	08 95       	ret

000003d6 <LED_Off>:
}

void LED_Off(uint8_t led) {
	PORTF.OUTCLR = (0x01 << led);
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <LED_Off+0xa>
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	8a 95       	dec	r24
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <LED_Off+0x6>
 3e4:	20 93 a6 04 	sts	0x04A6, r18	; 0x8004a6 <__RODATA_PM_OFFSET__+0x7fc4a6>
 3e8:	08 95       	ret

000003ea <LED_Tgl>:
}
void LED_Tgl(uint8_t led) {
	PORTF.OUT ^= (0x01 << led);
 3ea:	e0 ea       	ldi	r30, 0xA0	; 160
 3ec:	f4 e0       	ldi	r31, 0x04	; 4
 3ee:	94 81       	ldd	r25, Z+4	; 0x04
 3f0:	21 e0       	ldi	r18, 0x01	; 1
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <LED_Tgl+0x10>
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	8a 95       	dec	r24
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <LED_Tgl+0xc>
 3fe:	29 27       	eor	r18, r25
 400:	24 83       	std	Z+4, r18	; 0x04
 402:	08 95       	ret

00000404 <Action>:
		fsmHorn();
	}
}

void Action(void) {
	USART1_Transmit_Number((uint8_t)Get_input);
 404:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <Get_input>
 408:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <USART1_Transmit_Number>
	if (Get_input) {
 40c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <Get_input>
 410:	88 23       	and	r24, r24
 412:	c9 f1       	breq	.+114    	; 0x486 <Action+0x82>
		if (Toggle_red) {
 414:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <Toggle_red>
 418:	88 23       	and	r24, r24
 41a:	61 f0       	breq	.+24     	; 0x434 <Action+0x30>
			LED_Tgl(RED_LED);
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LED_Tgl>
			while (USART1_Receive() != 'R') {
 422:	01 c0       	rjmp	.+2      	; 0x426 <Action+0x22>
				wdt_reset();
 424:	a8 95       	wdr
void Action(void) {
	USART1_Transmit_Number((uint8_t)Get_input);
	if (Get_input) {
		if (Toggle_red) {
			LED_Tgl(RED_LED);
			while (USART1_Receive() != 'R') {
 426:	0e 94 ae 01 	call	0x35c	; 0x35c <USART1_Receive>
 42a:	82 35       	cpi	r24, 0x52	; 82
 42c:	d9 f7       	brne	.-10     	; 0x424 <Action+0x20>
				wdt_reset();
			}
			LED_Tgl(RED_LED);
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LED_Tgl>
		}
		
		if (Toggle_green) {
 434:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <Toggle_green>
 438:	88 23       	and	r24, r24
 43a:	61 f0       	breq	.+24     	; 0x454 <Action+0x50>
			LED_Tgl(GREEN_LED);
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LED_Tgl>
			while (USART1_Receive() != 'G') {
 442:	01 c0       	rjmp	.+2      	; 0x446 <Action+0x42>
				wdt_reset();
 444:	a8 95       	wdr
			LED_Tgl(RED_LED);
		}
		
		if (Toggle_green) {
			LED_Tgl(GREEN_LED);
			while (USART1_Receive() != 'G') {
 446:	0e 94 ae 01 	call	0x35c	; 0x35c <USART1_Receive>
 44a:	87 34       	cpi	r24, 0x47	; 71
 44c:	d9 f7       	brne	.-10     	; 0x444 <Action+0x40>
				wdt_reset();
			}
			LED_Tgl(GREEN_LED);
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LED_Tgl>
		}
		
		if (Toggle_yellow) {
 454:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <Toggle_yellow>
 458:	88 23       	and	r24, r24
 45a:	91 f0       	breq	.+36     	; 0x480 <Action+0x7c>
			LED_Tgl(GREEN_LED);
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LED_Tgl>
			LED_Tgl(RED_LED);
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LED_Tgl>
			while (USART1_Receive() != 'Y') {
 468:	01 c0       	rjmp	.+2      	; 0x46c <Action+0x68>
				wdt_reset();
 46a:	a8 95       	wdr
		}
		
		if (Toggle_yellow) {
			LED_Tgl(GREEN_LED);
			LED_Tgl(RED_LED);
			while (USART1_Receive() != 'Y') {
 46c:	0e 94 ae 01 	call	0x35c	; 0x35c <USART1_Receive>
 470:	89 35       	cpi	r24, 0x59	; 89
 472:	d9 f7       	brne	.-10     	; 0x46a <Action+0x66>
				wdt_reset();
			}
			LED_Tgl(GREEN_LED);
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LED_Tgl>
			LED_Tgl(RED_LED);
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LED_Tgl>
		}
		Get_input = false;
 480:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <Get_input>
 484:	08 95       	ret
	} else {
		Turn_red_on ? LED_On(RED_LED) : LED_Off(RED_LED);
 486:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <Turn_red_on>
 48a:	88 23       	and	r24, r24
 48c:	21 f0       	breq	.+8      	; 0x496 <Action+0x92>
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_On>
 494:	03 c0       	rjmp	.+6      	; 0x49c <Action+0x98>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LED_Off>
			
		Turn_green_on ? LED_On(GREEN_LED) : LED_Off(GREEN_LED);
 49c:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <Turn_green_on>
 4a0:	88 23       	and	r24, r24
 4a2:	21 f0       	breq	.+8      	; 0x4ac <Action+0xa8>
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <LED_On>
 4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <Action+0xae>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LED_Off>

		Send_IGN1_message ? USART1_Transmit_String("IGN_1 button was pressed\r\n") : (void)0;
 4b2:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <Send_IGN1_message>
 4b6:	88 23       	and	r24, r24
 4b8:	21 f0       	breq	.+8      	; 0x4c2 <Action+0xbe>
 4ba:	8d ef       	ldi	r24, 0xFD	; 253
 4bc:	9b e4       	ldi	r25, 0x4B	; 75
 4be:	0e 94 8b 01 	call	0x316	; 0x316 <USART1_Transmit_String>

		Send_IGN2_message ? USART1_Transmit_String("IGN_2 button was pressed\r\n") : (void)0;
 4c2:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <Send_IGN2_message>
 4c6:	88 23       	and	r24, r24
 4c8:	21 f0       	breq	.+8      	; 0x4d2 <Action+0xce>
 4ca:	88 e1       	ldi	r24, 0x18	; 24
 4cc:	9c e4       	ldi	r25, 0x4C	; 76
 4ce:	0e 94 8b 01 	call	0x316	; 0x316 <USART1_Transmit_String>

		Send_Horn_message ? USART1_Transmit_String("HORN button was pressed\r\n") : (void)0;
 4d2:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <Send_Horn_message>
 4d6:	88 23       	and	r24, r24
 4d8:	21 f0       	breq	.+8      	; 0x4e2 <Action+0xde>
 4da:	83 e3       	ldi	r24, 0x33	; 51
 4dc:	9c e4       	ldi	r25, 0x4C	; 76
 4de:	0e 94 8b 01 	call	0x316	; 0x316 <USART1_Transmit_String>
 4e2:	08 95       	ret

000004e4 <ADC_Init>:
void LED_Tgl(uint8_t led) {
	PORTF.OUT ^= (0x01 << led);
}

void ADC_Init(void) {
	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_8BIT_gc;
 4e4:	e0 e0       	ldi	r30, 0x00	; 0
 4e6:	f6 e0       	ldi	r31, 0x06	; 6
 4e8:	85 e0       	ldi	r24, 0x05	; 5
 4ea:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_REFSEL_VDDREF_gc;
 4ec:	80 e1       	ldi	r24, 0x10	; 16
 4ee:	81 83       	std	Z+1, r24	; 0x01
 4f0:	08 95       	ret

000004f2 <ADC_Switch>:
}

void ADC_Switch(uint8_t btn) {
	switch (btn)
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	41 f0       	breq	.+16     	; 0x506 <ADC_Switch+0x14>
 4f6:	18 f0       	brcs	.+6      	; 0x4fe <ADC_Switch+0xc>
 4f8:	82 30       	cpi	r24, 0x02	; 2
 4fa:	49 f0       	breq	.+18     	; 0x50e <ADC_Switch+0x1c>
 4fc:	08 95       	ret
	{
		case IGN_1:
			ADC0.MUXPOS = 0x01;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
 504:	08 95       	ret
		case IGN_2:
			ADC0.MUXPOS = 0x0E;
 506:	8e e0       	ldi	r24, 0x0E	; 14
 508:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
 50c:	08 95       	ret
		case HORN:
			ADC0.MUXPOS = 0x04;
 50e:	84 e0       	ldi	r24, 0x04	; 4
 510:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
 514:	08 95       	ret

00000516 <BTN_Pressed>:
			break;
	}
}

bool BTN_Pressed(uint8_t btn) {
	ADC_Switch(btn);
 516:	0e 94 79 02 	call	0x4f2	; 0x4f2 <ADC_Switch>
	ADC0.COMMAND = 0x01;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7fc608>
	while((!ADC0.INTFLAGS & 0x01)) {
 520:	01 c0       	rjmp	.+2      	; 0x524 <BTN_Pressed+0xe>
		wdt_reset(); //Wait for result
 522:	a8 95       	wdr
}

bool BTN_Pressed(uint8_t btn) {
	ADC_Switch(btn);
	ADC0.COMMAND = 0x01;
	while((!ADC0.INTFLAGS & 0x01)) {
 524:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7fc60b>
 528:	88 23       	and	r24, r24
 52a:	d9 f3       	breq	.-10     	; 0x522 <BTN_Pressed+0xc>
		wdt_reset(); //Wait for result
	}
	if (ADC0.RES > 0xF0) {
 52c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7fc610>
 530:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7fc611>
 534:	81 3f       	cpi	r24, 0xF1	; 241
 536:	91 05       	cpc	r25, r1
 538:	10 f0       	brcs	.+4      	; 0x53e <BTN_Pressed+0x28>
		return true;
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	08 95       	ret
	} else {
		return false;
 53e:	80 e0       	ldi	r24, 0x00	; 0
	}
 540:	08 95       	ret

00000542 <Perceive_Buttons>:
		Planning();
		Action();
    }
}

void Perceive_Buttons(void) {
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
	bool ign1_pressed = BTN_Pressed(IGN_1);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 8b 02 	call	0x516	; 0x516 <BTN_Pressed>
 54c:	c8 2f       	mov	r28, r24
	bool ign2_pressed = BTN_Pressed(IGN_2);
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	0e 94 8b 02 	call	0x516	; 0x516 <BTN_Pressed>
 554:	d8 2f       	mov	r29, r24
	bool horn_pressed = BTN_Pressed(HORN);
 556:	82 e0       	ldi	r24, 0x02	; 2
 558:	0e 94 8b 02 	call	0x516	; 0x516 <BTN_Pressed>
	if (ign1_pressed && !ign2_pressed && !horn_pressed) {
 55c:	cc 23       	and	r28, r28
 55e:	41 f0       	breq	.+16     	; 0x570 <Perceive_Buttons+0x2e>
 560:	d1 11       	cpse	r29, r1
 562:	06 c0       	rjmp	.+12     	; 0x570 <Perceive_Buttons+0x2e>
 564:	81 11       	cpse	r24, r1
 566:	04 c0       	rjmp	.+8      	; 0x570 <Perceive_Buttons+0x2e>
			IGN1_pressed = true;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <IGN1_pressed>
 56e:	2e c0       	rjmp	.+92     	; 0x5cc <Perceive_Buttons+0x8a>
		} else if (!ign1_pressed && ign2_pressed && !horn_pressed) {
 570:	c1 11       	cpse	r28, r1
 572:	08 c0       	rjmp	.+16     	; 0x584 <Perceive_Buttons+0x42>
 574:	dd 23       	and	r29, r29
 576:	31 f0       	breq	.+12     	; 0x584 <Perceive_Buttons+0x42>
 578:	81 11       	cpse	r24, r1
 57a:	04 c0       	rjmp	.+8      	; 0x584 <Perceive_Buttons+0x42>
			IGN2_pressed = true;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <IGN2_pressed>
 582:	24 c0       	rjmp	.+72     	; 0x5cc <Perceive_Buttons+0x8a>
		} else if (!ign1_pressed && !ign2_pressed && horn_pressed) {
 584:	c1 11       	cpse	r28, r1
 586:	08 c0       	rjmp	.+16     	; 0x598 <Perceive_Buttons+0x56>
 588:	d1 11       	cpse	r29, r1
 58a:	06 c0       	rjmp	.+12     	; 0x598 <Perceive_Buttons+0x56>
 58c:	88 23       	and	r24, r24
 58e:	21 f0       	breq	.+8      	; 0x598 <Perceive_Buttons+0x56>
			Horn_pressed = true;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <Horn_pressed>
 596:	1a c0       	rjmp	.+52     	; 0x5cc <Perceive_Buttons+0x8a>
		} else if (ign1_pressed && ign2_pressed && horn_pressed) {
 598:	cc 23       	and	r28, r28
 59a:	91 f0       	breq	.+36     	; 0x5c0 <Perceive_Buttons+0x7e>
 59c:	dd 23       	and	r29, r29
 59e:	81 f0       	breq	.+32     	; 0x5c0 <Perceive_Buttons+0x7e>
 5a0:	88 23       	and	r24, r24
 5a2:	71 f0       	breq	.+28     	; 0x5c0 <Perceive_Buttons+0x7e>
			Get_input = true;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <Get_input>
			IGN1_pressed = false;
 5aa:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <IGN1_pressed>
			IGN2_pressed = false;
 5ae:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <IGN2_pressed>
			Horn_pressed = false;
 5b2:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <Horn_pressed>
			USART1_Transmit_String("Give the letter of the light you want to turn on:\r\n");
 5b6:	8d e4       	ldi	r24, 0x4D	; 77
 5b8:	9c e4       	ldi	r25, 0x4C	; 76
 5ba:	0e 94 8b 01 	call	0x316	; 0x316 <USART1_Transmit_String>
 5be:	06 c0       	rjmp	.+12     	; 0x5cc <Perceive_Buttons+0x8a>
		} else {
			IGN1_pressed = false;
 5c0:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <IGN1_pressed>
			IGN2_pressed = false;
 5c4:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <IGN2_pressed>
			Horn_pressed = false;
 5c8:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <Horn_pressed>
	}
}
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <Perception>:
		Input_Y = false;
	}
}

void Perception(void) {
	Get_input ? Perceive_Input() : Perceive_Buttons();
 5d2:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <Get_input>
 5d6:	88 23       	and	r24, r24
 5d8:	19 f0       	breq	.+6      	; 0x5e0 <Perception+0xe>
 5da:	0e 94 b5 01 	call	0x36a	; 0x36a <Perceive_Input>
 5de:	08 95       	ret
 5e0:	0e 94 a1 02 	call	0x542	; 0x542 <Perceive_Buttons>
 5e4:	08 95       	ret

000005e6 <main>:
bool Toggle_green = false;
bool Toggle_yellow = false;

int main(void)
{
	USART1_Init();
 5e6:	0e 94 22 01 	call	0x244	; 0x244 <USART1_Init>
	LED_Init();
 5ea:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LED_Init>
	ADC_Init();
 5ee:	0e 94 72 02 	call	0x4e4	; 0x4e4 <ADC_Init>
	
    while (1)
    {
		wdt_reset();
 5f2:	a8 95       	wdr
		Perception();
 5f4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <Perception>
		Planning();
 5f8:	0e 94 10 01 	call	0x220	; 0x220 <Planning>
		Action();
 5fc:	0e 94 02 02 	call	0x404	; 0x404 <Action>
 600:	f8 cf       	rjmp	.-16     	; 0x5f2 <main+0xc>

00000602 <__usmulhisi3>:
 602:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>

00000606 <__usmulhisi3_tail>:
 606:	b7 ff       	sbrs	r27, 7
 608:	08 95       	ret
 60a:	82 1b       	sub	r24, r18
 60c:	93 0b       	sbc	r25, r19
 60e:	08 95       	ret

00000610 <__umulhisi3>:
 610:	a2 9f       	mul	r26, r18
 612:	b0 01       	movw	r22, r0
 614:	b3 9f       	mul	r27, r19
 616:	c0 01       	movw	r24, r0
 618:	a3 9f       	mul	r26, r19
 61a:	70 0d       	add	r23, r0
 61c:	81 1d       	adc	r24, r1
 61e:	11 24       	eor	r1, r1
 620:	91 1d       	adc	r25, r1
 622:	b2 9f       	mul	r27, r18
 624:	70 0d       	add	r23, r0
 626:	81 1d       	adc	r24, r1
 628:	11 24       	eor	r1, r1
 62a:	91 1d       	adc	r25, r1
 62c:	08 95       	ret

0000062e <sprintf>:
 62e:	ae e0       	ldi	r26, 0x0E	; 14
 630:	b0 e0       	ldi	r27, 0x00	; 0
 632:	ed e1       	ldi	r30, 0x1D	; 29
 634:	f3 e0       	ldi	r31, 0x03	; 3
 636:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <__prologue_saves__+0x1c>
 63a:	0d 89       	ldd	r16, Y+21	; 0x15
 63c:	1e 89       	ldd	r17, Y+22	; 0x16
 63e:	86 e0       	ldi	r24, 0x06	; 6
 640:	8c 83       	std	Y+4, r24	; 0x04
 642:	09 83       	std	Y+1, r16	; 0x01
 644:	1a 83       	std	Y+2, r17	; 0x02
 646:	8f ef       	ldi	r24, 0xFF	; 255
 648:	9f e7       	ldi	r25, 0x7F	; 127
 64a:	8d 83       	std	Y+5, r24	; 0x05
 64c:	9e 83       	std	Y+6, r25	; 0x06
 64e:	ae 01       	movw	r20, r28
 650:	47 5e       	subi	r20, 0xE7	; 231
 652:	5f 4f       	sbci	r21, 0xFF	; 255
 654:	6f 89       	ldd	r22, Y+23	; 0x17
 656:	78 8d       	ldd	r23, Y+24	; 0x18
 658:	ce 01       	movw	r24, r28
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	0e 94 39 03 	call	0x672	; 0x672 <vfprintf>
 660:	ef 81       	ldd	r30, Y+7	; 0x07
 662:	f8 85       	ldd	r31, Y+8	; 0x08
 664:	e0 0f       	add	r30, r16
 666:	f1 1f       	adc	r31, r17
 668:	10 82       	st	Z, r1
 66a:	2e 96       	adiw	r28, 0x0e	; 14
 66c:	e4 e0       	ldi	r30, 0x04	; 4
 66e:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__epilogue_restores__+0x1c>

00000672 <vfprintf>:
 672:	ab e0       	ldi	r26, 0x0B	; 11
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	ef e3       	ldi	r30, 0x3F	; 63
 678:	f3 e0       	ldi	r31, 0x03	; 3
 67a:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__prologue_saves__>
 67e:	6c 01       	movw	r12, r24
 680:	7b 01       	movw	r14, r22
 682:	8a 01       	movw	r16, r20
 684:	fc 01       	movw	r30, r24
 686:	16 82       	std	Z+6, r1	; 0x06
 688:	17 82       	std	Z+7, r1	; 0x07
 68a:	83 81       	ldd	r24, Z+3	; 0x03
 68c:	81 ff       	sbrs	r24, 1
 68e:	cc c1       	rjmp	.+920    	; 0xa28 <__DATA_REGION_LENGTH__+0x228>
 690:	ce 01       	movw	r24, r28
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	3c 01       	movw	r6, r24
 696:	f6 01       	movw	r30, r12
 698:	93 81       	ldd	r25, Z+3	; 0x03
 69a:	f7 01       	movw	r30, r14
 69c:	93 fd       	sbrc	r25, 3
 69e:	85 91       	lpm	r24, Z+
 6a0:	93 ff       	sbrs	r25, 3
 6a2:	81 91       	ld	r24, Z+
 6a4:	7f 01       	movw	r14, r30
 6a6:	88 23       	and	r24, r24
 6a8:	09 f4       	brne	.+2      	; 0x6ac <vfprintf+0x3a>
 6aa:	ba c1       	rjmp	.+884    	; 0xa20 <__DATA_REGION_LENGTH__+0x220>
 6ac:	85 32       	cpi	r24, 0x25	; 37
 6ae:	39 f4       	brne	.+14     	; 0x6be <vfprintf+0x4c>
 6b0:	93 fd       	sbrc	r25, 3
 6b2:	85 91       	lpm	r24, Z+
 6b4:	93 ff       	sbrs	r25, 3
 6b6:	81 91       	ld	r24, Z+
 6b8:	7f 01       	movw	r14, r30
 6ba:	85 32       	cpi	r24, 0x25	; 37
 6bc:	29 f4       	brne	.+10     	; 0x6c8 <vfprintf+0x56>
 6be:	b6 01       	movw	r22, r12
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 30 05 	call	0xa60	; 0xa60 <fputc>
 6c6:	e7 cf       	rjmp	.-50     	; 0x696 <vfprintf+0x24>
 6c8:	91 2c       	mov	r9, r1
 6ca:	21 2c       	mov	r2, r1
 6cc:	31 2c       	mov	r3, r1
 6ce:	ff e1       	ldi	r31, 0x1F	; 31
 6d0:	f3 15       	cp	r31, r3
 6d2:	d8 f0       	brcs	.+54     	; 0x70a <vfprintf+0x98>
 6d4:	8b 32       	cpi	r24, 0x2B	; 43
 6d6:	79 f0       	breq	.+30     	; 0x6f6 <vfprintf+0x84>
 6d8:	38 f4       	brcc	.+14     	; 0x6e8 <vfprintf+0x76>
 6da:	80 32       	cpi	r24, 0x20	; 32
 6dc:	79 f0       	breq	.+30     	; 0x6fc <vfprintf+0x8a>
 6de:	83 32       	cpi	r24, 0x23	; 35
 6e0:	a1 f4       	brne	.+40     	; 0x70a <vfprintf+0x98>
 6e2:	23 2d       	mov	r18, r3
 6e4:	20 61       	ori	r18, 0x10	; 16
 6e6:	1d c0       	rjmp	.+58     	; 0x722 <vfprintf+0xb0>
 6e8:	8d 32       	cpi	r24, 0x2D	; 45
 6ea:	61 f0       	breq	.+24     	; 0x704 <vfprintf+0x92>
 6ec:	80 33       	cpi	r24, 0x30	; 48
 6ee:	69 f4       	brne	.+26     	; 0x70a <vfprintf+0x98>
 6f0:	23 2d       	mov	r18, r3
 6f2:	21 60       	ori	r18, 0x01	; 1
 6f4:	16 c0       	rjmp	.+44     	; 0x722 <vfprintf+0xb0>
 6f6:	83 2d       	mov	r24, r3
 6f8:	82 60       	ori	r24, 0x02	; 2
 6fa:	38 2e       	mov	r3, r24
 6fc:	e3 2d       	mov	r30, r3
 6fe:	e4 60       	ori	r30, 0x04	; 4
 700:	3e 2e       	mov	r3, r30
 702:	2a c0       	rjmp	.+84     	; 0x758 <vfprintf+0xe6>
 704:	f3 2d       	mov	r31, r3
 706:	f8 60       	ori	r31, 0x08	; 8
 708:	1d c0       	rjmp	.+58     	; 0x744 <vfprintf+0xd2>
 70a:	37 fc       	sbrc	r3, 7
 70c:	2d c0       	rjmp	.+90     	; 0x768 <vfprintf+0xf6>
 70e:	20 ed       	ldi	r18, 0xD0	; 208
 710:	28 0f       	add	r18, r24
 712:	2a 30       	cpi	r18, 0x0A	; 10
 714:	40 f0       	brcs	.+16     	; 0x726 <vfprintf+0xb4>
 716:	8e 32       	cpi	r24, 0x2E	; 46
 718:	b9 f4       	brne	.+46     	; 0x748 <vfprintf+0xd6>
 71a:	36 fc       	sbrc	r3, 6
 71c:	81 c1       	rjmp	.+770    	; 0xa20 <__DATA_REGION_LENGTH__+0x220>
 71e:	23 2d       	mov	r18, r3
 720:	20 64       	ori	r18, 0x40	; 64
 722:	32 2e       	mov	r3, r18
 724:	19 c0       	rjmp	.+50     	; 0x758 <vfprintf+0xe6>
 726:	36 fe       	sbrs	r3, 6
 728:	06 c0       	rjmp	.+12     	; 0x736 <vfprintf+0xc4>
 72a:	8a e0       	ldi	r24, 0x0A	; 10
 72c:	98 9e       	mul	r9, r24
 72e:	20 0d       	add	r18, r0
 730:	11 24       	eor	r1, r1
 732:	92 2e       	mov	r9, r18
 734:	11 c0       	rjmp	.+34     	; 0x758 <vfprintf+0xe6>
 736:	ea e0       	ldi	r30, 0x0A	; 10
 738:	2e 9e       	mul	r2, r30
 73a:	20 0d       	add	r18, r0
 73c:	11 24       	eor	r1, r1
 73e:	22 2e       	mov	r2, r18
 740:	f3 2d       	mov	r31, r3
 742:	f0 62       	ori	r31, 0x20	; 32
 744:	3f 2e       	mov	r3, r31
 746:	08 c0       	rjmp	.+16     	; 0x758 <vfprintf+0xe6>
 748:	8c 36       	cpi	r24, 0x6C	; 108
 74a:	21 f4       	brne	.+8      	; 0x754 <vfprintf+0xe2>
 74c:	83 2d       	mov	r24, r3
 74e:	80 68       	ori	r24, 0x80	; 128
 750:	38 2e       	mov	r3, r24
 752:	02 c0       	rjmp	.+4      	; 0x758 <vfprintf+0xe6>
 754:	88 36       	cpi	r24, 0x68	; 104
 756:	41 f4       	brne	.+16     	; 0x768 <vfprintf+0xf6>
 758:	f7 01       	movw	r30, r14
 75a:	93 fd       	sbrc	r25, 3
 75c:	85 91       	lpm	r24, Z+
 75e:	93 ff       	sbrs	r25, 3
 760:	81 91       	ld	r24, Z+
 762:	7f 01       	movw	r14, r30
 764:	81 11       	cpse	r24, r1
 766:	b3 cf       	rjmp	.-154    	; 0x6ce <vfprintf+0x5c>
 768:	98 2f       	mov	r25, r24
 76a:	9f 7d       	andi	r25, 0xDF	; 223
 76c:	95 54       	subi	r25, 0x45	; 69
 76e:	93 30       	cpi	r25, 0x03	; 3
 770:	28 f4       	brcc	.+10     	; 0x77c <vfprintf+0x10a>
 772:	0c 5f       	subi	r16, 0xFC	; 252
 774:	1f 4f       	sbci	r17, 0xFF	; 255
 776:	9f e3       	ldi	r25, 0x3F	; 63
 778:	99 83       	std	Y+1, r25	; 0x01
 77a:	0d c0       	rjmp	.+26     	; 0x796 <vfprintf+0x124>
 77c:	83 36       	cpi	r24, 0x63	; 99
 77e:	31 f0       	breq	.+12     	; 0x78c <vfprintf+0x11a>
 780:	83 37       	cpi	r24, 0x73	; 115
 782:	71 f0       	breq	.+28     	; 0x7a0 <vfprintf+0x12e>
 784:	83 35       	cpi	r24, 0x53	; 83
 786:	09 f0       	breq	.+2      	; 0x78a <vfprintf+0x118>
 788:	59 c0       	rjmp	.+178    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 78a:	21 c0       	rjmp	.+66     	; 0x7ce <vfprintf+0x15c>
 78c:	f8 01       	movw	r30, r16
 78e:	80 81       	ld	r24, Z
 790:	89 83       	std	Y+1, r24	; 0x01
 792:	0e 5f       	subi	r16, 0xFE	; 254
 794:	1f 4f       	sbci	r17, 0xFF	; 255
 796:	88 24       	eor	r8, r8
 798:	83 94       	inc	r8
 79a:	91 2c       	mov	r9, r1
 79c:	53 01       	movw	r10, r6
 79e:	13 c0       	rjmp	.+38     	; 0x7c6 <vfprintf+0x154>
 7a0:	28 01       	movw	r4, r16
 7a2:	f2 e0       	ldi	r31, 0x02	; 2
 7a4:	4f 0e       	add	r4, r31
 7a6:	51 1c       	adc	r5, r1
 7a8:	f8 01       	movw	r30, r16
 7aa:	a0 80       	ld	r10, Z
 7ac:	b1 80       	ldd	r11, Z+1	; 0x01
 7ae:	36 fe       	sbrs	r3, 6
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <vfprintf+0x146>
 7b2:	69 2d       	mov	r22, r9
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <vfprintf+0x14a>
 7b8:	6f ef       	ldi	r22, 0xFF	; 255
 7ba:	7f ef       	ldi	r23, 0xFF	; 255
 7bc:	c5 01       	movw	r24, r10
 7be:	0e 94 25 05 	call	0xa4a	; 0xa4a <strnlen>
 7c2:	4c 01       	movw	r8, r24
 7c4:	82 01       	movw	r16, r4
 7c6:	f3 2d       	mov	r31, r3
 7c8:	ff 77       	andi	r31, 0x7F	; 127
 7ca:	3f 2e       	mov	r3, r31
 7cc:	16 c0       	rjmp	.+44     	; 0x7fa <vfprintf+0x188>
 7ce:	28 01       	movw	r4, r16
 7d0:	22 e0       	ldi	r18, 0x02	; 2
 7d2:	42 0e       	add	r4, r18
 7d4:	51 1c       	adc	r5, r1
 7d6:	f8 01       	movw	r30, r16
 7d8:	a0 80       	ld	r10, Z
 7da:	b1 80       	ldd	r11, Z+1	; 0x01
 7dc:	36 fe       	sbrs	r3, 6
 7de:	03 c0       	rjmp	.+6      	; 0x7e6 <vfprintf+0x174>
 7e0:	69 2d       	mov	r22, r9
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <vfprintf+0x178>
 7e6:	6f ef       	ldi	r22, 0xFF	; 255
 7e8:	7f ef       	ldi	r23, 0xFF	; 255
 7ea:	c5 01       	movw	r24, r10
 7ec:	0e 94 1a 05 	call	0xa34	; 0xa34 <strnlen_P>
 7f0:	4c 01       	movw	r8, r24
 7f2:	f3 2d       	mov	r31, r3
 7f4:	f0 68       	ori	r31, 0x80	; 128
 7f6:	3f 2e       	mov	r3, r31
 7f8:	82 01       	movw	r16, r4
 7fa:	33 fc       	sbrc	r3, 3
 7fc:	1b c0       	rjmp	.+54     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7fe:	82 2d       	mov	r24, r2
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	88 16       	cp	r8, r24
 804:	99 06       	cpc	r9, r25
 806:	b0 f4       	brcc	.+44     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 808:	b6 01       	movw	r22, r12
 80a:	80 e2       	ldi	r24, 0x20	; 32
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 94 30 05 	call	0xa60	; 0xa60 <fputc>
 812:	2a 94       	dec	r2
 814:	f4 cf       	rjmp	.-24     	; 0x7fe <vfprintf+0x18c>
 816:	f5 01       	movw	r30, r10
 818:	37 fc       	sbrc	r3, 7
 81a:	85 91       	lpm	r24, Z+
 81c:	37 fe       	sbrs	r3, 7
 81e:	81 91       	ld	r24, Z+
 820:	5f 01       	movw	r10, r30
 822:	b6 01       	movw	r22, r12
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 30 05 	call	0xa60	; 0xa60 <fputc>
 82a:	21 10       	cpse	r2, r1
 82c:	2a 94       	dec	r2
 82e:	21 e0       	ldi	r18, 0x01	; 1
 830:	82 1a       	sub	r8, r18
 832:	91 08       	sbc	r9, r1
 834:	81 14       	cp	r8, r1
 836:	91 04       	cpc	r9, r1
 838:	71 f7       	brne	.-36     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 83a:	e8 c0       	rjmp	.+464    	; 0xa0c <__DATA_REGION_LENGTH__+0x20c>
 83c:	84 36       	cpi	r24, 0x64	; 100
 83e:	11 f0       	breq	.+4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 840:	89 36       	cpi	r24, 0x69	; 105
 842:	41 f5       	brne	.+80     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 844:	f8 01       	movw	r30, r16
 846:	37 fe       	sbrs	r3, 7
 848:	07 c0       	rjmp	.+14     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	82 81       	ldd	r24, Z+2	; 0x02
 850:	93 81       	ldd	r25, Z+3	; 0x03
 852:	0c 5f       	subi	r16, 0xFC	; 252
 854:	1f 4f       	sbci	r17, 0xFF	; 255
 856:	08 c0       	rjmp	.+16     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 858:	60 81       	ld	r22, Z
 85a:	71 81       	ldd	r23, Z+1	; 0x01
 85c:	07 2e       	mov	r0, r23
 85e:	00 0c       	add	r0, r0
 860:	88 0b       	sbc	r24, r24
 862:	99 0b       	sbc	r25, r25
 864:	0e 5f       	subi	r16, 0xFE	; 254
 866:	1f 4f       	sbci	r17, 0xFF	; 255
 868:	f3 2d       	mov	r31, r3
 86a:	ff 76       	andi	r31, 0x6F	; 111
 86c:	3f 2e       	mov	r3, r31
 86e:	97 ff       	sbrs	r25, 7
 870:	09 c0       	rjmp	.+18     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 872:	90 95       	com	r25
 874:	80 95       	com	r24
 876:	70 95       	com	r23
 878:	61 95       	neg	r22
 87a:	7f 4f       	sbci	r23, 0xFF	; 255
 87c:	8f 4f       	sbci	r24, 0xFF	; 255
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	f0 68       	ori	r31, 0x80	; 128
 882:	3f 2e       	mov	r3, r31
 884:	2a e0       	ldi	r18, 0x0A	; 10
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	a3 01       	movw	r20, r6
 88a:	0e 94 6c 05 	call	0xad8	; 0xad8 <__ultoa_invert>
 88e:	88 2e       	mov	r8, r24
 890:	86 18       	sub	r8, r6
 892:	45 c0       	rjmp	.+138    	; 0x91e <__DATA_REGION_LENGTH__+0x11e>
 894:	85 37       	cpi	r24, 0x75	; 117
 896:	31 f4       	brne	.+12     	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 898:	23 2d       	mov	r18, r3
 89a:	2f 7e       	andi	r18, 0xEF	; 239
 89c:	b2 2e       	mov	r11, r18
 89e:	2a e0       	ldi	r18, 0x0A	; 10
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	25 c0       	rjmp	.+74     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8a4:	93 2d       	mov	r25, r3
 8a6:	99 7f       	andi	r25, 0xF9	; 249
 8a8:	b9 2e       	mov	r11, r25
 8aa:	8f 36       	cpi	r24, 0x6F	; 111
 8ac:	c1 f0       	breq	.+48     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8ae:	18 f4       	brcc	.+6      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8b0:	88 35       	cpi	r24, 0x58	; 88
 8b2:	79 f0       	breq	.+30     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8b4:	b5 c0       	rjmp	.+362    	; 0xa20 <__DATA_REGION_LENGTH__+0x220>
 8b6:	80 37       	cpi	r24, 0x70	; 112
 8b8:	19 f0       	breq	.+6      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8ba:	88 37       	cpi	r24, 0x78	; 120
 8bc:	21 f0       	breq	.+8      	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8be:	b0 c0       	rjmp	.+352    	; 0xa20 <__DATA_REGION_LENGTH__+0x220>
 8c0:	e9 2f       	mov	r30, r25
 8c2:	e0 61       	ori	r30, 0x10	; 16
 8c4:	be 2e       	mov	r11, r30
 8c6:	b4 fe       	sbrs	r11, 4
 8c8:	0d c0       	rjmp	.+26     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8ca:	fb 2d       	mov	r31, r11
 8cc:	f4 60       	ori	r31, 0x04	; 4
 8ce:	bf 2e       	mov	r11, r31
 8d0:	09 c0       	rjmp	.+18     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8d2:	34 fe       	sbrs	r3, 4
 8d4:	0a c0       	rjmp	.+20     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8d6:	29 2f       	mov	r18, r25
 8d8:	26 60       	ori	r18, 0x06	; 6
 8da:	b2 2e       	mov	r11, r18
 8dc:	06 c0       	rjmp	.+12     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8de:	28 e0       	ldi	r18, 0x08	; 8
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	05 c0       	rjmp	.+10     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8e4:	20 e1       	ldi	r18, 0x10	; 16
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8ea:	20 e1       	ldi	r18, 0x10	; 16
 8ec:	32 e0       	ldi	r19, 0x02	; 2
 8ee:	f8 01       	movw	r30, r16
 8f0:	b7 fe       	sbrs	r11, 7
 8f2:	07 c0       	rjmp	.+14     	; 0x902 <__DATA_REGION_LENGTH__+0x102>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	82 81       	ldd	r24, Z+2	; 0x02
 8fa:	93 81       	ldd	r25, Z+3	; 0x03
 8fc:	0c 5f       	subi	r16, 0xFC	; 252
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	06 c0       	rjmp	.+12     	; 0x90e <__DATA_REGION_LENGTH__+0x10e>
 902:	60 81       	ld	r22, Z
 904:	71 81       	ldd	r23, Z+1	; 0x01
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 5f       	subi	r16, 0xFE	; 254
 90c:	1f 4f       	sbci	r17, 0xFF	; 255
 90e:	a3 01       	movw	r20, r6
 910:	0e 94 6c 05 	call	0xad8	; 0xad8 <__ultoa_invert>
 914:	88 2e       	mov	r8, r24
 916:	86 18       	sub	r8, r6
 918:	fb 2d       	mov	r31, r11
 91a:	ff 77       	andi	r31, 0x7F	; 127
 91c:	3f 2e       	mov	r3, r31
 91e:	36 fe       	sbrs	r3, 6
 920:	0d c0       	rjmp	.+26     	; 0x93c <__DATA_REGION_LENGTH__+0x13c>
 922:	23 2d       	mov	r18, r3
 924:	2e 7f       	andi	r18, 0xFE	; 254
 926:	a2 2e       	mov	r10, r18
 928:	89 14       	cp	r8, r9
 92a:	58 f4       	brcc	.+22     	; 0x942 <__DATA_REGION_LENGTH__+0x142>
 92c:	34 fe       	sbrs	r3, 4
 92e:	0b c0       	rjmp	.+22     	; 0x946 <__DATA_REGION_LENGTH__+0x146>
 930:	32 fc       	sbrc	r3, 2
 932:	09 c0       	rjmp	.+18     	; 0x946 <__DATA_REGION_LENGTH__+0x146>
 934:	83 2d       	mov	r24, r3
 936:	8e 7e       	andi	r24, 0xEE	; 238
 938:	a8 2e       	mov	r10, r24
 93a:	05 c0       	rjmp	.+10     	; 0x946 <__DATA_REGION_LENGTH__+0x146>
 93c:	b8 2c       	mov	r11, r8
 93e:	a3 2c       	mov	r10, r3
 940:	03 c0       	rjmp	.+6      	; 0x948 <__DATA_REGION_LENGTH__+0x148>
 942:	b8 2c       	mov	r11, r8
 944:	01 c0       	rjmp	.+2      	; 0x948 <__DATA_REGION_LENGTH__+0x148>
 946:	b9 2c       	mov	r11, r9
 948:	a4 fe       	sbrs	r10, 4
 94a:	0f c0       	rjmp	.+30     	; 0x96a <__DATA_REGION_LENGTH__+0x16a>
 94c:	fe 01       	movw	r30, r28
 94e:	e8 0d       	add	r30, r8
 950:	f1 1d       	adc	r31, r1
 952:	80 81       	ld	r24, Z
 954:	80 33       	cpi	r24, 0x30	; 48
 956:	21 f4       	brne	.+8      	; 0x960 <__DATA_REGION_LENGTH__+0x160>
 958:	9a 2d       	mov	r25, r10
 95a:	99 7e       	andi	r25, 0xE9	; 233
 95c:	a9 2e       	mov	r10, r25
 95e:	09 c0       	rjmp	.+18     	; 0x972 <__DATA_REGION_LENGTH__+0x172>
 960:	a2 fe       	sbrs	r10, 2
 962:	06 c0       	rjmp	.+12     	; 0x970 <__DATA_REGION_LENGTH__+0x170>
 964:	b3 94       	inc	r11
 966:	b3 94       	inc	r11
 968:	04 c0       	rjmp	.+8      	; 0x972 <__DATA_REGION_LENGTH__+0x172>
 96a:	8a 2d       	mov	r24, r10
 96c:	86 78       	andi	r24, 0x86	; 134
 96e:	09 f0       	breq	.+2      	; 0x972 <__DATA_REGION_LENGTH__+0x172>
 970:	b3 94       	inc	r11
 972:	a3 fc       	sbrc	r10, 3
 974:	11 c0       	rjmp	.+34     	; 0x998 <__DATA_REGION_LENGTH__+0x198>
 976:	a0 fe       	sbrs	r10, 0
 978:	06 c0       	rjmp	.+12     	; 0x986 <__DATA_REGION_LENGTH__+0x186>
 97a:	b2 14       	cp	r11, r2
 97c:	88 f4       	brcc	.+34     	; 0x9a0 <__DATA_REGION_LENGTH__+0x1a0>
 97e:	28 0c       	add	r2, r8
 980:	92 2c       	mov	r9, r2
 982:	9b 18       	sub	r9, r11
 984:	0e c0       	rjmp	.+28     	; 0x9a2 <__DATA_REGION_LENGTH__+0x1a2>
 986:	b2 14       	cp	r11, r2
 988:	60 f4       	brcc	.+24     	; 0x9a2 <__DATA_REGION_LENGTH__+0x1a2>
 98a:	b6 01       	movw	r22, r12
 98c:	80 e2       	ldi	r24, 0x20	; 32
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	0e 94 30 05 	call	0xa60	; 0xa60 <fputc>
 994:	b3 94       	inc	r11
 996:	f7 cf       	rjmp	.-18     	; 0x986 <__DATA_REGION_LENGTH__+0x186>
 998:	b2 14       	cp	r11, r2
 99a:	18 f4       	brcc	.+6      	; 0x9a2 <__DATA_REGION_LENGTH__+0x1a2>
 99c:	2b 18       	sub	r2, r11
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__DATA_REGION_LENGTH__+0x1a4>
 9a0:	98 2c       	mov	r9, r8
 9a2:	21 2c       	mov	r2, r1
 9a4:	a4 fe       	sbrs	r10, 4
 9a6:	10 c0       	rjmp	.+32     	; 0x9c8 <__DATA_REGION_LENGTH__+0x1c8>
 9a8:	b6 01       	movw	r22, r12
 9aa:	80 e3       	ldi	r24, 0x30	; 48
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	0e 94 30 05 	call	0xa60	; 0xa60 <fputc>
 9b2:	a2 fe       	sbrs	r10, 2
 9b4:	17 c0       	rjmp	.+46     	; 0x9e4 <__DATA_REGION_LENGTH__+0x1e4>
 9b6:	a1 fc       	sbrc	r10, 1
 9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <__DATA_REGION_LENGTH__+0x1c0>
 9ba:	88 e7       	ldi	r24, 0x78	; 120
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__DATA_REGION_LENGTH__+0x1c4>
 9c0:	88 e5       	ldi	r24, 0x58	; 88
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	b6 01       	movw	r22, r12
 9c6:	0c c0       	rjmp	.+24     	; 0x9e0 <__DATA_REGION_LENGTH__+0x1e0>
 9c8:	8a 2d       	mov	r24, r10
 9ca:	86 78       	andi	r24, 0x86	; 134
 9cc:	59 f0       	breq	.+22     	; 0x9e4 <__DATA_REGION_LENGTH__+0x1e4>
 9ce:	a1 fe       	sbrs	r10, 1
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__DATA_REGION_LENGTH__+0x1d6>
 9d2:	8b e2       	ldi	r24, 0x2B	; 43
 9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <__DATA_REGION_LENGTH__+0x1d8>
 9d6:	80 e2       	ldi	r24, 0x20	; 32
 9d8:	a7 fc       	sbrc	r10, 7
 9da:	8d e2       	ldi	r24, 0x2D	; 45
 9dc:	b6 01       	movw	r22, r12
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	0e 94 30 05 	call	0xa60	; 0xa60 <fputc>
 9e4:	89 14       	cp	r8, r9
 9e6:	38 f4       	brcc	.+14     	; 0x9f6 <__DATA_REGION_LENGTH__+0x1f6>
 9e8:	b6 01       	movw	r22, r12
 9ea:	80 e3       	ldi	r24, 0x30	; 48
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 30 05 	call	0xa60	; 0xa60 <fputc>
 9f2:	9a 94       	dec	r9
 9f4:	f7 cf       	rjmp	.-18     	; 0x9e4 <__DATA_REGION_LENGTH__+0x1e4>
 9f6:	8a 94       	dec	r8
 9f8:	f3 01       	movw	r30, r6
 9fa:	e8 0d       	add	r30, r8
 9fc:	f1 1d       	adc	r31, r1
 9fe:	80 81       	ld	r24, Z
 a00:	b6 01       	movw	r22, r12
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	0e 94 30 05 	call	0xa60	; 0xa60 <fputc>
 a08:	81 10       	cpse	r8, r1
 a0a:	f5 cf       	rjmp	.-22     	; 0x9f6 <__DATA_REGION_LENGTH__+0x1f6>
 a0c:	22 20       	and	r2, r2
 a0e:	09 f4       	brne	.+2      	; 0xa12 <__DATA_REGION_LENGTH__+0x212>
 a10:	42 ce       	rjmp	.-892    	; 0x696 <vfprintf+0x24>
 a12:	b6 01       	movw	r22, r12
 a14:	80 e2       	ldi	r24, 0x20	; 32
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 30 05 	call	0xa60	; 0xa60 <fputc>
 a1c:	2a 94       	dec	r2
 a1e:	f6 cf       	rjmp	.-20     	; 0xa0c <__DATA_REGION_LENGTH__+0x20c>
 a20:	f6 01       	movw	r30, r12
 a22:	86 81       	ldd	r24, Z+6	; 0x06
 a24:	97 81       	ldd	r25, Z+7	; 0x07
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <__DATA_REGION_LENGTH__+0x22c>
 a28:	8f ef       	ldi	r24, 0xFF	; 255
 a2a:	9f ef       	ldi	r25, 0xFF	; 255
 a2c:	2b 96       	adiw	r28, 0x0b	; 11
 a2e:	e2 e1       	ldi	r30, 0x12	; 18
 a30:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__epilogue_restores__>

00000a34 <strnlen_P>:
 a34:	fc 01       	movw	r30, r24
 a36:	05 90       	lpm	r0, Z+
 a38:	61 50       	subi	r22, 0x01	; 1
 a3a:	70 40       	sbci	r23, 0x00	; 0
 a3c:	01 10       	cpse	r0, r1
 a3e:	d8 f7       	brcc	.-10     	; 0xa36 <strnlen_P+0x2>
 a40:	80 95       	com	r24
 a42:	90 95       	com	r25
 a44:	8e 0f       	add	r24, r30
 a46:	9f 1f       	adc	r25, r31
 a48:	08 95       	ret

00000a4a <strnlen>:
 a4a:	fc 01       	movw	r30, r24
 a4c:	61 50       	subi	r22, 0x01	; 1
 a4e:	70 40       	sbci	r23, 0x00	; 0
 a50:	01 90       	ld	r0, Z+
 a52:	01 10       	cpse	r0, r1
 a54:	d8 f7       	brcc	.-10     	; 0xa4c <strnlen+0x2>
 a56:	80 95       	com	r24
 a58:	90 95       	com	r25
 a5a:	8e 0f       	add	r24, r30
 a5c:	9f 1f       	adc	r25, r31
 a5e:	08 95       	ret

00000a60 <fputc>:
 a60:	0f 93       	push	r16
 a62:	1f 93       	push	r17
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	fb 01       	movw	r30, r22
 a6a:	23 81       	ldd	r18, Z+3	; 0x03
 a6c:	21 fd       	sbrc	r18, 1
 a6e:	03 c0       	rjmp	.+6      	; 0xa76 <fputc+0x16>
 a70:	8f ef       	ldi	r24, 0xFF	; 255
 a72:	9f ef       	ldi	r25, 0xFF	; 255
 a74:	2c c0       	rjmp	.+88     	; 0xace <fputc+0x6e>
 a76:	22 ff       	sbrs	r18, 2
 a78:	16 c0       	rjmp	.+44     	; 0xaa6 <fputc+0x46>
 a7a:	46 81       	ldd	r20, Z+6	; 0x06
 a7c:	57 81       	ldd	r21, Z+7	; 0x07
 a7e:	24 81       	ldd	r18, Z+4	; 0x04
 a80:	35 81       	ldd	r19, Z+5	; 0x05
 a82:	42 17       	cp	r20, r18
 a84:	53 07       	cpc	r21, r19
 a86:	44 f4       	brge	.+16     	; 0xa98 <fputc+0x38>
 a88:	a0 81       	ld	r26, Z
 a8a:	b1 81       	ldd	r27, Z+1	; 0x01
 a8c:	9d 01       	movw	r18, r26
 a8e:	2f 5f       	subi	r18, 0xFF	; 255
 a90:	3f 4f       	sbci	r19, 0xFF	; 255
 a92:	20 83       	st	Z, r18
 a94:	31 83       	std	Z+1, r19	; 0x01
 a96:	8c 93       	st	X, r24
 a98:	26 81       	ldd	r18, Z+6	; 0x06
 a9a:	37 81       	ldd	r19, Z+7	; 0x07
 a9c:	2f 5f       	subi	r18, 0xFF	; 255
 a9e:	3f 4f       	sbci	r19, 0xFF	; 255
 aa0:	26 83       	std	Z+6, r18	; 0x06
 aa2:	37 83       	std	Z+7, r19	; 0x07
 aa4:	14 c0       	rjmp	.+40     	; 0xace <fputc+0x6e>
 aa6:	8b 01       	movw	r16, r22
 aa8:	ec 01       	movw	r28, r24
 aaa:	fb 01       	movw	r30, r22
 aac:	00 84       	ldd	r0, Z+8	; 0x08
 aae:	f1 85       	ldd	r31, Z+9	; 0x09
 ab0:	e0 2d       	mov	r30, r0
 ab2:	09 95       	icall
 ab4:	89 2b       	or	r24, r25
 ab6:	e1 f6       	brne	.-72     	; 0xa70 <fputc+0x10>
 ab8:	d8 01       	movw	r26, r16
 aba:	16 96       	adiw	r26, 0x06	; 6
 abc:	8d 91       	ld	r24, X+
 abe:	9c 91       	ld	r25, X
 ac0:	17 97       	sbiw	r26, 0x07	; 7
 ac2:	01 96       	adiw	r24, 0x01	; 1
 ac4:	16 96       	adiw	r26, 0x06	; 6
 ac6:	8d 93       	st	X+, r24
 ac8:	9c 93       	st	X, r25
 aca:	17 97       	sbiw	r26, 0x07	; 7
 acc:	ce 01       	movw	r24, r28
 ace:	df 91       	pop	r29
 ad0:	cf 91       	pop	r28
 ad2:	1f 91       	pop	r17
 ad4:	0f 91       	pop	r16
 ad6:	08 95       	ret

00000ad8 <__ultoa_invert>:
 ad8:	fa 01       	movw	r30, r20
 ada:	aa 27       	eor	r26, r26
 adc:	28 30       	cpi	r18, 0x08	; 8
 ade:	51 f1       	breq	.+84     	; 0xb34 <__ultoa_invert+0x5c>
 ae0:	20 31       	cpi	r18, 0x10	; 16
 ae2:	81 f1       	breq	.+96     	; 0xb44 <__ultoa_invert+0x6c>
 ae4:	e8 94       	clt
 ae6:	6f 93       	push	r22
 ae8:	6e 7f       	andi	r22, 0xFE	; 254
 aea:	6e 5f       	subi	r22, 0xFE	; 254
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	8f 4f       	sbci	r24, 0xFF	; 255
 af0:	9f 4f       	sbci	r25, 0xFF	; 255
 af2:	af 4f       	sbci	r26, 0xFF	; 255
 af4:	b1 e0       	ldi	r27, 0x01	; 1
 af6:	3e d0       	rcall	.+124    	; 0xb74 <__ultoa_invert+0x9c>
 af8:	b4 e0       	ldi	r27, 0x04	; 4
 afa:	3c d0       	rcall	.+120    	; 0xb74 <__ultoa_invert+0x9c>
 afc:	67 0f       	add	r22, r23
 afe:	78 1f       	adc	r23, r24
 b00:	89 1f       	adc	r24, r25
 b02:	9a 1f       	adc	r25, r26
 b04:	a1 1d       	adc	r26, r1
 b06:	68 0f       	add	r22, r24
 b08:	79 1f       	adc	r23, r25
 b0a:	8a 1f       	adc	r24, r26
 b0c:	91 1d       	adc	r25, r1
 b0e:	a1 1d       	adc	r26, r1
 b10:	6a 0f       	add	r22, r26
 b12:	71 1d       	adc	r23, r1
 b14:	81 1d       	adc	r24, r1
 b16:	91 1d       	adc	r25, r1
 b18:	a1 1d       	adc	r26, r1
 b1a:	20 d0       	rcall	.+64     	; 0xb5c <__ultoa_invert+0x84>
 b1c:	09 f4       	brne	.+2      	; 0xb20 <__ultoa_invert+0x48>
 b1e:	68 94       	set
 b20:	3f 91       	pop	r19
 b22:	2a e0       	ldi	r18, 0x0A	; 10
 b24:	26 9f       	mul	r18, r22
 b26:	11 24       	eor	r1, r1
 b28:	30 19       	sub	r19, r0
 b2a:	30 5d       	subi	r19, 0xD0	; 208
 b2c:	31 93       	st	Z+, r19
 b2e:	de f6       	brtc	.-74     	; 0xae6 <__ultoa_invert+0xe>
 b30:	cf 01       	movw	r24, r30
 b32:	08 95       	ret
 b34:	46 2f       	mov	r20, r22
 b36:	47 70       	andi	r20, 0x07	; 7
 b38:	40 5d       	subi	r20, 0xD0	; 208
 b3a:	41 93       	st	Z+, r20
 b3c:	b3 e0       	ldi	r27, 0x03	; 3
 b3e:	0f d0       	rcall	.+30     	; 0xb5e <__ultoa_invert+0x86>
 b40:	c9 f7       	brne	.-14     	; 0xb34 <__ultoa_invert+0x5c>
 b42:	f6 cf       	rjmp	.-20     	; 0xb30 <__ultoa_invert+0x58>
 b44:	46 2f       	mov	r20, r22
 b46:	4f 70       	andi	r20, 0x0F	; 15
 b48:	40 5d       	subi	r20, 0xD0	; 208
 b4a:	4a 33       	cpi	r20, 0x3A	; 58
 b4c:	18 f0       	brcs	.+6      	; 0xb54 <__ultoa_invert+0x7c>
 b4e:	49 5d       	subi	r20, 0xD9	; 217
 b50:	31 fd       	sbrc	r19, 1
 b52:	40 52       	subi	r20, 0x20	; 32
 b54:	41 93       	st	Z+, r20
 b56:	02 d0       	rcall	.+4      	; 0xb5c <__ultoa_invert+0x84>
 b58:	a9 f7       	brne	.-22     	; 0xb44 <__ultoa_invert+0x6c>
 b5a:	ea cf       	rjmp	.-44     	; 0xb30 <__ultoa_invert+0x58>
 b5c:	b4 e0       	ldi	r27, 0x04	; 4
 b5e:	a6 95       	lsr	r26
 b60:	97 95       	ror	r25
 b62:	87 95       	ror	r24
 b64:	77 95       	ror	r23
 b66:	67 95       	ror	r22
 b68:	ba 95       	dec	r27
 b6a:	c9 f7       	brne	.-14     	; 0xb5e <__ultoa_invert+0x86>
 b6c:	00 97       	sbiw	r24, 0x00	; 0
 b6e:	61 05       	cpc	r22, r1
 b70:	71 05       	cpc	r23, r1
 b72:	08 95       	ret
 b74:	9b 01       	movw	r18, r22
 b76:	ac 01       	movw	r20, r24
 b78:	0a 2e       	mov	r0, r26
 b7a:	06 94       	lsr	r0
 b7c:	57 95       	ror	r21
 b7e:	47 95       	ror	r20
 b80:	37 95       	ror	r19
 b82:	27 95       	ror	r18
 b84:	ba 95       	dec	r27
 b86:	c9 f7       	brne	.-14     	; 0xb7a <__ultoa_invert+0xa2>
 b88:	62 0f       	add	r22, r18
 b8a:	73 1f       	adc	r23, r19
 b8c:	84 1f       	adc	r24, r20
 b8e:	95 1f       	adc	r25, r21
 b90:	a0 1d       	adc	r26, r0
 b92:	08 95       	ret

00000b94 <__prologue_saves__>:
 b94:	2f 92       	push	r2
 b96:	3f 92       	push	r3
 b98:	4f 92       	push	r4
 b9a:	5f 92       	push	r5
 b9c:	6f 92       	push	r6
 b9e:	7f 92       	push	r7
 ba0:	8f 92       	push	r8
 ba2:	9f 92       	push	r9
 ba4:	af 92       	push	r10
 ba6:	bf 92       	push	r11
 ba8:	cf 92       	push	r12
 baa:	df 92       	push	r13
 bac:	ef 92       	push	r14
 bae:	ff 92       	push	r15
 bb0:	0f 93       	push	r16
 bb2:	1f 93       	push	r17
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	cd b7       	in	r28, 0x3d	; 61
 bba:	de b7       	in	r29, 0x3e	; 62
 bbc:	ca 1b       	sub	r28, r26
 bbe:	db 0b       	sbc	r29, r27
 bc0:	cd bf       	out	0x3d, r28	; 61
 bc2:	de bf       	out	0x3e, r29	; 62
 bc4:	09 94       	ijmp

00000bc6 <__epilogue_restores__>:
 bc6:	2a 88       	ldd	r2, Y+18	; 0x12
 bc8:	39 88       	ldd	r3, Y+17	; 0x11
 bca:	48 88       	ldd	r4, Y+16	; 0x10
 bcc:	5f 84       	ldd	r5, Y+15	; 0x0f
 bce:	6e 84       	ldd	r6, Y+14	; 0x0e
 bd0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bd2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bd4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bd6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bd8:	b9 84       	ldd	r11, Y+9	; 0x09
 bda:	c8 84       	ldd	r12, Y+8	; 0x08
 bdc:	df 80       	ldd	r13, Y+7	; 0x07
 bde:	ee 80       	ldd	r14, Y+6	; 0x06
 be0:	fd 80       	ldd	r15, Y+5	; 0x05
 be2:	0c 81       	ldd	r16, Y+4	; 0x04
 be4:	1b 81       	ldd	r17, Y+3	; 0x03
 be6:	aa 81       	ldd	r26, Y+2	; 0x02
 be8:	b9 81       	ldd	r27, Y+1	; 0x01
 bea:	ce 0f       	add	r28, r30
 bec:	d1 1d       	adc	r29, r1
 bee:	cd bf       	out	0x3d, r28	; 61
 bf0:	de bf       	out	0x3e, r29	; 62
 bf2:	ed 01       	movw	r28, r26
 bf4:	08 95       	ret

00000bf6 <_exit>:
 bf6:	f8 94       	cli

00000bf8 <__stop_program>:
 bf8:	ff cf       	rjmp	.-2      	; 0xbf8 <__stop_program>
