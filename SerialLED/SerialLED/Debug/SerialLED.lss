
SerialLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  00004278  00000278  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f58  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002419  00000000  00000000  000033d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061a  00000000  00000000  000057ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00005e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000151b  00000000  00000000  00005f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000231  00000000  00000000  00007443  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00007674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  a0:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <LED_Init>:
#include "LED.h"

void LED_Init(void) {
	PORTF.DIRSET = (0x01 << RED_LED);
  a8:	e0 ea       	ldi	r30, 0xA0	; 160
  aa:	f4 e0       	ldi	r31, 0x04	; 4
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = (0x01 << GREEN_LED);
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTCLR = (0x01 << RED_LED);
  b4:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = (0x01 << GREEN_LED);
  b6:	86 83       	std	Z+6, r24	; 0x06
  b8:	08 95       	ret

000000ba <LED_On>:
}

void LED_On(uint8_t led) {
	PORTF.OUTSET = (0x01 << led);
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <LED_On+0xa>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <LED_On+0x6>
  c8:	20 93 a5 04 	sts	0x04A5, r18	; 0x8004a5 <__RODATA_PM_OFFSET__+0x7fc4a5>
  cc:	08 95       	ret

000000ce <LED_Off>:
}

void LED_Off(uint8_t led) {
	PORTF.OUTCLR = (0x01 << led);
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <LED_Off+0xa>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <LED_Off+0x6>
  dc:	20 93 a6 04 	sts	0x04A6, r18	; 0x8004a6 <__RODATA_PM_OFFSET__+0x7fc4a6>
  e0:	08 95       	ret

000000e2 <main>:
#include "UART.h"
#include "LED.h"

int main(void)
{
    USART1_Init();
  e2:	0e 94 b6 00 	call	0x16c	; 0x16c <USART1_Init>
	LED_Init();
  e6:	0e 94 54 00 	call	0xa8	; 0xa8 <LED_Init>
    while (1) 
    {
		USART1_Transmit_String("Enter the letter of the color of light you want to turn on (r, g, y):\n\r");
  ea:	88 e7       	ldi	r24, 0x78	; 120
  ec:	92 e4       	ldi	r25, 0x42	; 66
  ee:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART1_Transmit_String>
		uint8_t message = USART1_Receive();
  f2:	0e 94 13 01 	call	0x226	; 0x226 <USART1_Receive>
		uint8_t lowerMessage = tolower(message);
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 32 01 	call	0x264	; 0x264 <tolower>
		switch (lowerMessage)
  fc:	99 27       	eor	r25, r25
  fe:	82 37       	cpi	r24, 0x72	; 114
 100:	91 05       	cpc	r25, r1
 102:	39 f0       	breq	.+14     	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
 104:	89 37       	cpi	r24, 0x79	; 121
 106:	91 05       	cpc	r25, r1
 108:	d1 f0       	breq	.+52     	; 0x13e <__EEPROM_REGION_LENGTH__+0x3e>
 10a:	87 36       	cpi	r24, 0x67	; 103
 10c:	91 05       	cpc	r25, r1
 10e:	11 f5       	brne	.+68     	; 0x154 <__EEPROM_REGION_LENGTH__+0x54>
 110:	0b c0       	rjmp	.+22     	; 0x128 <__EEPROM_REGION_LENGTH__+0x28>
		{
		case 'r':
			LED_On(RED_LED);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 5d 00 	call	0xba	; 0xba <LED_On>
			LED_Off(GREEN_LED);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 67 00 	call	0xce	; 0xce <LED_Off>
			USART1_Transmit_String("Red light on\n\r");
 11e:	80 ec       	ldi	r24, 0xC0	; 192
 120:	92 e4       	ldi	r25, 0x42	; 66
 122:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART1_Transmit_String>
			break;
 126:	20 c0       	rjmp	.+64     	; 0x168 <__EEPROM_REGION_LENGTH__+0x68>
		case 'g':
			LED_On(GREEN_LED);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 5d 00 	call	0xba	; 0xba <LED_On>
			LED_Off(RED_LED);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 67 00 	call	0xce	; 0xce <LED_Off>
			USART1_Transmit_String("Green light on\n\r");
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	92 e4       	ldi	r25, 0x42	; 66
 138:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART1_Transmit_String>
			break;
 13c:	15 c0       	rjmp	.+42     	; 0x168 <__EEPROM_REGION_LENGTH__+0x68>
		case 'y':
			LED_On(RED_LED);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 5d 00 	call	0xba	; 0xba <LED_On>
			LED_On(GREEN_LED);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 5d 00 	call	0xba	; 0xba <LED_On>
			USART1_Transmit_String("Yellow light on\n\r");
 14a:	80 ee       	ldi	r24, 0xE0	; 224
 14c:	92 e4       	ldi	r25, 0x42	; 66
 14e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART1_Transmit_String>
			break;
 152:	0a c0       	rjmp	.+20     	; 0x168 <__EEPROM_REGION_LENGTH__+0x68>
		default:
			LED_Off(RED_LED);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 67 00 	call	0xce	; 0xce <LED_Off>
			LED_Off(GREEN_LED);
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 67 00 	call	0xce	; 0xce <LED_Off>
			USART1_Transmit_String("No light on\n\r");
 160:	82 ef       	ldi	r24, 0xF2	; 242
 162:	92 e4       	ldi	r25, 0x42	; 66
 164:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <USART1_Transmit_String>
		}
		wdt_reset();
 168:	a8 95       	wdr
    }
 16a:	bf cf       	rjmp	.-130    	; 0xea <main+0x8>

0000016c <USART1_Init>:
	sprintf(buffer, "%d", num);

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
		USART1_Transmit((uint8_t)buffer[i]);
	}
}
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
 174:	0a 2e       	mov	r0, r26
 176:	00 0c       	add	r0, r0
 178:	bb 0b       	sbc	r27, r27
 17a:	bc 5f       	subi	r27, 0xFC	; 252
 17c:	27 e5       	ldi	r18, 0x57	; 87
 17e:	34 e0       	ldi	r19, 0x04	; 4
 180:	0e 94 1c 01 	call	0x238	; 0x238 <__usmulhisi3>
 184:	8b 01       	movw	r16, r22
 186:	9c 01       	movw	r18, r24
 188:	99 23       	and	r25, r25
 18a:	24 f4       	brge	.+8      	; 0x194 <USART1_Init+0x28>
 18c:	01 50       	subi	r16, 0x01	; 1
 18e:	1c 4f       	sbci	r17, 0xFC	; 252
 190:	2f 4f       	sbci	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
 194:	d9 01       	movw	r26, r18
 196:	c8 01       	movw	r24, r16
 198:	07 2e       	mov	r0, r23
 19a:	7a e0       	ldi	r23, 0x0A	; 10
 19c:	b5 95       	asr	r27
 19e:	a7 95       	ror	r26
 1a0:	97 95       	ror	r25
 1a2:	87 95       	ror	r24
 1a4:	7a 95       	dec	r23
 1a6:	d1 f7       	brne	.-12     	; 0x19c <USART1_Init+0x30>
 1a8:	70 2d       	mov	r23, r0
 1aa:	e0 e2       	ldi	r30, 0x20	; 32
 1ac:	f8 e0       	ldi	r31, 0x08	; 8
 1ae:	80 87       	std	Z+8, r24	; 0x08
 1b0:	91 87       	std	Z+9, r25	; 0x09
 1b2:	a0 e4       	ldi	r26, 0x40	; 64
 1b4:	b4 e0       	ldi	r27, 0x04	; 4
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	11 96       	adiw	r26, 0x01	; 1
 1ba:	8c 93       	st	X, r24
 1bc:	11 97       	sbiw	r26, 0x01	; 1
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	12 96       	adiw	r26, 0x02	; 2
 1c2:	8c 93       	st	X, r24
 1c4:	80 ec       	ldi	r24, 0xC0	; 192
 1c6:	86 83       	std	Z+6, r24	; 0x06
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	87 83       	std	Z+7, r24	; 0x07
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <USART1_Transmit>:
 1d2:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 1d6:	95 ff       	sbrs	r25, 5
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <USART1_Transmit>
 1da:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7fc822>
 1de:	08 95       	ret

000001e0 <USART1_Transmit_String>:

void USART1_Transmit_String(char* string) {
 1e0:	ef 92       	push	r14
 1e2:	ff 92       	push	r15
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	7c 01       	movw	r14, r24
	uint16_t string_len = strlen(string);
 1ee:	fc 01       	movw	r30, r24
 1f0:	01 90       	ld	r0, Z+
 1f2:	00 20       	and	r0, r0
 1f4:	e9 f7       	brne	.-6      	; 0x1f0 <USART1_Transmit_String+0x10>
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	8f 01       	movw	r16, r30
 1fa:	08 1b       	sub	r16, r24
 1fc:	19 0b       	sbc	r17, r25
	for (uint16_t i = 0; i < string_len; i++) {
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	07 c0       	rjmp	.+14     	; 0x212 <USART1_Transmit_String+0x32>
		USART1_Transmit((uint8_t)string[i]);
 204:	f7 01       	movw	r30, r14
 206:	ec 0f       	add	r30, r28
 208:	fd 1f       	adc	r31, r29
 20a:	80 81       	ld	r24, Z
 20c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <USART1_Transmit>
	}
}

void USART1_Transmit_String(char* string) {
	uint16_t string_len = strlen(string);
	for (uint16_t i = 0; i < string_len; i++) {
 210:	21 96       	adiw	r28, 0x01	; 1
 212:	c0 17       	cp	r28, r16
 214:	d1 07       	cpc	r29, r17
 216:	b0 f3       	brcs	.-20     	; 0x204 <USART1_Transmit_String+0x24>
		USART1_Transmit((uint8_t)string[i]);
	}
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	ff 90       	pop	r15
 222:	ef 90       	pop	r14
 224:	08 95       	ret

00000226 <USART1_Receive>:

uint8_t USART1_Receive(void) {
	while (!(USART1.STATUS & USART_RXCIF_bm)) wdt_reset();
 226:	01 c0       	rjmp	.+2      	; 0x22a <USART1_Receive+0x4>
 228:	a8 95       	wdr
 22a:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 22e:	88 23       	and	r24, r24
 230:	dc f7       	brge	.-10     	; 0x228 <USART1_Receive+0x2>
	return USART1.RXDATAL;
 232:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7fc820>
 236:	08 95       	ret

00000238 <__usmulhisi3>:
 238:	0e 94 23 01 	call	0x246	; 0x246 <__umulhisi3>

0000023c <__usmulhisi3_tail>:
 23c:	b7 ff       	sbrs	r27, 7
 23e:	08 95       	ret
 240:	82 1b       	sub	r24, r18
 242:	93 0b       	sbc	r25, r19
 244:	08 95       	ret

00000246 <__umulhisi3>:
 246:	a2 9f       	mul	r26, r18
 248:	b0 01       	movw	r22, r0
 24a:	b3 9f       	mul	r27, r19
 24c:	c0 01       	movw	r24, r0
 24e:	a3 9f       	mul	r26, r19
 250:	70 0d       	add	r23, r0
 252:	81 1d       	adc	r24, r1
 254:	11 24       	eor	r1, r1
 256:	91 1d       	adc	r25, r1
 258:	b2 9f       	mul	r27, r18
 25a:	70 0d       	add	r23, r0
 25c:	81 1d       	adc	r24, r1
 25e:	11 24       	eor	r1, r1
 260:	91 1d       	adc	r25, r1
 262:	08 95       	ret

00000264 <tolower>:
 264:	91 11       	cpse	r25, r1
 266:	08 95       	ret
 268:	81 54       	subi	r24, 0x41	; 65
 26a:	8a 51       	subi	r24, 0x1A	; 26
 26c:	08 f4       	brcc	.+2      	; 0x270 <tolower+0xc>
 26e:	80 5e       	subi	r24, 0xE0	; 224
 270:	85 5a       	subi	r24, 0xA5	; 165
 272:	08 95       	ret

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
