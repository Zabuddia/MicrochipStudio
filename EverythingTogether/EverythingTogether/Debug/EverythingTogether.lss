
EverythingTogether.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  000026c0  00002794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e30  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  00005e30  00001e30  00001f04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000033  00803802  00803802  00002796  2**0
                  ALLOC
  4 .eeprom       00000002  00810000  00810000  00002796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .comment      0000005c  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000318  00000000  00000000  00002838  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000065f4  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002b7f  00000000  00000000  00009144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001ef9  00000000  00000000  0000bcc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000680  00000000  00000000  0000dbbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002380  00000000  00000000  0000e23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001257  00000000  00000000  000105bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000238  00000000  00000000  00011813  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      30:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_12>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      90:	38 09       	sbc	r19, r8
      92:	4a 09       	sbc	r20, r10
      94:	56 09       	sbc	r21, r6
      96:	5b 09       	sbc	r21, r11
      98:	5b 09       	sbc	r21, r11
      9a:	5b 09       	sbc	r21, r11
      9c:	5b 09       	sbc	r21, r11
      9e:	5b 09       	sbc	r21, r11
      a0:	4d 09       	sbc	r20, r13
      a2:	5b 09       	sbc	r21, r11
      a4:	5b 09       	sbc	r21, r11
      a6:	47 09       	sbc	r20, r7
      a8:	5b 09       	sbc	r21, r11
      aa:	5b 09       	sbc	r21, r11
      ac:	5b 09       	sbc	r21, r11
      ae:	3b 09       	sbc	r19, r11
      b0:	5b 09       	sbc	r21, r11
      b2:	59 09       	sbc	r21, r9
      b4:	44 09       	sbc	r20, r4
      b6:	3e 09       	sbc	r19, r14
      b8:	41 09       	sbc	r20, r1
      ba:	50 09       	sbc	r21, r0
      bc:	5b 09       	sbc	r21, r11
      be:	5b 09       	sbc	r21, r11
      c0:	53 09       	sbc	r21, r3

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	cd bf       	out	0x3d, r28	; 61
      ca:	df e3       	ldi	r29, 0x3F	; 63
      cc:	de bf       	out	0x3e, r29	; 62

000000ce <__do_copy_data>:
      ce:	18 e3       	ldi	r17, 0x38	; 56
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b8 e3       	ldi	r27, 0x38	; 56
      d4:	e0 ec       	ldi	r30, 0xC0	; 192
      d6:	f6 e2       	ldi	r31, 0x26	; 38
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a2 30       	cpi	r26, 0x02	; 2
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	28 e3       	ldi	r18, 0x38	; 56
      e6:	a2 e0       	ldi	r26, 0x02	; 2
      e8:	b8 e3       	ldi	r27, 0x38	; 56
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	a5 33       	cpi	r26, 0x35	; 53
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 c7 08 	call	0x118e	; 0x118e <main>
      f8:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <ADC_Button_Init>:
#include "Button.h"

void ADC_Button_Init(void) {
	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_8BIT_gc;
     100:	e0 e0       	ldi	r30, 0x00	; 0
     102:	f6 e0       	ldi	r31, 0x06	; 6
     104:	85 e0       	ldi	r24, 0x05	; 5
     106:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_REFSEL_VDDREF_gc;
     108:	80 e1       	ldi	r24, 0x10	; 16
     10a:	81 83       	std	Z+1, r24	; 0x01
     10c:	08 95       	ret

0000010e <ADC_Switch>:
}

void ADC_Switch(uint8_t btn) {
	switch (btn)
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	41 f0       	breq	.+16     	; 0x122 <ADC_Switch+0x14>
     112:	18 f0       	brcs	.+6      	; 0x11a <ADC_Switch+0xc>
     114:	82 30       	cpi	r24, 0x02	; 2
     116:	49 f0       	breq	.+18     	; 0x12a <ADC_Switch+0x1c>
     118:	08 95       	ret
	{
		case IGN_1:
			ADC0.MUXPOS = IGN_1_bm;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
     120:	08 95       	ret
		case IGN_2:
			ADC0.MUXPOS = IGN_2_bm;
     122:	8e e0       	ldi	r24, 0x0E	; 14
     124:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
     128:	08 95       	ret
		case HORN:
			ADC0.MUXPOS = HORN_bm;
     12a:	84 e0       	ldi	r24, 0x04	; 4
     12c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
     130:	08 95       	ret

00000132 <ADC_Init>:
			break;
	}
}

void ADC_Init(void) {
	ADC0.CTRLA = ADC_RESSEL_10BIT_gc; // Set ADC resolution to 10 bits
     132:	e0 e0       	ldi	r30, 0x00	; 0
     134:	f6 e0       	ldi	r31, 0x06	; 6
     136:	10 82       	st	Z, r1
	ADC0.CTRLB = ADC_SAMPNUM_ACC8_gc; // Accumulate 8 samples
     138:	83 e0       	ldi	r24, 0x03	; 3
     13a:	81 83       	std	Z+1, r24	; 0x01
	VREF.CTRLA = (VREF.CTRLA & ~VREF_ADC0REFSEL_gm) | VREF_ADC0REFSEL_2V5_gc; // Set reference to 2.5V
     13c:	a0 ea       	ldi	r26, 0xA0	; 160
     13e:	b0 e0       	ldi	r27, 0x00	; 0
     140:	8c 91       	ld	r24, X
     142:	8f 78       	andi	r24, 0x8F	; 143
     144:	80 62       	ori	r24, 0x20	; 32
     146:	8c 93       	st	X, r24
	VREF.CTRLB &= ~VREF_ADC0REFEN_bm;
     148:	11 96       	adiw	r26, 0x01	; 1
     14a:	8c 91       	ld	r24, X
     14c:	11 97       	sbiw	r26, 0x01	; 1
     14e:	8d 7f       	andi	r24, 0xFD	; 253
     150:	11 96       	adiw	r26, 0x01	; 1
     152:	8c 93       	st	X, r24
	ADC0.CTRLC = ADC_SAMPCAP_bm | ADC_REFSEL_INTREF_gc | ADC_PRESC_DIV2_gc; // Set sample capacitance, internal reference, and prescaler
     154:	80 e4       	ldi	r24, 0x40	; 64
     156:	82 83       	std	Z+2, r24	; 0x02
	ADC0.CALIB = ADC_DUTYCYC_DUTY25_gc; // Set duty cycle
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	86 8b       	std	Z+22, r24	; 0x16
	ADC0.CTRLA |= ADC_ENABLE_bm; // Enable the ADC
     15c:	80 81       	ld	r24, Z
     15e:	81 60       	ori	r24, 0x01	; 1
     160:	80 83       	st	Z, r24
     162:	08 95       	ret

00000164 <ADC_Read>:
}

uint32_t ADC_Read(ADC_MUXPOS_t input) {
	while (ADC0.COMMAND & ADC_STCONV_bm); // Wait if a conversion is in progress
     164:	90 91 08 06 	lds	r25, 0x0608	; 0x800608 <__RODATA_PM_OFFSET__+0x7fc608>
     168:	90 fd       	sbrc	r25, 0
     16a:	fc cf       	rjmp	.-8      	; 0x164 <ADC_Read>
	ADC0.MUXPOS = input; // Select the input channel
     16c:	e0 e0       	ldi	r30, 0x00	; 0
     16e:	f6 e0       	ldi	r31, 0x06	; 6
     170:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm; // Start a conversion
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	80 87       	std	Z+8, r24	; 0x08
	while ((ADC0.INTFLAGS & ADC_RESRDY_bm) == 0); // Wait for the result to be ready
     176:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7fc60b>
     17a:	80 ff       	sbrs	r24, 0
     17c:	fc cf       	rjmp	.-8      	; 0x176 <ADC_Read+0x12>
	return ADC0.RESL + (ADC0.RESH << 8); // Read the result
     17e:	e0 e0       	ldi	r30, 0x00	; 0
     180:	f6 e0       	ldi	r31, 0x06	; 6
     182:	80 89       	ldd	r24, Z+16	; 0x10
     184:	61 89       	ldd	r22, Z+17	; 0x11
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	76 2f       	mov	r23, r22
     18a:	66 27       	eor	r22, r22
     18c:	68 0f       	add	r22, r24
     18e:	71 1d       	adc	r23, r1
     190:	07 2e       	mov	r0, r23
     192:	00 0c       	add	r0, r0
     194:	88 0b       	sbc	r24, r24
     196:	99 0b       	sbc	r25, r25
}
     198:	08 95       	ret

0000019a <BTN_Pressed>:

uint8_t BTN_Pressed(uint8_t btn) {
	ADC_Switch(btn);
     19a:	0e 94 87 00 	call	0x10e	; 0x10e <ADC_Switch>
	ADC0.COMMAND = 0x01;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7fc608>
	while((!ADC0.INTFLAGS & 0x01));
     1a4:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7fc60b>
     1a8:	88 23       	and	r24, r24
     1aa:	e1 f3       	breq	.-8      	; 0x1a4 <BTN_Pressed+0xa>
	if (ADC0.RES > 0xF0) {
     1ac:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7fc610>
     1b0:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7fc611>
     1b4:	81 3f       	cpi	r24, 0xF1	; 241
     1b6:	91 05       	cpc	r25, r1
     1b8:	10 f0       	brcs	.+4      	; 0x1be <BTN_Pressed+0x24>
		return 1;
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	08 95       	ret
	} else {
		return 0;
     1be:	80 e0       	ldi	r24, 0x00	; 0
	}
     1c0:	08 95       	ret

000001c2 <LED_Init>:
	PORTF.OUTCLR = (0x01 << RED_LED);
	PORTF.OUTCLR = (0x01 << GREEN_LED);
}

void LED_On(uint8_t led) {
	PORTF.OUTSET = (0x01 << led);
     1c2:	e0 ea       	ldi	r30, 0xA0	; 160
     1c4:	f4 e0       	ldi	r31, 0x04	; 4
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	91 83       	std	Z+1, r25	; 0x01
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	81 83       	std	Z+1, r24	; 0x01
     1ce:	96 83       	std	Z+6, r25	; 0x06
     1d0:	86 83       	std	Z+6, r24	; 0x06
     1d2:	08 95       	ret

000001d4 <LED_Off>:
}

void LED_Off(uint8_t led) {
	PORTF.OUTCLR = (0x01 << led);
     1d4:	21 e0       	ldi	r18, 0x01	; 1
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <LED_Off+0xa>
     1da:	22 0f       	add	r18, r18
     1dc:	33 1f       	adc	r19, r19
     1de:	8a 95       	dec	r24
     1e0:	e2 f7       	brpl	.-8      	; 0x1da <LED_Off+0x6>
     1e2:	20 93 a6 04 	sts	0x04A6, r18	; 0x8004a6 <__RODATA_PM_OFFSET__+0x7fc4a6>
     1e6:	08 95       	ret

000001e8 <__vector_12>:

void ClearScreen(void);

void Reset(void);

ISR(TCB0_INT_vect) {
     1e8:	1f 92       	push	r1
     1ea:	0f 92       	push	r0
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	0f 92       	push	r0
     1f0:	11 24       	eor	r1, r1
     1f2:	2f 93       	push	r18
     1f4:	3f 93       	push	r19
     1f6:	4f 93       	push	r20
     1f8:	5f 93       	push	r21
     1fa:	6f 93       	push	r22
     1fc:	7f 93       	push	r23
     1fe:	8f 93       	push	r24
     200:	9f 93       	push	r25
     202:	af 93       	push	r26
     204:	bf 93       	push	r27
     206:	ef 93       	push	r30
     208:	ff 93       	push	r31
	TCB0.INTFLAGS = TCB_CAPT_bm;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7fca86>
	if (timerMode) {
     210:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <timerMode>
     214:	88 23       	and	r24, r24
     216:	19 f1       	breq	.+70     	; 0x25e <__vector_12+0x76>
		light_on_counter = 0;
     218:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <light_on_counter>
     21c:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <light_on_counter+0x1>
		TBMoverflowCount = 0;
     220:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     224:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
		overflowCount++;
     228:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <overflowCount>
     22c:	8f 5f       	subi	r24, 0xFF	; 255
     22e:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <overflowCount>
		if (overflowCount >= 100) {
     232:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <overflowCount>
     236:	84 36       	cpi	r24, 0x64	; 100
     238:	08 f4       	brcc	.+2      	; 0x23c <__vector_12+0x54>
     23a:	91 c0       	rjmp	.+290    	; 0x35e <__vector_12+0x176>
			overflowCount = 0;
     23c:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <overflowCount>
			counter++;
     240:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <counter>
     244:	8f 5f       	subi	r24, 0xFF	; 255
     246:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <counter>
			USART1_Transmit_Number(counter);
     24a:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <counter>
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 08 0b 	call	0x1610	; 0x1610 <USART1_Transmit_Number>
			USART1_Transmit_String("\n\r");
     254:	87 e6       	ldi	r24, 0x67	; 103
     256:	94 e6       	ldi	r25, 0x64	; 100
     258:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
     25c:	80 c0       	rjmp	.+256    	; 0x35e <__vector_12+0x176>
		}
	} else if (serialButtonLEDMode) {
     25e:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <serialButtonLEDMode>
     262:	88 23       	and	r24, r24
     264:	91 f0       	breq	.+36     	; 0x28a <__vector_12+0xa2>
		overflowCount = 0;
     266:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <overflowCount>
		counter = 0;
     26a:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <counter>
		TBMoverflowCount = 0;
     26e:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     272:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
		light_on_counter++;
     276:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <light_on_counter>
     27a:	90 91 12 38 	lds	r25, 0x3812	; 0x803812 <light_on_counter+0x1>
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <light_on_counter>
     284:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <light_on_counter+0x1>
     288:	6a c0       	rjmp	.+212    	; 0x35e <__vector_12+0x176>
	} else if (timerButtonMode) {
     28a:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <timerButtonMode>
     28e:	88 23       	and	r24, r24
     290:	09 f4       	brne	.+2      	; 0x294 <__vector_12+0xac>
     292:	65 c0       	rjmp	.+202    	; 0x35e <__vector_12+0x176>
		overflowCount = 0;
     294:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <overflowCount>
		counter = 0;
     298:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <counter>
		light_on_counter = 0;
     29c:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <light_on_counter>
     2a0:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <light_on_counter+0x1>
		if (ign1Pressed) {
     2a4:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <ign1Pressed>
     2a8:	88 23       	and	r24, r24
     2aa:	d9 f0       	breq	.+54     	; 0x2e2 <__vector_12+0xfa>
			TBMoverflowCount++;
     2ac:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     2b0:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     2b4:	01 96       	adiw	r24, 0x01	; 1
     2b6:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <TBMoverflowCount>
     2ba:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <TBMoverflowCount+0x1>
			if (TBMoverflowCount >= 100) {
     2be:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     2c2:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     2c6:	84 36       	cpi	r24, 0x64	; 100
     2c8:	91 05       	cpc	r25, r1
     2ca:	08 f4       	brcc	.+2      	; 0x2ce <__vector_12+0xe6>
     2cc:	48 c0       	rjmp	.+144    	; 0x35e <__vector_12+0x176>
				TBMoverflowCount = 0;
     2ce:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     2d2:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
				ign1Pressed = 0;
     2d6:	10 92 25 38 	sts	0x3825, r1	; 0x803825 <ign1Pressed>
				Set_Brightness_Red(0);
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
     2e0:	3e c0       	rjmp	.+124    	; 0x35e <__vector_12+0x176>
			}
		} else if (ign2Pressed) {
     2e2:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <ign2Pressed>
     2e6:	88 23       	and	r24, r24
     2e8:	d1 f0       	breq	.+52     	; 0x31e <__vector_12+0x136>
			TBMoverflowCount++;
     2ea:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     2ee:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <TBMoverflowCount>
     2f8:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <TBMoverflowCount+0x1>
			if (TBMoverflowCount >= 500) {
     2fc:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     300:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     304:	84 3f       	cpi	r24, 0xF4	; 244
     306:	91 40       	sbci	r25, 0x01	; 1
     308:	50 f1       	brcs	.+84     	; 0x35e <__vector_12+0x176>
				TBMoverflowCount = 0;
     30a:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     30e:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
				ign2Pressed = 0;
     312:	10 92 24 38 	sts	0x3824, r1	; 0x803824 <ign2Pressed>
				Set_Brightness_Green(0);
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
     31c:	20 c0       	rjmp	.+64     	; 0x35e <__vector_12+0x176>
			}
		} else if (hornPressed) {
     31e:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <hornPressed>
     322:	88 23       	and	r24, r24
     324:	e1 f0       	breq	.+56     	; 0x35e <__vector_12+0x176>
			TBMoverflowCount++;
     326:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     32a:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <TBMoverflowCount>
     334:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <TBMoverflowCount+0x1>
			if (TBMoverflowCount >= 1000) {
     338:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     33c:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     340:	88 3e       	cpi	r24, 0xE8	; 232
     342:	93 40       	sbci	r25, 0x03	; 3
     344:	60 f0       	brcs	.+24     	; 0x35e <__vector_12+0x176>
				TBMoverflowCount = 0;
     346:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     34a:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
				hornPressed = 0;
     34e:	10 92 23 38 	sts	0x3823, r1	; 0x803823 <hornPressed>
				Set_Brightness_Red(0);
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
				Set_Brightness_Green(0);
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
			}
		}
	}
	
}
     35e:	ff 91       	pop	r31
     360:	ef 91       	pop	r30
     362:	bf 91       	pop	r27
     364:	af 91       	pop	r26
     366:	9f 91       	pop	r25
     368:	8f 91       	pop	r24
     36a:	7f 91       	pop	r23
     36c:	6f 91       	pop	r22
     36e:	5f 91       	pop	r21
     370:	4f 91       	pop	r20
     372:	3f 91       	pop	r19
     374:	2f 91       	pop	r18
     376:	0f 90       	pop	r0
     378:	0f be       	out	0x3f, r0	; 63
     37a:	0f 90       	pop	r0
     37c:	1f 90       	pop	r1
     37e:	18 95       	reti

00000380 <ReadAccelerometerMode>:
		}
		USART1_Transmit_String("\n\r");
    }
}

void ReadAccelerometerMode(void) {
     380:	cf 93       	push	r28
	USART1_Transmit_String("You are in Read accelerometer mode (press q to exit)\n\r");
     382:	80 e3       	ldi	r24, 0x30	; 48
     384:	9e e5       	ldi	r25, 0x5E	; 94
     386:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("This tells you the x, y, and z accelerations and the total acceleration\n\r");
     38a:	87 e6       	ldi	r24, 0x67	; 103
     38c:	9e e5       	ldi	r25, 0x5E	; 94
     38e:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	uint8_t quit = 0;
     392:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     394:	47 c0       	rjmp	.+142    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		wdt_reset();
     396:	a8 95       	wdr
		FXLS8967_ReadAccel(&x, &y, &z, &a);
     398:	28 e0       	ldi	r18, 0x08	; 8
     39a:	38 e3       	ldi	r19, 0x38	; 56
     39c:	4a e0       	ldi	r20, 0x0A	; 10
     39e:	58 e3       	ldi	r21, 0x38	; 56
     3a0:	6c e0       	ldi	r22, 0x0C	; 12
     3a2:	78 e3       	ldi	r23, 0x38	; 56
     3a4:	8e e0       	ldi	r24, 0x0E	; 14
     3a6:	98 e3       	ldi	r25, 0x38	; 56
     3a8:	0e 94 fe 09 	call	0x13fc	; 0x13fc <FXLS8967_ReadAccel>
		USART1_Transmit_String("X: ");
     3ac:	81 eb       	ldi	r24, 0xB1	; 177
     3ae:	9e e5       	ldi	r25, 0x5E	; 94
     3b0:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_Number(x);
     3b4:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <x>
     3b8:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <x+0x1>
     3bc:	0e 94 08 0b 	call	0x1610	; 0x1610 <USART1_Transmit_Number>
		USART1_Transmit_String(" Y: ");
     3c0:	85 eb       	ldi	r24, 0xB5	; 181
     3c2:	9e e5       	ldi	r25, 0x5E	; 94
     3c4:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_Number(y);
     3c8:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <y>
     3cc:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <y+0x1>
     3d0:	0e 94 08 0b 	call	0x1610	; 0x1610 <USART1_Transmit_Number>
		USART1_Transmit_String(" Z: ");
     3d4:	8a eb       	ldi	r24, 0xBA	; 186
     3d6:	9e e5       	ldi	r25, 0x5E	; 94
     3d8:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_Number(z);
     3dc:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <z>
     3e0:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <z+0x1>
     3e4:	0e 94 08 0b 	call	0x1610	; 0x1610 <USART1_Transmit_Number>
		USART1_Transmit_String(" A: ");
     3e8:	8f eb       	ldi	r24, 0xBF	; 191
     3ea:	9e e5       	ldi	r25, 0x5E	; 94
     3ec:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_Number(a);
     3f0:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <a>
     3f4:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <a+0x1>
     3f8:	0e 94 08 0b 	call	0x1610	; 0x1610 <USART1_Transmit_Number>
		USART1_Transmit_String("\n\r");
     3fc:	87 e6       	ldi	r24, 0x67	; 103
     3fe:	94 e6       	ldi	r25, 0x64	; 100
     400:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     404:	2f ef       	ldi	r18, 0xFF	; 255
     406:	80 e7       	ldi	r24, 0x70	; 112
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	21 50       	subi	r18, 0x01	; 1
     40c:	80 40       	sbci	r24, 0x00	; 0
     40e:	90 40       	sbci	r25, 0x00	; 0
     410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     414:	00 00       	nop
		_delay_ms(300);
		if (USART1.STATUS & USART_RXCIF_bm) {
     416:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     41a:	88 23       	and	r24, r24
     41c:	1c f4       	brge	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			quit = USART1_Receive_No_Wait();
     41e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <USART1_Receive_No_Wait>
     422:	c8 2f       	mov	r28, r24

void ReadAccelerometerMode(void) {
	USART1_Transmit_String("You are in Read accelerometer mode (press q to exit)\n\r");
	USART1_Transmit_String("This tells you the x, y, and z accelerations and the total acceleration\n\r");
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     424:	8c 2f       	mov	r24, r28
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
     42c:	81 37       	cpi	r24, 0x71	; 113
     42e:	91 05       	cpc	r25, r1
     430:	09 f0       	breq	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	b1 cf       	rjmp	.-158    	; 0x396 <ReadAccelerometerMode+0x16>
		_delay_ms(300);
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
}
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <PWMPerception>:

void PWMPerception(void) {
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
	bool ign1_pressed = BTN_Pressed(IGN_1);
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 cd 00 	call	0x19a	; 0x19a <BTN_Pressed>
     442:	c8 2f       	mov	r28, r24
	bool ign2_pressed = BTN_Pressed(IGN_2);
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 cd 00 	call	0x19a	; 0x19a <BTN_Pressed>
     44a:	d8 2f       	mov	r29, r24
	bool horn_pressed = BTN_Pressed(HORN);
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	0e 94 cd 00 	call	0x19a	; 0x19a <BTN_Pressed>
	if (ign1_pressed && !ign2_pressed && !horn_pressed) {
     452:	cc 23       	and	r28, r28
     454:	41 f0       	breq	.+16     	; 0x466 <PWMPerception+0x2e>
     456:	d1 11       	cpse	r29, r1
     458:	06 c0       	rjmp	.+12     	; 0x466 <PWMPerception+0x2e>
     45a:	81 11       	cpse	r24, r1
     45c:	04 c0       	rjmp	.+8      	; 0x466 <PWMPerception+0x2e>
		PWMIGN1_pressed = true;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <PWMIGN1_pressed>
     464:	1a c0       	rjmp	.+52     	; 0x49a <PWMPerception+0x62>
	} else if (!ign1_pressed && ign2_pressed && !horn_pressed) {
     466:	c1 11       	cpse	r28, r1
     468:	08 c0       	rjmp	.+16     	; 0x47a <PWMPerception+0x42>
     46a:	dd 23       	and	r29, r29
     46c:	31 f0       	breq	.+12     	; 0x47a <PWMPerception+0x42>
     46e:	81 11       	cpse	r24, r1
     470:	04 c0       	rjmp	.+8      	; 0x47a <PWMPerception+0x42>
		PWMIGN2_pressed = true;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <PWMIGN2_pressed>
     478:	10 c0       	rjmp	.+32     	; 0x49a <PWMPerception+0x62>
	} else if (!ign1_pressed && !ign2_pressed && horn_pressed) {
     47a:	c1 11       	cpse	r28, r1
     47c:	08 c0       	rjmp	.+16     	; 0x48e <PWMPerception+0x56>
     47e:	d1 11       	cpse	r29, r1
     480:	06 c0       	rjmp	.+12     	; 0x48e <PWMPerception+0x56>
     482:	88 23       	and	r24, r24
     484:	21 f0       	breq	.+8      	; 0x48e <PWMPerception+0x56>
		PWMHorn_pressed = true;
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <PWMHorn_pressed>
     48c:	06 c0       	rjmp	.+12     	; 0x49a <PWMPerception+0x62>
	} else {
		PWMIGN1_pressed = false;
     48e:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <PWMIGN1_pressed>
		PWMIGN2_pressed = false;
     492:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <PWMIGN2_pressed>
		PWMHorn_pressed = false;
     496:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <PWMHorn_pressed>
	}
}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <PWMIGN1>:

void PWMIGN1(void) {
	static uint8_t IGN1_state = 0;
	switch (IGN1_state)
     4a0:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <IGN1_state.3820>
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	71 f0       	breq	.+28     	; 0x4c4 <PWMIGN1+0x24>
     4a8:	18 f0       	brcs	.+6      	; 0x4b0 <PWMIGN1+0x10>
     4aa:	82 30       	cpi	r24, 0x02	; 2
     4ac:	99 f0       	breq	.+38     	; 0x4d4 <PWMIGN1+0x34>
     4ae:	08 95       	ret
	{
	case 0:
		decrease_brightness = false;
     4b0:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <decrease_brightness>
		if (PWMIGN1_pressed) {
     4b4:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <PWMIGN1_pressed>
     4b8:	88 23       	and	r24, r24
     4ba:	89 f0       	breq	.+34     	; 0x4de <PWMIGN1+0x3e>
			IGN1_state = 1;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <IGN1_state.3820>
     4c2:	08 95       	ret
		}
		break;
	case 1:
		if (!PWMIGN1_pressed) {
     4c4:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <PWMIGN1_pressed>
     4c8:	81 11       	cpse	r24, r1
     4ca:	09 c0       	rjmp	.+18     	; 0x4de <PWMIGN1+0x3e>
			IGN1_state = 2;
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <IGN1_state.3820>
     4d2:	08 95       	ret
		}
		break;
	case 2:
		decrease_brightness = true;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <decrease_brightness>
		IGN1_state = 0;
     4da:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <IGN1_state.3820>
     4de:	08 95       	ret

000004e0 <PWMIGN2>:
	}
}

void PWMIGN2(void) {
	static uint8_t IGN2_state = 0;
	switch (IGN2_state)
     4e0:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <IGN2_state.3828>
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	71 f0       	breq	.+28     	; 0x504 <PWMIGN2+0x24>
     4e8:	18 f0       	brcs	.+6      	; 0x4f0 <PWMIGN2+0x10>
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	99 f0       	breq	.+38     	; 0x514 <PWMIGN2+0x34>
     4ee:	08 95       	ret
	{
	case 0:
		increase_brightness = false;
     4f0:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <increase_brightness>
		if (PWMIGN2_pressed) {
     4f4:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <PWMIGN2_pressed>
     4f8:	88 23       	and	r24, r24
     4fa:	89 f0       	breq	.+34     	; 0x51e <PWMIGN2+0x3e>
			IGN2_state = 1;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <IGN2_state.3828>
     502:	08 95       	ret
		}
		break;
	case 1:
		if (!PWMIGN2_pressed) {
     504:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <PWMIGN2_pressed>
     508:	81 11       	cpse	r24, r1
     50a:	09 c0       	rjmp	.+18     	; 0x51e <PWMIGN2+0x3e>
			IGN2_state = 2;
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <IGN2_state.3828>
     512:	08 95       	ret
		}
		break;
	case 2:
		increase_brightness = true;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <increase_brightness>
		IGN2_state = 0;
     51a:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <IGN2_state.3828>
     51e:	08 95       	ret

00000520 <PWMHORN>:
	}
}

void PWMHORN(void) {
	static uint8_t Horn_state = 0;
	switch (Horn_state)
     520:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <Horn_state.3836>
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	71 f0       	breq	.+28     	; 0x544 <PWMHORN+0x24>
     528:	18 f0       	brcs	.+6      	; 0x530 <PWMHORN+0x10>
     52a:	82 30       	cpi	r24, 0x02	; 2
     52c:	99 f0       	breq	.+38     	; 0x554 <PWMHORN+0x34>
     52e:	08 95       	ret
	{
	case 0:
		change_light_color = false;
     530:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <change_light_color>
		if (PWMHorn_pressed) {
     534:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <PWMHorn_pressed>
     538:	88 23       	and	r24, r24
     53a:	89 f0       	breq	.+34     	; 0x55e <PWMHORN+0x3e>
			Horn_state = 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <Horn_state.3836>
     542:	08 95       	ret
		}
		break;
	case 1:
		if (!PWMHorn_pressed) {
     544:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <PWMHorn_pressed>
     548:	81 11       	cpse	r24, r1
     54a:	09 c0       	rjmp	.+18     	; 0x55e <PWMHORN+0x3e>
			Horn_state = 2;
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <Horn_state.3836>
     552:	08 95       	ret
		}
		break;
	case 2:
		change_light_color = true;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <change_light_color>
		Horn_state = 0;
     55a:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <Horn_state.3836>
     55e:	08 95       	ret

00000560 <PWMPlanning>:
		break;
	}
}

void PWMPlanning(void) {
	PWMIGN1();
     560:	0e 94 50 02 	call	0x4a0	; 0x4a0 <PWMIGN1>
	PWMIGN2();
     564:	0e 94 70 02 	call	0x4e0	; 0x4e0 <PWMIGN2>
	PWMHORN();
     568:	0e 94 90 02 	call	0x520	; 0x520 <PWMHORN>
     56c:	08 95       	ret

0000056e <PWMAction>:
}

void PWMAction(void) {
	if (change_light_color) {
     56e:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <change_light_color>
     572:	88 23       	and	r24, r24
     574:	59 f0       	breq	.+22     	; 0x58c <PWMAction+0x1e>
		light_color++;
     576:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <light_color>
     57a:	8f 5f       	subi	r24, 0xFF	; 255
     57c:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <light_color>
		if (light_color > OFF) light_color = RED;
     580:	84 30       	cpi	r24, 0x04	; 4
     582:	10 f0       	brcs	.+4      	; 0x588 <PWMAction+0x1a>
     584:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <light_color>
		change_light_color = 0;
     588:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <change_light_color>
	}
	if (increase_brightness) {
     58c:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <increase_brightness>
     590:	88 23       	and	r24, r24
     592:	39 f0       	breq	.+14     	; 0x5a2 <PWMAction+0x34>
		if (brightness < 250) brightness += 10;
     594:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     598:	8a 3f       	cpi	r24, 0xFA	; 250
     59a:	18 f4       	brcc	.+6      	; 0x5a2 <PWMAction+0x34>
     59c:	86 5f       	subi	r24, 0xF6	; 246
     59e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}
	if (decrease_brightness) {
     5a2:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <decrease_brightness>
     5a6:	88 23       	and	r24, r24
     5a8:	39 f0       	breq	.+14     	; 0x5b8 <PWMAction+0x4a>
		if (brightness > 0) brightness -= 10;
     5aa:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     5ae:	88 23       	and	r24, r24
     5b0:	19 f0       	breq	.+6      	; 0x5b8 <PWMAction+0x4a>
     5b2:	8a 50       	subi	r24, 0x0A	; 10
     5b4:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}
	switch (light_color)
     5b8:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <light_color>
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	71 f0       	breq	.+28     	; 0x5dc <PWMAction+0x6e>
     5c0:	28 f0       	brcs	.+10     	; 0x5cc <PWMAction+0x5e>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	99 f0       	breq	.+38     	; 0x5ec <PWMAction+0x7e>
     5c6:	83 30       	cpi	r24, 0x03	; 3
     5c8:	d1 f0       	breq	.+52     	; 0x5fe <PWMAction+0x90>
     5ca:	08 95       	ret
	{
	case RED:
		Set_Brightness_Red(brightness);
     5cc:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     5d0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
		Set_Brightness_Green(0);
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
		break;
     5da:	08 95       	ret
	case GREEN:
		Set_Brightness_Red(0);
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
		Set_Brightness_Green(brightness);
     5e2:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     5e6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
		break;
     5ea:	08 95       	ret
	case YELLOW:
		Set_Brightness_Red(brightness);
     5ec:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     5f0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
		Set_Brightness_Green(brightness);
     5f4:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     5f8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
		break;
     5fc:	08 95       	ret
	case OFF:
		Set_Brightness_Red(0);
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
		Set_Brightness_Green(0);
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
     60a:	08 95       	ret

0000060c <PWMMode>:
		break;
	}
}

void PWMMode(void) {
     60c:	cf 93       	push	r28
	USART1_Transmit_String("You are in PWM mode (press q to exit)\n\r");
     60e:	84 ec       	ldi	r24, 0xC4	; 196
     610:	9e e5       	ldi	r25, 0x5E	; 94
     612:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("You can change the color with the HORN button and make the light dimmer with the IGN1 button and brighter with the IGN2 button\n\r");
     616:	8c ee       	ldi	r24, 0xEC	; 236
     618:	9e e5       	ldi	r25, 0x5E	; 94
     61a:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	uint8_t quit = 0;
     61e:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     620:	0e c0       	rjmp	.+28     	; 0x63e <PWMMode+0x32>
		wdt_reset();
     622:	a8 95       	wdr
		PWMPerception();
     624:	0e 94 1c 02 	call	0x438	; 0x438 <PWMPerception>
		PWMPlanning();
     628:	0e 94 b0 02 	call	0x560	; 0x560 <PWMPlanning>
		PWMAction();
     62c:	0e 94 b7 02 	call	0x56e	; 0x56e <PWMAction>
		if (USART1.STATUS & USART_RXCIF_bm) {
     630:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     634:	88 23       	and	r24, r24
     636:	1c f4       	brge	.+6      	; 0x63e <PWMMode+0x32>
			quit = USART1_Receive_No_Wait();
     638:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <USART1_Receive_No_Wait>
     63c:	c8 2f       	mov	r28, r24

void PWMMode(void) {
	USART1_Transmit_String("You are in PWM mode (press q to exit)\n\r");
	USART1_Transmit_String("You can change the color with the HORN button and make the light dimmer with the IGN1 button and brighter with the IGN2 button\n\r");
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     63e:	8c 2f       	mov	r24, r28
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
     646:	81 37       	cpi	r24, 0x71	; 113
     648:	91 05       	cpc	r25, r1
     64a:	59 f7       	brne	.-42     	; 0x622 <PWMMode+0x16>
		PWMAction();
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Set_Brightness_Red(0);
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
}
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <TimerMode>:

void TimerMode(void) {
     65c:	cf 93       	push	r28
	USART1_Transmit_String("You are in Timer mode (press q to exit)\n\r");
     65e:	8d e6       	ldi	r24, 0x6D	; 109
     660:	9f e5       	ldi	r25, 0x5F	; 95
     662:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("This tells how many seconds have passed\n\r");
     666:	87 e9       	ldi	r24, 0x97	; 151
     668:	9f e5       	ldi	r25, 0x5F	; 95
     66a:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	Timer_Start();
     66e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Timer_Start>
	timerMode = true;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <timerMode>
	uint8_t quit = 0;
     678:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     67a:	08 c0       	rjmp	.+16     	; 0x68c <TimerMode+0x30>
		wdt_reset();
     67c:	a8 95       	wdr
		if (USART1.STATUS & USART_RXCIF_bm) {
     67e:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     682:	88 23       	and	r24, r24
     684:	1c f4       	brge	.+6      	; 0x68c <TimerMode+0x30>
			quit = USART1_Receive_No_Wait();
     686:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <USART1_Receive_No_Wait>
     68a:	c8 2f       	mov	r28, r24
	USART1_Transmit_String("You are in Timer mode (press q to exit)\n\r");
	USART1_Transmit_String("This tells how many seconds have passed\n\r");
	Timer_Start();
	timerMode = true;
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     68c:	8c 2f       	mov	r24, r28
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
     694:	81 37       	cpi	r24, 0x71	; 113
     696:	91 05       	cpc	r25, r1
     698:	89 f7       	brne	.-30     	; 0x67c <TimerMode+0x20>
		wdt_reset();
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Timer_Stop();
     69a:	0e 94 ae 0a 	call	0x155c	; 0x155c <Timer_Stop>
	counter = 0;
     69e:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <counter>
	overflowCount = 0;
     6a2:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <overflowCount>
	timerMode = false;
     6a6:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <timerMode>
}
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <TimerButtonMode>:

void TimerButtonMode(void) {
     6ae:	cf 93       	push	r28
	USART1_Transmit_String("You are in Timer button mode (press q to exit)\n\r");
     6b0:	81 ec       	ldi	r24, 0xC1	; 193
     6b2:	9f e5       	ldi	r25, 0x5F	; 95
     6b4:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("Pressing IGN1 turns the red light on for 1 second. IGN2 turns the green light on for 5 seconds. HORN turns the yellow light on for 10 seconds\n\r");
     6b8:	82 ef       	ldi	r24, 0xF2	; 242
     6ba:	9f e5       	ldi	r25, 0x5F	; 95
     6bc:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	Timer_Start();
     6c0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Timer_Start>
	timerButtonMode = true;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <timerButtonMode>
	uint8_t quit = 0;
     6ca:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     6cc:	46 c0       	rjmp	.+140    	; 0x75a <TimerButtonMode+0xac>
		wdt_reset();
     6ce:	a8 95       	wdr
		if (BTN_Pressed(IGN_1) && !ign2Pressed && !hornPressed) {
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 cd 00 	call	0x19a	; 0x19a <BTN_Pressed>
     6d6:	88 23       	and	r24, r24
     6d8:	79 f0       	breq	.+30     	; 0x6f8 <TimerButtonMode+0x4a>
     6da:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <ign2Pressed>
     6de:	81 11       	cpse	r24, r1
     6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <TimerButtonMode+0x4a>
     6e2:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <hornPressed>
     6e6:	81 11       	cpse	r24, r1
     6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <TimerButtonMode+0x4a>
			Set_Brightness_Red(255);
     6ea:	8f ef       	ldi	r24, 0xFF	; 255
     6ec:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			ign1Pressed = 1;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 25 38 	sts	0x3825, r24	; 0x803825 <ign1Pressed>
     6f6:	2a c0       	rjmp	.+84     	; 0x74c <TimerButtonMode+0x9e>
		} else if (BTN_Pressed(IGN_2) && !ign1Pressed && !hornPressed) {
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	0e 94 cd 00 	call	0x19a	; 0x19a <BTN_Pressed>
     6fe:	88 23       	and	r24, r24
     700:	79 f0       	breq	.+30     	; 0x720 <TimerButtonMode+0x72>
     702:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <ign1Pressed>
     706:	81 11       	cpse	r24, r1
     708:	0b c0       	rjmp	.+22     	; 0x720 <TimerButtonMode+0x72>
     70a:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <hornPressed>
     70e:	81 11       	cpse	r24, r1
     710:	07 c0       	rjmp	.+14     	; 0x720 <TimerButtonMode+0x72>
			Set_Brightness_Green(255);
     712:	8f ef       	ldi	r24, 0xFF	; 255
     714:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
			ign2Pressed = 1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <ign2Pressed>
     71e:	16 c0       	rjmp	.+44     	; 0x74c <TimerButtonMode+0x9e>
		} else if (BTN_Pressed(HORN) && !ign1Pressed && !ign2Pressed) {
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	0e 94 cd 00 	call	0x19a	; 0x19a <BTN_Pressed>
     726:	88 23       	and	r24, r24
     728:	89 f0       	breq	.+34     	; 0x74c <TimerButtonMode+0x9e>
     72a:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <ign1Pressed>
     72e:	81 11       	cpse	r24, r1
     730:	0d c0       	rjmp	.+26     	; 0x74c <TimerButtonMode+0x9e>
     732:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <ign2Pressed>
     736:	81 11       	cpse	r24, r1
     738:	09 c0       	rjmp	.+18     	; 0x74c <TimerButtonMode+0x9e>
			Set_Brightness_Red(255);
     73a:	8f ef       	ldi	r24, 0xFF	; 255
     73c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			Set_Brightness_Green(255);
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
			hornPressed = 1;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 23 38 	sts	0x3823, r24	; 0x803823 <hornPressed>
		}
		if (USART1.STATUS & USART_RXCIF_bm) {
     74c:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     750:	88 23       	and	r24, r24
     752:	1c f4       	brge	.+6      	; 0x75a <TimerButtonMode+0xac>
			quit = USART1_Receive_No_Wait();
     754:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <USART1_Receive_No_Wait>
     758:	c8 2f       	mov	r28, r24
	USART1_Transmit_String("You are in Timer button mode (press q to exit)\n\r");
	USART1_Transmit_String("Pressing IGN1 turns the red light on for 1 second. IGN2 turns the green light on for 5 seconds. HORN turns the yellow light on for 10 seconds\n\r");
	Timer_Start();
	timerButtonMode = true;
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     75a:	8c 2f       	mov	r24, r28
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
     762:	81 37       	cpi	r24, 0x71	; 113
     764:	91 05       	cpc	r25, r1
     766:	09 f0       	breq	.+2      	; 0x76a <TimerButtonMode+0xbc>
     768:	b2 cf       	rjmp	.-156    	; 0x6ce <TimerButtonMode+0x20>
		}
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Timer_Stop();
     76a:	0e 94 ae 0a 	call	0x155c	; 0x155c <Timer_Stop>
	TBMoverflowCount = 0;
     76e:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     772:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
	timerButtonMode = false;
     776:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <timerButtonMode>
	Set_Brightness_Red(0);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
}
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <SerialCommunicationMode>:

void SerialCommunicationMode(void) {
     78a:	cf 93       	push	r28
	USART1_Transmit_String("You are in Serial communication mode (press q to exit)\n\r");
     78c:	82 e8       	ldi	r24, 0x82	; 130
     78e:	90 e6       	ldi	r25, 0x60	; 96
     790:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("Anything you type will be sent back to you\n\r");
     794:	8b eb       	ldi	r24, 0xBB	; 187
     796:	90 e6       	ldi	r25, 0x60	; 96
     798:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	uint8_t message = 0;
     79c:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(message) != 'q') {
     79e:	05 c0       	rjmp	.+10     	; 0x7aa <SerialCommunicationMode+0x20>
		message = USART1_Receive();
     7a0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <USART1_Receive>
     7a4:	c8 2f       	mov	r28, r24
		USART1_Transmit(message);
     7a6:	0e 94 01 0b 	call	0x1602	; 0x1602 <USART1_Transmit>

void SerialCommunicationMode(void) {
	USART1_Transmit_String("You are in Serial communication mode (press q to exit)\n\r");
	USART1_Transmit_String("Anything you type will be sent back to you\n\r");
	uint8_t message = 0;
	while (tolower(message) != 'q') {
     7aa:	8c 2f       	mov	r24, r28
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
     7b2:	81 37       	cpi	r24, 0x71	; 113
     7b4:	91 05       	cpc	r25, r1
     7b6:	a1 f7       	brne	.-24     	; 0x7a0 <SerialCommunicationMode+0x16>
		message = USART1_Receive();
		USART1_Transmit(message);
	}
	USART1_Transmit_String("\n\r");
     7b8:	87 e6       	ldi	r24, 0x67	; 103
     7ba:	94 e6       	ldi	r25, 0x64	; 100
     7bc:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
}
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <SBLPerceive_Input>:
}

void SBLPerceive_Input(void) {
	uint8_t input = 0;
	do {
		wdt_reset();
     7c4:	a8 95       	wdr
		input = USART1_Receive();
     7c6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <USART1_Receive>
		input = toupper(input);
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <toupper>
     7d0:	9c 01       	movw	r18, r24
	} while (!((input == 'G') || (input == 'R') || (input == 'Y')));
     7d2:	87 34       	cpi	r24, 0x47	; 71
     7d4:	21 f0       	breq	.+8      	; 0x7de <SBLPerceive_Input+0x1a>
     7d6:	82 35       	cpi	r24, 0x52	; 82
     7d8:	11 f0       	breq	.+4      	; 0x7de <SBLPerceive_Input+0x1a>
     7da:	89 35       	cpi	r24, 0x59	; 89
     7dc:	99 f7       	brne	.-26     	; 0x7c4 <SBLPerceive_Input>
		
	switch (input)
     7de:	33 27       	eor	r19, r19
     7e0:	22 35       	cpi	r18, 0x52	; 82
     7e2:	31 05       	cpc	r19, r1
     7e4:	39 f0       	breq	.+14     	; 0x7f4 <SBLPerceive_Input+0x30>
     7e6:	29 35       	cpi	r18, 0x59	; 89
     7e8:	31 05       	cpc	r19, r1
     7ea:	a1 f0       	breq	.+40     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     7ec:	27 34       	cpi	r18, 0x47	; 71
     7ee:	31 05       	cpc	r19, r1
     7f0:	c9 f4       	brne	.+50     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     7f2:	08 c0       	rjmp	.+16     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	{
	case 'R':
		Input_R = true;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 18 38 	sts	0x3818, r24	; 0x803818 <Input_R>
		Input_G = false;
     7fa:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <Input_G>
		Input_Y = false;
     7fe:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <Input_Y>
		break;
     802:	08 95       	ret
	case 'G':
		Input_G = true;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <Input_G>
		Input_R = false;
     80a:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <Input_R>
		Input_Y = false;
     80e:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <Input_Y>
		break;
     812:	08 95       	ret
	case 'Y':
		Input_Y = true;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <Input_Y>
		Input_G = false;
     81a:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <Input_G>
		Input_R = false;
     81e:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <Input_R>
		break;
     822:	08 95       	ret
	default:
		Input_R = false;
     824:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <Input_R>
		Input_G = false;
     828:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <Input_G>
		Input_Y = false;
     82c:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <Input_Y>
     830:	08 95       	ret

00000832 <SBLPerceive_Buttons>:
		USART1_Transmit(message);
	}
	USART1_Transmit_String("\n\r");
}

void SBLPerceive_Buttons(void) {
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
	bool ign1_pressed = BTN_Pressed(IGN_1);
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	0e 94 cd 00 	call	0x19a	; 0x19a <BTN_Pressed>
     83c:	c8 2f       	mov	r28, r24
	bool ign2_pressed = BTN_Pressed(IGN_2);
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 cd 00 	call	0x19a	; 0x19a <BTN_Pressed>
     844:	d8 2f       	mov	r29, r24
	bool horn_pressed = BTN_Pressed(HORN);
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	0e 94 cd 00 	call	0x19a	; 0x19a <BTN_Pressed>
	if (ign1_pressed && !ign2_pressed && !horn_pressed) {
     84c:	cc 23       	and	r28, r28
     84e:	41 f0       	breq	.+16     	; 0x860 <SBLPerceive_Buttons+0x2e>
     850:	d1 11       	cpse	r29, r1
     852:	06 c0       	rjmp	.+12     	; 0x860 <SBLPerceive_Buttons+0x2e>
     854:	81 11       	cpse	r24, r1
     856:	04 c0       	rjmp	.+8      	; 0x860 <SBLPerceive_Buttons+0x2e>
		IGN1_pressed = true;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <IGN1_pressed>
     85e:	36 c0       	rjmp	.+108    	; 0x8cc <SBLPerceive_Buttons+0x9a>
	} else if (!ign1_pressed && ign2_pressed && !horn_pressed) {
     860:	c1 11       	cpse	r28, r1
     862:	08 c0       	rjmp	.+16     	; 0x874 <SBLPerceive_Buttons+0x42>
     864:	dd 23       	and	r29, r29
     866:	31 f0       	breq	.+12     	; 0x874 <SBLPerceive_Buttons+0x42>
     868:	81 11       	cpse	r24, r1
     86a:	04 c0       	rjmp	.+8      	; 0x874 <SBLPerceive_Buttons+0x42>
		IGN2_pressed = true;
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	80 93 20 38 	sts	0x3820, r24	; 0x803820 <IGN2_pressed>
     872:	2c c0       	rjmp	.+88     	; 0x8cc <SBLPerceive_Buttons+0x9a>
	} else if (!ign1_pressed && !ign2_pressed && horn_pressed) {
     874:	c1 11       	cpse	r28, r1
     876:	08 c0       	rjmp	.+16     	; 0x888 <SBLPerceive_Buttons+0x56>
     878:	d1 11       	cpse	r29, r1
     87a:	06 c0       	rjmp	.+12     	; 0x888 <SBLPerceive_Buttons+0x56>
     87c:	88 23       	and	r24, r24
     87e:	21 f0       	breq	.+8      	; 0x888 <SBLPerceive_Buttons+0x56>
		Horn_pressed = true;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <Horn_pressed>
     886:	22 c0       	rjmp	.+68     	; 0x8cc <SBLPerceive_Buttons+0x9a>
	} else if (ign1_pressed && ign2_pressed && horn_pressed) {
     888:	cc 23       	and	r28, r28
     88a:	d1 f0       	breq	.+52     	; 0x8c0 <SBLPerceive_Buttons+0x8e>
     88c:	dd 23       	and	r29, r29
     88e:	c1 f0       	breq	.+48     	; 0x8c0 <SBLPerceive_Buttons+0x8e>
     890:	88 23       	and	r24, r24
     892:	b1 f0       	breq	.+44     	; 0x8c0 <SBLPerceive_Buttons+0x8e>
		Get_input = true;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <Get_input>
		IGN1_pressed = false;
     89a:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <IGN1_pressed>
		IGN2_pressed = false;
     89e:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <IGN2_pressed>
		Horn_pressed = false;
     8a2:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <Horn_pressed>
		LED_Off(RED_LED);
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LED_Off>
		LED_Off(GREEN_LED);
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LED_Off>
		USART1_Transmit_String("Give the letter of the light you want to turn on:\r\n");
     8b2:	88 ee       	ldi	r24, 0xE8	; 232
     8b4:	90 e6       	ldi	r25, 0x60	; 96
     8b6:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		SBLPerceive_Input();
     8ba:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <SBLPerceive_Input>
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <SBLPerceive_Buttons+0x9a>
	} else {
		IGN1_pressed = false;
     8c0:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <IGN1_pressed>
		IGN2_pressed = false;
     8c4:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <IGN2_pressed>
		Horn_pressed = false;
     8c8:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <Horn_pressed>
	}
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <SBLPerception>:
		Input_Y = false;
	}
}

void SBLPerception(void) {
	SBLPerceive_Buttons();
     8d2:	0e 94 19 04 	call	0x832	; 0x832 <SBLPerceive_Buttons>
     8d6:	08 95       	ret

000008d8 <SBLIGN1>:
}

void SBLIGN1(void) {
	static uint8_t IGN1_state = 0;
	switch (IGN1_state)
     8d8:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <IGN1_state.3903>
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	81 f0       	breq	.+32     	; 0x900 <SBLIGN1+0x28>
     8e0:	18 f0       	brcs	.+6      	; 0x8e8 <SBLIGN1+0x10>
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	c1 f0       	breq	.+48     	; 0x916 <SBLIGN1+0x3e>
     8e6:	08 95       	ret
	{
	case 0:
		Send_IGN1_message = false;
     8e8:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <Send_IGN1_message>
		Turn_red_on = false;
     8ec:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <Turn_red_on>
		if (IGN1_pressed) {
     8f0:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <IGN1_pressed>
     8f4:	88 23       	and	r24, r24
     8f6:	a1 f0       	breq	.+40     	; 0x920 <SBLIGN1+0x48>
			IGN1_state = 1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <IGN1_state.3903>
     8fe:	08 95       	ret
		}
		break;
	case 1:
		Turn_red_on = true;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <Turn_red_on>
		if (!IGN1_pressed) {
     906:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <IGN1_pressed>
     90a:	81 11       	cpse	r24, r1
     90c:	09 c0       	rjmp	.+18     	; 0x920 <SBLIGN1+0x48>
			IGN1_state = 2;
     90e:	82 e0       	ldi	r24, 0x02	; 2
     910:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <IGN1_state.3903>
     914:	08 95       	ret
		}
		break;
	case 2:
		Send_IGN1_message = true;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <Send_IGN1_message>
		IGN1_state = 0;
     91c:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <IGN1_state.3903>
     920:	08 95       	ret

00000922 <SBLIGN2>:
	}
}

void SBLIGN2(void) {
	static uint8_t IGN2_state = 0;
	switch (IGN2_state)
     922:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <IGN2_state.3911>
     926:	81 30       	cpi	r24, 0x01	; 1
     928:	81 f0       	breq	.+32     	; 0x94a <SBLIGN2+0x28>
     92a:	18 f0       	brcs	.+6      	; 0x932 <SBLIGN2+0x10>
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	c1 f0       	breq	.+48     	; 0x960 <SBLIGN2+0x3e>
     930:	08 95       	ret
	{
	case 0:
		Send_IGN2_message = false;
     932:	10 92 1b 38 	sts	0x381B, r1	; 0x80381b <Send_IGN2_message>
		Turn_green_on = false;
     936:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <Turn_green_on>
		if (IGN2_pressed) {
     93a:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <IGN2_pressed>
     93e:	88 23       	and	r24, r24
     940:	a1 f0       	breq	.+40     	; 0x96a <SBLIGN2+0x48>
			IGN2_state = 1;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <IGN2_state.3911>
     948:	08 95       	ret
		}
		break;
	case 1:
		Turn_green_on = true;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <Turn_green_on>
		if (!IGN2_pressed) {
     950:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <IGN2_pressed>
     954:	81 11       	cpse	r24, r1
     956:	09 c0       	rjmp	.+18     	; 0x96a <SBLIGN2+0x48>
			IGN2_state = 2;
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <IGN2_state.3911>
     95e:	08 95       	ret
		}
		break;
	case 2:
		Send_IGN2_message = true;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <Send_IGN2_message>
		IGN2_state = 0;
     966:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <IGN2_state.3911>
     96a:	08 95       	ret

0000096c <SBLHorn>:
	}
}

void SBLHorn(void) {
	static uint8_t Horn_state = 0;
	switch (Horn_state)
     96c:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__data_end>
     970:	81 30       	cpi	r24, 0x01	; 1
     972:	71 f0       	breq	.+28     	; 0x990 <SBLHorn+0x24>
     974:	18 f0       	brcs	.+6      	; 0x97c <SBLHorn+0x10>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	c1 f0       	breq	.+48     	; 0x9aa <SBLHorn+0x3e>
     97a:	08 95       	ret
	{
	case 0:
		Send_Horn_message = false;
     97c:	10 92 1a 38 	sts	0x381A, r1	; 0x80381a <Send_Horn_message>
		if (Horn_pressed) {
     980:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <Horn_pressed>
     984:	88 23       	and	r24, r24
     986:	b1 f0       	breq	.+44     	; 0x9b4 <SBLHorn+0x48>
			Horn_state = 1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__data_end>
     98e:	08 95       	ret
		}
		break;
	case 1:
		Turn_red_on = true;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <Turn_red_on>
		Turn_green_on = true;
     996:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <Turn_green_on>
		if (!Horn_pressed) {
     99a:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <Horn_pressed>
     99e:	81 11       	cpse	r24, r1
     9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <SBLHorn+0x48>
			Horn_state = 2;
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__data_end>
     9a8:	08 95       	ret
		}
		break;
	case 2:
		Send_Horn_message = true;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <Send_Horn_message>
		Horn_state = 0;
     9b0:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <__data_end>
     9b4:	08 95       	ret

000009b6 <SBLR>:
		break;
	}
}

void SBLR(void) {
	if (Input_R) {
     9b6:	80 91 18 38 	lds	r24, 0x3818	; 0x803818 <Input_R>
     9ba:	88 23       	and	r24, r24
     9bc:	21 f0       	breq	.+8      	; 0x9c6 <SBLR+0x10>
		Toggle_red = true;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 15 38 	sts	0x3815, r24	; 0x803815 <Toggle_red>
     9c4:	08 95       	ret
	} else {
		Toggle_red = false;
     9c6:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <Toggle_red>
     9ca:	08 95       	ret

000009cc <SBLG>:
	}
}

void SBLG(void) {
	if (Input_G) {
     9cc:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <Input_G>
     9d0:	88 23       	and	r24, r24
     9d2:	21 f0       	breq	.+8      	; 0x9dc <SBLG+0x10>
		Toggle_green = true;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <Toggle_green>
     9da:	08 95       	ret
	} else {
		Toggle_green = false;
     9dc:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <Toggle_green>
     9e0:	08 95       	ret

000009e2 <SBLY>:
	}
}

void SBLY(void) {
	if (Input_Y) {
     9e2:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <Input_Y>
     9e6:	88 23       	and	r24, r24
     9e8:	21 f0       	breq	.+8      	; 0x9f2 <SBLY+0x10>
		Toggle_yellow = true;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <Toggle_yellow>
     9f0:	08 95       	ret
	} else {
		Toggle_yellow = false;
     9f2:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <Toggle_yellow>
     9f6:	08 95       	ret

000009f8 <SBLPlanning>:
	}
}

void SBLPlanning(void) {
	if (Get_input) {
     9f8:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <Get_input>
     9fc:	88 23       	and	r24, r24
     9fe:	39 f0       	breq	.+14     	; 0xa0e <SBLPlanning+0x16>
		SBLR();
     a00:	0e 94 db 04 	call	0x9b6	; 0x9b6 <SBLR>
		SBLG();
     a04:	0e 94 e6 04 	call	0x9cc	; 0x9cc <SBLG>
		SBLY();
     a08:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <SBLY>
     a0c:	08 95       	ret
	} else {
		SBLIGN1();
     a0e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <SBLIGN1>
		SBLIGN2();
     a12:	0e 94 91 04 	call	0x922	; 0x922 <SBLIGN2>
		SBLHorn();
     a16:	0e 94 b6 04 	call	0x96c	; 0x96c <SBLHorn>
     a1a:	08 95       	ret

00000a1c <SBLAction>:
	}
}

void SBLAction(void) {
	if (Get_input) {
     a1c:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <Get_input>
     a20:	88 23       	and	r24, r24
     a22:	09 f4       	brne	.+2      	; 0xa26 <SBLAction+0xa>
     a24:	a2 c0       	rjmp	.+324    	; 0xb6a <SBLAction+0x14e>
		if (Toggle_red) {
     a26:	80 91 15 38 	lds	r24, 0x3815	; 0x803815 <Toggle_red>
     a2a:	88 23       	and	r24, r24
     a2c:	79 f1       	breq	.+94     	; 0xa8c <SBLAction+0x70>
			Set_Brightness_Red(255);
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			Timer_Start();
     a34:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Timer_Start>
			USART1_Transmit_String("Press any key to turn the red LED off\n\r");
     a38:	8c e1       	ldi	r24, 0x1C	; 28
     a3a:	91 e6       	ldi	r25, 0x61	; 97
     a3c:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
			USART1_Receive();
     a40:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <USART1_Receive>
			Timer_Stop();
     a44:	0e 94 ae 0a 	call	0x155c	; 0x155c <Timer_Stop>
			Set_Brightness_Red(0);
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			USART1_Transmit_String("Red LED was on for about ");
     a4e:	84 e4       	ldi	r24, 0x44	; 68
     a50:	91 e6       	ldi	r25, 0x61	; 97
     a52:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
			USART1_Transmit_Number((uint16_t)(light_on_counter * 10));
     a56:	20 91 11 38 	lds	r18, 0x3811	; 0x803811 <light_on_counter>
     a5a:	30 91 12 38 	lds	r19, 0x3812	; 0x803812 <light_on_counter+0x1>
     a5e:	c9 01       	movw	r24, r18
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	22 0f       	add	r18, r18
     a66:	33 1f       	adc	r19, r19
     a68:	22 0f       	add	r18, r18
     a6a:	33 1f       	adc	r19, r19
     a6c:	22 0f       	add	r18, r18
     a6e:	33 1f       	adc	r19, r19
     a70:	82 0f       	add	r24, r18
     a72:	93 1f       	adc	r25, r19
     a74:	0e 94 08 0b 	call	0x1610	; 0x1610 <USART1_Transmit_Number>
			USART1_Transmit_String(" milliseconds\n\r");
     a78:	8e e5       	ldi	r24, 0x5E	; 94
     a7a:	91 e6       	ldi	r25, 0x61	; 97
     a7c:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
			light_on_counter = 0;
     a80:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <light_on_counter>
     a84:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <light_on_counter+0x1>
			Toggle_red = false;
     a88:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <Toggle_red>
		}
		if (Toggle_green) {
     a8c:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <Toggle_green>
     a90:	88 23       	and	r24, r24
     a92:	79 f1       	breq	.+94     	; 0xaf2 <SBLAction+0xd6>
			Set_Brightness_Green(255);
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
			Timer_Start();
     a9a:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Timer_Start>
			USART1_Transmit_String("Press any key to turn the green LED off\n\r");
     a9e:	8e e6       	ldi	r24, 0x6E	; 110
     aa0:	91 e6       	ldi	r25, 0x61	; 97
     aa2:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
			USART1_Receive();
     aa6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <USART1_Receive>
			Timer_Stop();
     aaa:	0e 94 ae 0a 	call	0x155c	; 0x155c <Timer_Stop>
			Set_Brightness_Green(0);
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
			USART1_Transmit_String("Green LED was on for about ");
     ab4:	88 e9       	ldi	r24, 0x98	; 152
     ab6:	91 e6       	ldi	r25, 0x61	; 97
     ab8:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
			USART1_Transmit_Number((uint16_t)(light_on_counter * 10));
     abc:	20 91 11 38 	lds	r18, 0x3811	; 0x803811 <light_on_counter>
     ac0:	30 91 12 38 	lds	r19, 0x3812	; 0x803812 <light_on_counter+0x1>
     ac4:	c9 01       	movw	r24, r18
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	22 0f       	add	r18, r18
     acc:	33 1f       	adc	r19, r19
     ace:	22 0f       	add	r18, r18
     ad0:	33 1f       	adc	r19, r19
     ad2:	22 0f       	add	r18, r18
     ad4:	33 1f       	adc	r19, r19
     ad6:	82 0f       	add	r24, r18
     ad8:	93 1f       	adc	r25, r19
     ada:	0e 94 08 0b 	call	0x1610	; 0x1610 <USART1_Transmit_Number>
			USART1_Transmit_String(" milliseconds\n\r");
     ade:	8e e5       	ldi	r24, 0x5E	; 94
     ae0:	91 e6       	ldi	r25, 0x61	; 97
     ae2:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
			light_on_counter = 0;
     ae6:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <light_on_counter>
     aea:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <light_on_counter+0x1>
			Toggle_green = false;
     aee:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <Toggle_green>
		}
		if (Toggle_yellow) {
     af2:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <Toggle_yellow>
     af6:	88 23       	and	r24, r24
     af8:	a9 f1       	breq	.+106    	; 0xb64 <SBLAction+0x148>
			Set_Brightness_Green(255);
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
			Set_Brightness_Red(255);
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			Timer_Start();
     b06:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Timer_Start>
			USART1_Transmit_String("Press any key to turn the yellow LED off\n\r");
     b0a:	84 eb       	ldi	r24, 0xB4	; 180
     b0c:	91 e6       	ldi	r25, 0x61	; 97
     b0e:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
			USART1_Receive();
     b12:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <USART1_Receive>
			Timer_Stop();
     b16:	0e 94 ae 0a 	call	0x155c	; 0x155c <Timer_Stop>
			Set_Brightness_Green(0);
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
			Set_Brightness_Red(0);
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			USART1_Transmit_String("Yellow LED was on for about ");
     b26:	8f ed       	ldi	r24, 0xDF	; 223
     b28:	91 e6       	ldi	r25, 0x61	; 97
     b2a:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
			USART1_Transmit_Number((uint16_t)(light_on_counter * 10));
     b2e:	20 91 11 38 	lds	r18, 0x3811	; 0x803811 <light_on_counter>
     b32:	30 91 12 38 	lds	r19, 0x3812	; 0x803812 <light_on_counter+0x1>
     b36:	c9 01       	movw	r24, r18
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	22 0f       	add	r18, r18
     b3e:	33 1f       	adc	r19, r19
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	22 0f       	add	r18, r18
     b46:	33 1f       	adc	r19, r19
     b48:	82 0f       	add	r24, r18
     b4a:	93 1f       	adc	r25, r19
     b4c:	0e 94 08 0b 	call	0x1610	; 0x1610 <USART1_Transmit_Number>
			USART1_Transmit_String(" milliseconds\n\r");
     b50:	8e e5       	ldi	r24, 0x5E	; 94
     b52:	91 e6       	ldi	r25, 0x61	; 97
     b54:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
			light_on_counter = 0;
     b58:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <light_on_counter>
     b5c:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <light_on_counter+0x1>
			Toggle_yellow = false;
     b60:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <Toggle_yellow>
		}
		Get_input = false;
     b64:	10 92 19 38 	sts	0x3819, r1	; 0x803819 <Get_input>
     b68:	08 95       	ret
	} else {
		Turn_red_on ? Set_Brightness_Red(255) : Set_Brightness_Red(0);
     b6a:	80 91 1e 38 	lds	r24, 0x381E	; 0x80381e <Turn_red_on>
     b6e:	88 23       	and	r24, r24
     b70:	21 f0       	breq	.+8      	; 0xb7a <SBLAction+0x15e>
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <SBLAction+0x164>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			
		Turn_green_on ? Set_Brightness_Green(255) : Set_Brightness_Green(0);
     b80:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <Turn_green_on>
     b84:	88 23       	and	r24, r24
     b86:	21 f0       	breq	.+8      	; 0xb90 <SBLAction+0x174>
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
     b8e:	03 c0       	rjmp	.+6      	; 0xb96 <SBLAction+0x17a>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>

		Send_IGN1_message ? USART1_Transmit_String("IGN_1 button was pressed\r\n") : (void)0;
     b96:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <Send_IGN1_message>
     b9a:	88 23       	and	r24, r24
     b9c:	21 f0       	breq	.+8      	; 0xba6 <SBLAction+0x18a>
     b9e:	8c ef       	ldi	r24, 0xFC	; 252
     ba0:	91 e6       	ldi	r25, 0x61	; 97
     ba2:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>

		Send_IGN2_message ? USART1_Transmit_String("IGN_2 button was pressed\r\n") : (void)0;
     ba6:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <Send_IGN2_message>
     baa:	88 23       	and	r24, r24
     bac:	21 f0       	breq	.+8      	; 0xbb6 <SBLAction+0x19a>
     bae:	87 e1       	ldi	r24, 0x17	; 23
     bb0:	92 e6       	ldi	r25, 0x62	; 98
     bb2:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>

		Send_Horn_message ? USART1_Transmit_String("HORN button was pressed\r\n") : (void)0;
     bb6:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <Send_Horn_message>
     bba:	88 23       	and	r24, r24
     bbc:	21 f0       	breq	.+8      	; 0xbc6 <SBLAction+0x1aa>
     bbe:	82 e3       	ldi	r24, 0x32	; 50
     bc0:	92 e6       	ldi	r25, 0x62	; 98
     bc2:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
     bc6:	08 95       	ret

00000bc8 <SerialButtonLEDMode>:
	}
}

void SerialButtonLEDMode(void) {
     bc8:	cf 93       	push	r28
	USART1_Transmit_String("You are in Serial button LED mode (press q to exit)\n\r");
     bca:	8c e4       	ldi	r24, 0x4C	; 76
     bcc:	92 e6       	ldi	r25, 0x62	; 98
     bce:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("You are alerted when a button is pressed and if you press all three buttons at once, something special happens\n\r");
     bd2:	82 e8       	ldi	r24, 0x82	; 130
     bd4:	92 e6       	ldi	r25, 0x62	; 98
     bd6:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	serialButtonLEDMode = true;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <serialButtonLEDMode>
	uint8_t quit = 0;
     be0:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     be2:	0e c0       	rjmp	.+28     	; 0xc00 <SerialButtonLEDMode+0x38>
		wdt_reset();
     be4:	a8 95       	wdr
		SBLPerception();
     be6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <SBLPerception>
		SBLPlanning();
     bea:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <SBLPlanning>
		SBLAction();
     bee:	0e 94 0e 05 	call	0xa1c	; 0xa1c <SBLAction>
		if (USART1.STATUS & USART_RXCIF_bm) {
     bf2:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     bf6:	88 23       	and	r24, r24
     bf8:	1c f4       	brge	.+6      	; 0xc00 <SerialButtonLEDMode+0x38>
			quit = USART1_Receive_No_Wait();
     bfa:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <USART1_Receive_No_Wait>
     bfe:	c8 2f       	mov	r28, r24
void SerialButtonLEDMode(void) {
	USART1_Transmit_String("You are in Serial button LED mode (press q to exit)\n\r");
	USART1_Transmit_String("You are alerted when a button is pressed and if you press all three buttons at once, something special happens\n\r");
	serialButtonLEDMode = true;
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     c00:	8c 2f       	mov	r24, r28
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
     c08:	81 37       	cpi	r24, 0x71	; 113
     c0a:	91 05       	cpc	r25, r1
     c0c:	59 f7       	brne	.-42     	; 0xbe4 <SerialButtonLEDMode+0x1c>
		SBLAction();
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Set_Brightness_Red(0);
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
	serialButtonLEDMode = false;
     c1a:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <serialButtonLEDMode>
}
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <BlinkingLEDMode>:

void BlinkingLEDMode(void) {
     c22:	cf 93       	push	r28
	USART1_Transmit_String("You are in Blinking LED mode (press q to exit)\n\r");
     c24:	83 ef       	ldi	r24, 0xF3	; 243
     c26:	92 e6       	ldi	r25, 0x62	; 98
     c28:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("The LED changes colors rapidly\n\r");
     c2c:	84 e2       	ldi	r24, 0x24	; 36
     c2e:	93 e6       	ldi	r25, 0x63	; 99
     c30:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	uint8_t quit = 0;
     c34:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     c36:	31 c0       	rjmp	.+98     	; 0xc9a <BlinkingLEDMode+0x78>
		Set_Brightness_Green(0);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
		Set_Brightness_Red(255);
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
     c44:	2a ea       	ldi	r18, 0xAA	; 170
     c46:	80 ea       	ldi	r24, 0xA0	; 160
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	21 50       	subi	r18, 0x01	; 1
     c4c:	80 40       	sbci	r24, 0x00	; 0
     c4e:	90 40       	sbci	r25, 0x00	; 0
     c50:	e1 f7       	brne	.-8      	; 0xc4a <BlinkingLEDMode+0x28>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <BlinkingLEDMode+0x32>
		_delay_ms(200);
		wdt_reset();
     c54:	a8 95       	wdr
		Set_Brightness_Green(255);
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
		Set_Brightness_Red(0);
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
     c62:	2a ea       	ldi	r18, 0xAA	; 170
     c64:	80 ea       	ldi	r24, 0xA0	; 160
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	21 50       	subi	r18, 0x01	; 1
     c6a:	80 40       	sbci	r24, 0x00	; 0
     c6c:	90 40       	sbci	r25, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <BlinkingLEDMode+0x46>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <BlinkingLEDMode+0x50>
		_delay_ms(200);
		wdt_reset();
     c72:	a8 95       	wdr
		Set_Brightness_Red(255);
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
     c7a:	2a ea       	ldi	r18, 0xAA	; 170
     c7c:	80 ea       	ldi	r24, 0xA0	; 160
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	21 50       	subi	r18, 0x01	; 1
     c82:	80 40       	sbci	r24, 0x00	; 0
     c84:	90 40       	sbci	r25, 0x00	; 0
     c86:	e1 f7       	brne	.-8      	; 0xc80 <BlinkingLEDMode+0x5e>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <BlinkingLEDMode+0x68>
		_delay_ms(200);
		wdt_reset();
     c8a:	a8 95       	wdr
		if (USART1.STATUS & USART_RXCIF_bm) {
     c8c:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     c90:	88 23       	and	r24, r24
     c92:	1c f4       	brge	.+6      	; 0xc9a <BlinkingLEDMode+0x78>
			quit = USART1_Receive_No_Wait();
     c94:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <USART1_Receive_No_Wait>
     c98:	c8 2f       	mov	r28, r24

void BlinkingLEDMode(void) {
	USART1_Transmit_String("You are in Blinking LED mode (press q to exit)\n\r");
	USART1_Transmit_String("The LED changes colors rapidly\n\r");
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     c9a:	8c 2f       	mov	r24, r28
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
     ca2:	81 37       	cpi	r24, 0x71	; 113
     ca4:	91 05       	cpc	r25, r1
     ca6:	41 f6       	brne	.-112    	; 0xc38 <BlinkingLEDMode+0x16>
		wdt_reset();
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Set_Brightness_Red(0);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
}
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <LEDSPIMode>:

void LEDSPIMode(void) {
     cb8:	cf 93       	push	r28
	USART1_Transmit_String("You are in LED SPI mode (press q to exit)\n\r");
     cba:	85 e4       	ldi	r24, 0x45	; 69
     cbc:	93 e6       	ldi	r25, 0x63	; 99
     cbe:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("The LED changes color based on the tilt (green in x direction, red in y direction, and yellow in z direction)\n\r");
     cc2:	81 e7       	ldi	r24, 0x71	; 113
     cc4:	93 e6       	ldi	r25, 0x63	; 99
     cc6:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	uint8_t quit = 0;
     cca:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     ccc:	48 c0       	rjmp	.+144    	; 0xd5e <LEDSPIMode+0xa6>
		wdt_reset();
     cce:	a8 95       	wdr
		FXLS8967_ReadAccel(&x, &y, &z, &a);
     cd0:	28 e0       	ldi	r18, 0x08	; 8
     cd2:	38 e3       	ldi	r19, 0x38	; 56
     cd4:	4a e0       	ldi	r20, 0x0A	; 10
     cd6:	58 e3       	ldi	r21, 0x38	; 56
     cd8:	6c e0       	ldi	r22, 0x0C	; 12
     cda:	78 e3       	ldi	r23, 0x38	; 56
     cdc:	8e e0       	ldi	r24, 0x0E	; 14
     cde:	98 e3       	ldi	r25, 0x38	; 56
     ce0:	0e 94 fe 09 	call	0x13fc	; 0x13fc <FXLS8967_ReadAccel>
		if (x > 800 || x < -800) {
     ce4:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <x>
     ce8:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <x+0x1>
     cec:	80 5e       	subi	r24, 0xE0	; 224
     cee:	9c 4f       	sbci	r25, 0xFC	; 252
     cf0:	81 34       	cpi	r24, 0x41	; 65
     cf2:	96 40       	sbci	r25, 0x06	; 6
     cf4:	38 f0       	brcs	.+14     	; 0xd04 <LEDSPIMode+0x4c>
			Set_Brightness_Red(255);
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			Set_Brightness_Green(0);
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
     d02:	26 c0       	rjmp	.+76     	; 0xd50 <LEDSPIMode+0x98>
		} else if (y > 800 || y < -800) {
     d04:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <y>
     d08:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <y+0x1>
     d0c:	80 5e       	subi	r24, 0xE0	; 224
     d0e:	9c 4f       	sbci	r25, 0xFC	; 252
     d10:	81 34       	cpi	r24, 0x41	; 65
     d12:	96 40       	sbci	r25, 0x06	; 6
     d14:	38 f0       	brcs	.+14     	; 0xd24 <LEDSPIMode+0x6c>
			Set_Brightness_Red(0);
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			Set_Brightness_Green(255);
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
     d1e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
     d22:	16 c0       	rjmp	.+44     	; 0xd50 <LEDSPIMode+0x98>
		} else if (z > 800 || z < -800) {
     d24:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <z>
     d28:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <z+0x1>
     d2c:	80 5e       	subi	r24, 0xE0	; 224
     d2e:	9c 4f       	sbci	r25, 0xFC	; 252
     d30:	81 34       	cpi	r24, 0x41	; 65
     d32:	96 40       	sbci	r25, 0x06	; 6
     d34:	38 f0       	brcs	.+14     	; 0xd44 <LEDSPIMode+0x8c>
			Set_Brightness_Red(255);
     d36:	8f ef       	ldi	r24, 0xFF	; 255
     d38:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			Set_Brightness_Green(255);
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
     d42:	06 c0       	rjmp	.+12     	; 0xd50 <LEDSPIMode+0x98>
		} else {
			Set_Brightness_Red(0);
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
			Set_Brightness_Green(0);
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
		}
		if (USART1.STATUS & USART_RXCIF_bm) {
     d50:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     d54:	88 23       	and	r24, r24
     d56:	1c f4       	brge	.+6      	; 0xd5e <LEDSPIMode+0xa6>
			quit = USART1_Receive_No_Wait();
     d58:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <USART1_Receive_No_Wait>
     d5c:	c8 2f       	mov	r28, r24

void LEDSPIMode(void) {
	USART1_Transmit_String("You are in LED SPI mode (press q to exit)\n\r");
	USART1_Transmit_String("The LED changes color based on the tilt (green in x direction, red in y direction, and yellow in z direction)\n\r");
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     d5e:	8c 2f       	mov	r24, r28
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
     d66:	81 37       	cpi	r24, 0x71	; 113
     d68:	91 05       	cpc	r25, r1
     d6a:	09 f0       	breq	.+2      	; 0xd6e <LEDSPIMode+0xb6>
     d6c:	b0 cf       	rjmp	.-160    	; 0xcce <LEDSPIMode+0x16>
		}
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Set_Brightness_Red(0);
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
}
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <PWMSPIMode>:

void PWMSPIMode(void) {
     d7e:	cf 93       	push	r28
	USART1_Transmit_String("You are in PWM SPI mode (press q to exit)\n\r");
     d80:	81 ee       	ldi	r24, 0xE1	; 225
     d82:	93 e6       	ldi	r25, 0x63	; 99
     d84:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("The LED changes brightness based on the tilt (green in x direction and red in y direction)\n\r");
     d88:	8d e0       	ldi	r24, 0x0D	; 13
     d8a:	94 e6       	ldi	r25, 0x64	; 100
     d8c:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	uint8_t quit = 0;
     d90:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     d92:	44 c0       	rjmp	.+136    	; 0xe1c <PWMSPIMode+0x9e>
		wdt_reset();
     d94:	a8 95       	wdr
		FXLS8967_ReadAccel(&x, &y, &z, &a);
     d96:	28 e0       	ldi	r18, 0x08	; 8
     d98:	38 e3       	ldi	r19, 0x38	; 56
     d9a:	4a e0       	ldi	r20, 0x0A	; 10
     d9c:	58 e3       	ldi	r21, 0x38	; 56
     d9e:	6c e0       	ldi	r22, 0x0C	; 12
     da0:	78 e3       	ldi	r23, 0x38	; 56
     da2:	8e e0       	ldi	r24, 0x0E	; 14
     da4:	98 e3       	ldi	r25, 0x38	; 56
     da6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <FXLS8967_ReadAccel>
		y = abs(y);
     daa:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <y>
     dae:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <y+0x1>
     db2:	99 23       	and	r25, r25
     db4:	1c f4       	brge	.+6      	; 0xdbc <PWMSPIMode+0x3e>
     db6:	91 95       	neg	r25
     db8:	81 95       	neg	r24
     dba:	91 09       	sbc	r25, r1
     dbc:	9c 01       	movw	r18, r24
     dbe:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <y>
     dc2:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <y+0x1>
		x = abs(x);
     dc6:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <x>
     dca:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <x+0x1>
     dce:	99 23       	and	r25, r25
     dd0:	1c f4       	brge	.+6      	; 0xdd8 <PWMSPIMode+0x5a>
     dd2:	91 95       	neg	r25
     dd4:	81 95       	neg	r24
     dd6:	91 09       	sbc	r25, r1
     dd8:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <x>
     ddc:	90 93 0f 38 	sts	0x380F, r25	; 0x80380f <x+0x1>
		Set_Brightness_Red(y / 4);
     de0:	c9 01       	movw	r24, r18
     de2:	99 23       	and	r25, r25
     de4:	0c f4       	brge	.+2      	; 0xde8 <PWMSPIMode+0x6a>
     de6:	03 96       	adiw	r24, 0x03	; 3
     de8:	95 95       	asr	r25
     dea:	87 95       	ror	r24
     dec:	95 95       	asr	r25
     dee:	87 95       	ror	r24
     df0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
		Set_Brightness_Green(x / 4);
     df4:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <x>
     df8:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <x+0x1>
     dfc:	99 23       	and	r25, r25
     dfe:	0c f4       	brge	.+2      	; 0xe02 <PWMSPIMode+0x84>
     e00:	03 96       	adiw	r24, 0x03	; 3
     e02:	95 95       	asr	r25
     e04:	87 95       	ror	r24
     e06:	95 95       	asr	r25
     e08:	87 95       	ror	r24
     e0a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
		if (USART1.STATUS & USART_RXCIF_bm) {
     e0e:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     e12:	88 23       	and	r24, r24
     e14:	1c f4       	brge	.+6      	; 0xe1c <PWMSPIMode+0x9e>
			quit = USART1_Receive_No_Wait();
     e16:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <USART1_Receive_No_Wait>
     e1a:	c8 2f       	mov	r28, r24

void PWMSPIMode(void) {
	USART1_Transmit_String("You are in PWM SPI mode (press q to exit)\n\r");
	USART1_Transmit_String("The LED changes brightness based on the tilt (green in x direction and red in y direction)\n\r");
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     e1c:	8c 2f       	mov	r24, r28
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
     e24:	81 37       	cpi	r24, 0x71	; 113
     e26:	91 05       	cpc	r25, r1
     e28:	09 f0       	breq	.+2      	; 0xe2c <PWMSPIMode+0xae>
     e2a:	b4 cf       	rjmp	.-152    	; 0xd94 <PWMSPIMode+0x16>
		Set_Brightness_Green(x / 4);
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Set_Brightness_Red(0);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 ba 0a 	call	0x1574	; 0x1574 <Set_Brightness_Green>
}
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <Read_Analog>:

int32_t Read_Analog(ADC_MUXPOS_t input) {
     e3c:	8f 92       	push	r8
     e3e:	9f 92       	push	r9
     e40:	af 92       	push	r10
     e42:	bf 92       	push	r11
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	b8 2e       	mov	r11, r24
	int32_t value = ADC_Read(input);
     e4e:	0e 94 b2 00 	call	0x164	; 0x164 <ADC_Read>
     e52:	6b 01       	movw	r12, r22
     e54:	7c 01       	movw	r14, r24
	if (input == POWER_VOLTS) {
     e56:	b1 10       	cpse	r11, r1
     e58:	4a c0       	rjmp	.+148    	; 0xeee <Read_Analog+0xb2>
		value = (value * 250L) / 1023L;
     e5a:	aa ef       	ldi	r26, 0xFA	; 250
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	9b 01       	movw	r18, r22
     e60:	ac 01       	movw	r20, r24
     e62:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__muluhisi3>
     e66:	2f ef       	ldi	r18, 0xFF	; 255
     e68:	33 e0       	ldi	r19, 0x03	; 3
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divmodsi4>
     e72:	49 01       	movw	r8, r18
     e74:	5a 01       	movw	r10, r20
     e76:	69 01       	movw	r12, r18
     e78:	7a 01       	movw	r14, r20
		if (globalGain < 0) {
     e7a:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <globalGain>
     e7e:	90 91 32 38 	lds	r25, 0x3832	; 0x803832 <globalGain+0x1>
     e82:	a0 91 33 38 	lds	r26, 0x3833	; 0x803833 <globalGain+0x2>
     e86:	b0 91 34 38 	lds	r27, 0x3834	; 0x803834 <globalGain+0x3>
     e8a:	bb 23       	and	r27, r27
     e8c:	ac f4       	brge	.+42     	; 0xeb8 <Read_Analog+0x7c>
			value = value + (value / ((globalGain - 500L) / 1000L));  // Adjust the calculation for globalGain
     e8e:	bc 01       	movw	r22, r24
     e90:	cd 01       	movw	r24, r26
     e92:	64 5f       	subi	r22, 0xF4	; 244
     e94:	71 40       	sbci	r23, 0x01	; 1
     e96:	81 09       	sbc	r24, r1
     e98:	91 09       	sbc	r25, r1
     e9a:	28 ee       	ldi	r18, 0xE8	; 232
     e9c:	33 e0       	ldi	r19, 0x03	; 3
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divmodsi4>
     ea6:	c5 01       	movw	r24, r10
     ea8:	b4 01       	movw	r22, r8
     eaa:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divmodsi4>
     eae:	c2 0e       	add	r12, r18
     eb0:	d3 1e       	adc	r13, r19
     eb2:	e4 1e       	adc	r14, r20
     eb4:	f5 1e       	adc	r15, r21
     eb6:	1b c0       	rjmp	.+54     	; 0xeee <Read_Analog+0xb2>
			} else if (globalGain > 0) {
     eb8:	18 16       	cp	r1, r24
     eba:	19 06       	cpc	r1, r25
     ebc:	1a 06       	cpc	r1, r26
     ebe:	1b 06       	cpc	r1, r27
     ec0:	b4 f4       	brge	.+44     	; 0xeee <Read_Analog+0xb2>
			value = value + (value / ((globalGain + 500L) / 1000L));  // Adjust the calculation for globalGain
     ec2:	bc 01       	movw	r22, r24
     ec4:	cd 01       	movw	r24, r26
     ec6:	6c 50       	subi	r22, 0x0C	; 12
     ec8:	7e 4f       	sbci	r23, 0xFE	; 254
     eca:	8f 4f       	sbci	r24, 0xFF	; 255
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	28 ee       	ldi	r18, 0xE8	; 232
     ed0:	33 e0       	ldi	r19, 0x03	; 3
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divmodsi4>
     eda:	c5 01       	movw	r24, r10
     edc:	b4 01       	movw	r22, r8
     ede:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divmodsi4>
     ee2:	75 01       	movw	r14, r10
     ee4:	64 01       	movw	r12, r8
     ee6:	c2 0e       	add	r12, r18
     ee8:	d3 1e       	adc	r13, r19
     eea:	e4 1e       	adc	r14, r20
     eec:	f5 1e       	adc	r15, r21
		}
	}
	return value;
}
     eee:	c7 01       	movw	r24, r14
     ef0:	b6 01       	movw	r22, r12
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	bf 90       	pop	r11
     efc:	af 90       	pop	r10
     efe:	9f 90       	pop	r9
     f00:	8f 90       	pop	r8
     f02:	08 95       	ret

00000f04 <Calibrate>:

void Calibrate(void) {
     f04:	8f 92       	push	r8
     f06:	9f 92       	push	r9
     f08:	af 92       	push	r10
     f0a:	bf 92       	push	r11
     f0c:	cf 92       	push	r12
     f0e:	df 92       	push	r13
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	69 97       	sbiw	r28, 0x19	; 25
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	de bf       	out	0x3e, r29	; 62
	USART1_Transmit_String("Enter multimeter-measured voltage (12V would be 1200):\n\r");
     f26:	8a e6       	ldi	r24, 0x6A	; 106
     f28:	94 e6       	ldi	r25, 0x64	; 100
     f2a:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	uint8_t actualVoltage1 = USART1_Receive();
     f2e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <USART1_Receive>
     f32:	f8 2e       	mov	r15, r24
	uint8_t actualVoltage2 = USART1_Receive();
     f34:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <USART1_Receive>
     f38:	08 2f       	mov	r16, r24
	uint8_t actualVoltage3 = USART1_Receive();
     f3a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <USART1_Receive>
     f3e:	18 2f       	mov	r17, r24
	uint8_t actualVoltage4 = USART1_Receive();
     f40:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <USART1_Receive>
	char actualVoltageStr[5] = {actualVoltage1, actualVoltage2, actualVoltage3, actualVoltage4, '\0'};
     f44:	f9 82       	std	Y+1, r15	; 0x01
     f46:	0a 83       	std	Y+2, r16	; 0x02
     f48:	1b 83       	std	Y+3, r17	; 0x03
     f4a:	8c 83       	std	Y+4, r24	; 0x04
     f4c:	1d 82       	std	Y+5, r1	; 0x05
	int32_t actualVoltage = atoi(actualVoltageStr); // Convert string to integer
     f4e:	ce 01       	movw	r24, r28
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <atoi>
     f56:	6c 01       	movw	r12, r24
     f58:	99 0f       	add	r25, r25
     f5a:	ee 08       	sbc	r14, r14
     f5c:	ff 08       	sbc	r15, r15
	
	// Debugging: print the actual voltage received
	char debugBuffer[20];
	sprintf(debugBuffer, "Actual: %ld\n\r", actualVoltage);
     f5e:	ff 92       	push	r15
     f60:	ef 92       	push	r14
     f62:	df 92       	push	r13
     f64:	cf 92       	push	r12
     f66:	83 ea       	ldi	r24, 0xA3	; 163
     f68:	94 e6       	ldi	r25, 0x64	; 100
     f6a:	9f 93       	push	r25
     f6c:	8f 93       	push	r24
     f6e:	8e 01       	movw	r16, r28
     f70:	0a 5f       	subi	r16, 0xFA	; 250
     f72:	1f 4f       	sbci	r17, 0xFF	; 255
     f74:	1f 93       	push	r17
     f76:	0f 93       	push	r16
     f78:	0e 94 0c 0c 	call	0x1818	; 0x1818 <sprintf>
	USART1_Transmit_String(debugBuffer);
     f7c:	c8 01       	movw	r24, r16
     f7e:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>

	int32_t measuredVoltage = ADC_Read(POWER_VOLTS);
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	0e 94 b2 00 	call	0x164	; 0x164 <ADC_Read>
     f88:	9b 01       	movw	r18, r22
     f8a:	ac 01       	movw	r20, r24
	int32_t measuredVoltagemV = (measuredVoltage * 250UL) / 1023;
     f8c:	aa ef       	ldi	r26, 0xFA	; 250
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__muluhisi3>
     f94:	2f ef       	ldi	r18, 0xFF	; 255
     f96:	33 e0       	ldi	r19, 0x03	; 3
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__udivmodsi4>
     fa0:	49 01       	movw	r8, r18
     fa2:	5a 01       	movw	r10, r20

	// Debugging: print the measured voltage
	sprintf(debugBuffer, "Measured: %ld\n\r", measuredVoltagemV);
     fa4:	bf 92       	push	r11
     fa6:	af 92       	push	r10
     fa8:	9f 92       	push	r9
     faa:	2f 93       	push	r18
     fac:	81 eb       	ldi	r24, 0xB1	; 177
     fae:	94 e6       	ldi	r25, 0x64	; 100
     fb0:	9f 93       	push	r25
     fb2:	8f 93       	push	r24
     fb4:	1f 93       	push	r17
     fb6:	0f 93       	push	r16
     fb8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <sprintf>
	USART1_Transmit_String(debugBuffer);
     fbc:	c8 01       	movw	r24, r16
     fbe:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>

	int32_t temp = actualVoltage - measuredVoltagemV;
     fc2:	c8 18       	sub	r12, r8
     fc4:	d9 08       	sbc	r13, r9
     fc6:	ea 08       	sbc	r14, r10
     fc8:	fb 08       	sbc	r15, r11

	// Debugging: print the temp value
	sprintf(debugBuffer, "Temp: %ld\n\r", temp);
     fca:	ff 92       	push	r15
     fcc:	ef 92       	push	r14
     fce:	df 92       	push	r13
     fd0:	cf 92       	push	r12
     fd2:	81 ec       	ldi	r24, 0xC1	; 193
     fd4:	94 e6       	ldi	r25, 0x64	; 100
     fd6:	9f 93       	push	r25
     fd8:	8f 93       	push	r24
     fda:	1f 93       	push	r17
     fdc:	0f 93       	push	r16
     fde:	0e 94 0c 0c 	call	0x1818	; 0x1818 <sprintf>
	USART1_Transmit_String(debugBuffer);
     fe2:	c8 01       	movw	r24, r16
     fe4:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>

	if (temp != 0) {
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	c1 14       	cp	r12, r1
     fee:	d1 04       	cpc	r13, r1
     ff0:	e1 04       	cpc	r14, r1
     ff2:	f1 04       	cpc	r15, r1
     ff4:	19 f1       	breq	.+70     	; 0x103c <Calibrate+0x138>
		globalGain = (measuredVoltagemV * 1000L + temp / 2L) / temp;  // Calculate the globalGain using long integer division to avoid precision issues
     ff6:	a8 ee       	ldi	r26, 0xE8	; 232
     ff8:	b3 e0       	ldi	r27, 0x03	; 3
     ffa:	a5 01       	movw	r20, r10
     ffc:	94 01       	movw	r18, r8
     ffe:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__muluhisi3>
    1002:	97 01       	movw	r18, r14
    1004:	86 01       	movw	r16, r12
    1006:	ff 20       	and	r15, r15
    1008:	24 f4       	brge	.+8      	; 0x1012 <Calibrate+0x10e>
    100a:	0f 5f       	subi	r16, 0xFF	; 255
    100c:	1f 4f       	sbci	r17, 0xFF	; 255
    100e:	2f 4f       	sbci	r18, 0xFF	; 255
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
    1012:	35 95       	asr	r19
    1014:	27 95       	ror	r18
    1016:	17 95       	ror	r17
    1018:	07 95       	ror	r16
    101a:	60 0f       	add	r22, r16
    101c:	71 1f       	adc	r23, r17
    101e:	82 1f       	adc	r24, r18
    1020:	93 1f       	adc	r25, r19
    1022:	a7 01       	movw	r20, r14
    1024:	96 01       	movw	r18, r12
    1026:	0e 94 88 0b 	call	0x1710	; 0x1710 <__divmodsi4>
    102a:	20 93 31 38 	sts	0x3831, r18	; 0x803831 <globalGain>
    102e:	30 93 32 38 	sts	0x3832, r19	; 0x803832 <globalGain+0x1>
    1032:	40 93 33 38 	sts	0x3833, r20	; 0x803833 <globalGain+0x2>
    1036:	50 93 34 38 	sts	0x3834, r21	; 0x803834 <globalGain+0x3>
    103a:	08 c0       	rjmp	.+16     	; 0x104c <Calibrate+0x148>
		} else {
		globalGain = 0;
    103c:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <globalGain>
    1040:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <globalGain+0x1>
    1044:	10 92 33 38 	sts	0x3833, r1	; 0x803833 <globalGain+0x2>
    1048:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <globalGain+0x3>
	}
	
	eeprom_write_word(&eepromGain, (uint16_t)globalGain);
    104c:	60 91 31 38 	lds	r22, 0x3831	; 0x803831 <globalGain>
    1050:	70 91 32 38 	lds	r23, 0x3832	; 0x803832 <globalGain+0x1>
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <eeprom_write_word>

	// Debugging: print the globalGain value
	sprintf(debugBuffer, "Gain: %ld\n\r", globalGain);
    105c:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <globalGain+0x3>
    1060:	8f 93       	push	r24
    1062:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <globalGain+0x2>
    1066:	8f 93       	push	r24
    1068:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <globalGain+0x1>
    106c:	8f 93       	push	r24
    106e:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <globalGain>
    1072:	8f 93       	push	r24
    1074:	8d ec       	ldi	r24, 0xCD	; 205
    1076:	94 e6       	ldi	r25, 0x64	; 100
    1078:	9f 93       	push	r25
    107a:	8f 93       	push	r24
    107c:	8e 01       	movw	r16, r28
    107e:	0a 5f       	subi	r16, 0xFA	; 250
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	1f 93       	push	r17
    1084:	0f 93       	push	r16
    1086:	0e 94 0c 0c 	call	0x1818	; 0x1818 <sprintf>
	USART1_Transmit_String(debugBuffer);
    108a:	c8 01       	movw	r24, r16
    108c:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
}
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	69 96       	adiw	r28, 0x19	; 25
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	cf 90       	pop	r12
    10aa:	bf 90       	pop	r11
    10ac:	af 90       	pop	r10
    10ae:	9f 90       	pop	r9
    10b0:	8f 90       	pop	r8
    10b2:	08 95       	ret

000010b4 <BatteryCalibrationMode>:

void BatteryCalibrationMode(void) {
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	2a 97       	sbiw	r28, 0x0a	; 10
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	de bf       	out	0x3e, r29	; 62
	USART1_Transmit_String("You are in Battery calibration mode (press q to exit)\n\r");
    10c6:	89 ed       	ldi	r24, 0xD9	; 217
    10c8:	94 e6       	ldi	r25, 0x64	; 100
    10ca:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("This outputs the reading of the battery voltage. Press c to calibrate\n\r");
    10ce:	81 e1       	ldi	r24, 0x11	; 17
    10d0:	95 e6       	ldi	r25, 0x65	; 101
    10d2:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	ADC_Init();
    10d6:	0e 94 99 00 	call	0x132	; 0x132 <ADC_Init>
	uint8_t quit = 0;
    10da:	10 e0       	ldi	r17, 0x00	; 0
	int32_t batteryVolts = 0;
	while (tolower(quit) != 'q') {
    10dc:	38 c0       	rjmp	.+112    	; 0x114e <BatteryCalibrationMode+0x9a>
		quit = 0;
		wdt_reset();
    10de:	a8 95       	wdr
		batteryVolts = Read_Analog(POWER_VOLTS);
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <Read_Analog>
		char buffer[10] = {0};
    10e6:	8e 01       	movw	r16, r28
    10e8:	0f 5f       	subi	r16, 0xFF	; 255
    10ea:	1f 4f       	sbci	r17, 0xFF	; 255
    10ec:	2a e0       	ldi	r18, 0x0A	; 10
    10ee:	f8 01       	movw	r30, r16
    10f0:	11 92       	st	Z+, r1
    10f2:	2a 95       	dec	r18
    10f4:	e9 f7       	brne	.-6      	; 0x10f0 <BatteryCalibrationMode+0x3c>
		sprintf(buffer, "%ld\n\r", batteryVolts);
    10f6:	9f 93       	push	r25
    10f8:	8f 93       	push	r24
    10fa:	7f 93       	push	r23
    10fc:	6f 93       	push	r22
    10fe:	8b eb       	ldi	r24, 0xBB	; 187
    1100:	94 e6       	ldi	r25, 0x64	; 100
    1102:	9f 93       	push	r25
    1104:	8f 93       	push	r24
    1106:	1f 93       	push	r17
    1108:	0f 93       	push	r16
    110a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <sprintf>
		USART1_Transmit_String(buffer);
    110e:	c8 01       	movw	r24, r16
    1110:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		if (USART1.STATUS & USART_RXCIF_bm) {
    1114:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	88 23       	and	r24, r24
    111e:	24 f4       	brge	.+8      	; 0x1128 <BatteryCalibrationMode+0x74>
			quit = USART1_Receive_No_Wait();
    1120:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <USART1_Receive_No_Wait>
    1124:	18 2f       	mov	r17, r24
    1126:	01 c0       	rjmp	.+2      	; 0x112a <BatteryCalibrationMode+0x76>
	USART1_Transmit_String("This outputs the reading of the battery voltage. Press c to calibrate\n\r");
	ADC_Init();
	uint8_t quit = 0;
	int32_t batteryVolts = 0;
	while (tolower(quit) != 'q') {
		quit = 0;
    1128:	10 e0       	ldi	r17, 0x00	; 0
		sprintf(buffer, "%ld\n\r", batteryVolts);
		USART1_Transmit_String(buffer);
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
		if (tolower(quit) == 'c') {
    112a:	81 2f       	mov	r24, r17
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
    1132:	83 36       	cpi	r24, 0x63	; 99
    1134:	91 05       	cpc	r25, r1
    1136:	11 f4       	brne	.+4      	; 0x113c <BatteryCalibrationMode+0x88>
			Calibrate();
    1138:	0e 94 82 07 	call	0xf04	; 0xf04 <Calibrate>
    113c:	3f ef       	ldi	r19, 0xFF	; 255
    113e:	80 e7       	ldi	r24, 0x70	; 112
    1140:	92 e0       	ldi	r25, 0x02	; 2
    1142:	31 50       	subi	r19, 0x01	; 1
    1144:	80 40       	sbci	r24, 0x00	; 0
    1146:	90 40       	sbci	r25, 0x00	; 0
    1148:	e1 f7       	brne	.-8      	; 0x1142 <BatteryCalibrationMode+0x8e>
    114a:	00 c0       	rjmp	.+0      	; 0x114c <BatteryCalibrationMode+0x98>
    114c:	00 00       	nop
	USART1_Transmit_String("You are in Battery calibration mode (press q to exit)\n\r");
	USART1_Transmit_String("This outputs the reading of the battery voltage. Press c to calibrate\n\r");
	ADC_Init();
	uint8_t quit = 0;
	int32_t batteryVolts = 0;
	while (tolower(quit) != 'q') {
    114e:	81 2f       	mov	r24, r17
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
    1156:	81 37       	cpi	r24, 0x71	; 113
    1158:	91 05       	cpc	r25, r1
    115a:	09 f0       	breq	.+2      	; 0x115e <BatteryCalibrationMode+0xaa>
    115c:	c0 cf       	rjmp	.-128    	; 0x10de <BatteryCalibrationMode+0x2a>
		if (tolower(quit) == 'c') {
			Calibrate();
		}
		_delay_ms(300);
	}
	ADC_Button_Init();
    115e:	0e 94 80 00 	call	0x100	; 0x100 <ADC_Button_Init>
}
    1162:	2a 96       	adiw	r28, 0x0a	; 10
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <ClearScreen>:

void ClearScreen(void) {
	USART1_Transmit_String("\033[2J"); //Clear screen
    1172:	89 e5       	ldi	r24, 0x59	; 89
    1174:	95 e6       	ldi	r25, 0x65	; 101
    1176:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
	USART1_Transmit_String("\033[H"); //Move everything to the top
    117a:	8e e5       	ldi	r24, 0x5E	; 94
    117c:	95 e6       	ldi	r25, 0x65	; 101
    117e:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
    1182:	08 95       	ret

00001184 <Reset>:
}

void Reset(void) {
	USART1_Transmit_String("Resetting...\n\r");
    1184:	82 e6       	ldi	r24, 0x62	; 98
    1186:	95 e6       	ldi	r25, 0x65	; 101
    1188:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
    118c:	ff cf       	rjmp	.-2      	; 0x118c <Reset+0x8>

0000118e <main>:
	
}

int main(void)
{
	globalGain = (int16_t)eeprom_read_word(&eepromGain);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <eeprom_read_word>
    1196:	09 2e       	mov	r0, r25
    1198:	00 0c       	add	r0, r0
    119a:	aa 0b       	sbc	r26, r26
    119c:	bb 0b       	sbc	r27, r27
    119e:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <globalGain>
    11a2:	90 93 32 38 	sts	0x3832, r25	; 0x803832 <globalGain+0x1>
    11a6:	a0 93 33 38 	sts	0x3833, r26	; 0x803833 <globalGain+0x2>
    11aa:	b0 93 34 38 	sts	0x3834, r27	; 0x803834 <globalGain+0x3>
	uint8_t c = 0;
	USART1_Init();
    11ae:	0e 94 ce 0a 	call	0x159c	; 0x159c <USART1_Init>
	SPI_Init();
    11b2:	0e 94 bf 09 	call	0x137e	; 0x137e <SPI_Init>
	ADC_Button_Init();
    11b6:	0e 94 80 00 	call	0x100	; 0x100 <ADC_Button_Init>
	LED_Init();
    11ba:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED_Init>
	Timer_Init(DEFAULT_TOP_VALUE);
    11be:	88 e2       	ldi	r24, 0x28	; 40
    11c0:	98 e6       	ldi	r25, 0x68	; 104
    11c2:	0e 94 9d 0a 	call	0x153a	; 0x153a <Timer_Init>
	TCA0_Init();
    11c6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <TCA0_Init>
	FXLS8967_Init();
    11ca:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <FXLS8967_Init>
	sei();
    11ce:	78 94       	sei
	ClearScreen();
    11d0:	0e 94 b9 08 	call	0x1172	; 0x1172 <ClearScreen>
	wdt_reset();
    11d4:	a8 95       	wdr
    11d6:	2a ea       	ldi	r18, 0xAA	; 170
    11d8:	81 e1       	ldi	r24, 0x11	; 17
    11da:	94 e0       	ldi	r25, 0x04	; 4
    11dc:	21 50       	subi	r18, 0x01	; 1
    11de:	80 40       	sbci	r24, 0x00	; 0
    11e0:	90 40       	sbci	r25, 0x00	; 0
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <main+0x4e>
    11e4:	00 00       	nop
	_delay_ms(500);
    while (1) 
    {
		wdt_reset();
    11e6:	a8 95       	wdr
		USART1_Transmit_String("Please type the letter corresponding to what mode you would like to enter\n\r");
    11e8:	81 e7       	ldi	r24, 0x71	; 113
    11ea:	95 e6       	ldi	r25, 0x65	; 101
    11ec:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\ta: Read accelerometer\n\r");
    11f0:	8d eb       	ldi	r24, 0xBD	; 189
    11f2:	95 e6       	ldi	r25, 0x65	; 101
    11f4:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\tp: PWM\n\r");
    11f8:	86 ed       	ldi	r24, 0xD6	; 214
    11fa:	95 e6       	ldi	r25, 0x65	; 101
    11fc:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\tt: Timer\n\r");
    1200:	80 ee       	ldi	r24, 0xE0	; 224
    1202:	95 e6       	ldi	r25, 0x65	; 101
    1204:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\tu: Timer button\n\r");
    1208:	8c ee       	ldi	r24, 0xEC	; 236
    120a:	95 e6       	ldi	r25, 0x65	; 101
    120c:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\ts: Serial communication\n\r");
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	95 e6       	ldi	r25, 0x65	; 101
    1214:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\tl: Serial button LED\n\r");
    1218:	8a e1       	ldi	r24, 0x1A	; 26
    121a:	96 e6       	ldi	r25, 0x66	; 102
    121c:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\tb: Blinking LED\n\r");
    1220:	82 e3       	ldi	r24, 0x32	; 50
    1222:	96 e6       	ldi	r25, 0x66	; 102
    1224:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\ti: LED SPI\n\r");
    1228:	85 e4       	ldi	r24, 0x45	; 69
    122a:	96 e6       	ldi	r25, 0x66	; 102
    122c:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\tv: PWM SPI\n\r");
    1230:	83 e5       	ldi	r24, 0x53	; 83
    1232:	96 e6       	ldi	r25, 0x66	; 102
    1234:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\ty: Battery calibration\n\r");
    1238:	81 e6       	ldi	r24, 0x61	; 97
    123a:	96 e6       	ldi	r25, 0x66	; 102
    123c:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\tc: Clear screen\n\r");
    1240:	8b e7       	ldi	r24, 0x7B	; 123
    1242:	96 e6       	ldi	r25, 0x66	; 102
    1244:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		USART1_Transmit_String("\tr: Reset\n\r");
    1248:	8e e8       	ldi	r24, 0x8E	; 142
    124a:	96 e6       	ldi	r25, 0x66	; 102
    124c:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
		c = USART1_Receive();
    1250:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <USART1_Receive>
		c = tolower(c);
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <tolower>
		switch (c)
    125a:	fc 01       	movw	r30, r24
    125c:	ff 27       	eor	r31, r31
    125e:	e1 56       	subi	r30, 0x61	; 97
    1260:	f1 09       	sbc	r31, r1
    1262:	e9 31       	cpi	r30, 0x19	; 25
    1264:	f1 05       	cpc	r31, r1
    1266:	38 f5       	brcc	.+78     	; 0x12b6 <main+0x128>
    1268:	e8 5b       	subi	r30, 0xB8	; 184
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <__tablejump2__>
		{
		case 'a':
			ReadAccelerometerMode();
    1270:	0e 94 c0 01 	call	0x380	; 0x380 <ReadAccelerometerMode>
			break;
    1274:	24 c0       	rjmp	.+72     	; 0x12be <main+0x130>
		case 'p':
			PWMMode();
    1276:	0e 94 06 03 	call	0x60c	; 0x60c <PWMMode>
			break;
    127a:	21 c0       	rjmp	.+66     	; 0x12be <main+0x130>
		case 't':
			TimerMode();
    127c:	0e 94 2e 03 	call	0x65c	; 0x65c <TimerMode>
			break;
    1280:	1e c0       	rjmp	.+60     	; 0x12be <main+0x130>
		case 'u':
			TimerButtonMode();
    1282:	0e 94 57 03 	call	0x6ae	; 0x6ae <TimerButtonMode>
			break;
    1286:	1b c0       	rjmp	.+54     	; 0x12be <main+0x130>
		case 's':
			SerialCommunicationMode();
    1288:	0e 94 c5 03 	call	0x78a	; 0x78a <SerialCommunicationMode>
			break;
    128c:	18 c0       	rjmp	.+48     	; 0x12be <main+0x130>
		case 'l':
			SerialButtonLEDMode();
    128e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <SerialButtonLEDMode>
			break;
    1292:	15 c0       	rjmp	.+42     	; 0x12be <main+0x130>
		case 'b':
			BlinkingLEDMode();
    1294:	0e 94 11 06 	call	0xc22	; 0xc22 <BlinkingLEDMode>
			break;
    1298:	12 c0       	rjmp	.+36     	; 0x12be <main+0x130>
		case 'i':
			LEDSPIMode();
    129a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LEDSPIMode>
			break;
    129e:	0f c0       	rjmp	.+30     	; 0x12be <main+0x130>
		case 'v':
			PWMSPIMode();
    12a0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <PWMSPIMode>
			break;
    12a4:	0c c0       	rjmp	.+24     	; 0x12be <main+0x130>
		case 'y':
			BatteryCalibrationMode();
    12a6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <BatteryCalibrationMode>
			break;
    12aa:	09 c0       	rjmp	.+18     	; 0x12be <main+0x130>
		case 'c':
			ClearScreen();
    12ac:	0e 94 b9 08 	call	0x1172	; 0x1172 <ClearScreen>
			break;
    12b0:	06 c0       	rjmp	.+12     	; 0x12be <main+0x130>
		case 'r':
			Reset();
    12b2:	0e 94 c2 08 	call	0x1184	; 0x1184 <Reset>
			break;
		default:
			USART1_Transmit_String("Invalid input. Please try again.\n\r");
    12b6:	8a e9       	ldi	r24, 0x9A	; 154
    12b8:	96 e6       	ldi	r25, 0x66	; 102
    12ba:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
			break;
		}
		USART1_Transmit_String("\n\r");
    12be:	87 e6       	ldi	r24, 0x67	; 103
    12c0:	94 e6       	ldi	r25, 0x64	; 100
    12c2:	0e 94 37 0b 	call	0x166e	; 0x166e <USART1_Transmit_String>
    }
    12c6:	8f cf       	rjmp	.-226    	; 0x11e6 <main+0x58>

000012c8 <lsqrt>:
	SPI_Transfer(reg | 0x80); // Read command
	SPI_Transfer(0x00);
	data = SPI_Transfer(0x00);
	FXLS8967_Deselect();
	return data;
}
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	8b 01       	movw	r16, r22
    12d6:	9c 01       	movw	r18, r24
    12d8:	99 23       	and	r25, r25
    12da:	0c f4       	brge	.+2      	; 0x12de <lsqrt+0x16>
    12dc:	43 c0       	rjmp	.+134    	; 0x1364 <lsqrt+0x9c>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e4       	ldi	r27, 0x40	; 64
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <lsqrt+0x30>
    12e8:	b5 95       	asr	r27
    12ea:	a7 95       	ror	r26
    12ec:	97 95       	ror	r25
    12ee:	87 95       	ror	r24
    12f0:	b5 95       	asr	r27
    12f2:	a7 95       	ror	r26
    12f4:	97 95       	ror	r25
    12f6:	87 95       	ror	r24
    12f8:	08 17       	cp	r16, r24
    12fa:	19 07       	cpc	r17, r25
    12fc:	2a 07       	cpc	r18, r26
    12fe:	3b 07       	cpc	r19, r27
    1300:	9c f3       	brlt	.-26     	; 0x12e8 <lsqrt+0x20>
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	ba 01       	movw	r22, r20
    1308:	24 c0       	rjmp	.+72     	; 0x1352 <lsqrt+0x8a>
    130a:	6a 01       	movw	r12, r20
    130c:	7b 01       	movw	r14, r22
    130e:	c8 0e       	add	r12, r24
    1310:	d9 1e       	adc	r13, r25
    1312:	ea 1e       	adc	r14, r26
    1314:	fb 1e       	adc	r15, r27
    1316:	0c 15       	cp	r16, r12
    1318:	1d 05       	cpc	r17, r13
    131a:	2e 05       	cpc	r18, r14
    131c:	3f 05       	cpc	r19, r15
    131e:	6c f0       	brlt	.+26     	; 0x133a <lsqrt+0x72>
    1320:	0c 19       	sub	r16, r12
    1322:	1d 09       	sbc	r17, r13
    1324:	2e 09       	sbc	r18, r14
    1326:	3f 09       	sbc	r19, r15
    1328:	75 95       	asr	r23
    132a:	67 95       	ror	r22
    132c:	57 95       	ror	r21
    132e:	47 95       	ror	r20
    1330:	48 0f       	add	r20, r24
    1332:	59 1f       	adc	r21, r25
    1334:	6a 1f       	adc	r22, r26
    1336:	7b 1f       	adc	r23, r27
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <lsqrt+0x7a>
    133a:	75 95       	asr	r23
    133c:	67 95       	ror	r22
    133e:	57 95       	ror	r21
    1340:	47 95       	ror	r20
    1342:	b5 95       	asr	r27
    1344:	a7 95       	ror	r26
    1346:	97 95       	ror	r25
    1348:	87 95       	ror	r24
    134a:	b5 95       	asr	r27
    134c:	a7 95       	ror	r26
    134e:	97 95       	ror	r25
    1350:	87 95       	ror	r24
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	a1 05       	cpc	r26, r1
    1356:	b1 05       	cpc	r27, r1
    1358:	c1 f6       	brne	.-80     	; 0x130a <lsqrt+0x42>
    135a:	34 2f       	mov	r19, r20
    135c:	25 2f       	mov	r18, r21
    135e:	86 2f       	mov	r24, r22
    1360:	97 2f       	mov	r25, r23
    1362:	04 c0       	rjmp	.+8      	; 0x136c <lsqrt+0xa4>
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	2f ef       	ldi	r18, 0xFF	; 255
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	63 2f       	mov	r22, r19
    136e:	72 2f       	mov	r23, r18
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	ff 90       	pop	r15
    1376:	ef 90       	pop	r14
    1378:	df 90       	pop	r13
    137a:	cf 90       	pop	r12
    137c:	08 95       	ret

0000137e <SPI_Init>:
    137e:	e0 e0       	ldi	r30, 0x00	; 0
    1380:	f4 e0       	ldi	r31, 0x04	; 4
    1382:	80 e5       	ldi	r24, 0x50	; 80
    1384:	81 83       	std	Z+1, r24	; 0x01
    1386:	80 e2       	ldi	r24, 0x20	; 32
    1388:	82 83       	std	Z+2, r24	; 0x02
    138a:	80 e8       	ldi	r24, 0x80	; 128
    138c:	81 83       	std	Z+1, r24	; 0x01
    138e:	87 e2       	ldi	r24, 0x27	; 39
    1390:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__RODATA_PM_OFFSET__+0x7fc8c0>
    1394:	08 95       	ret

00001396 <SPI_Transfer>:
    1396:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
    139a:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__RODATA_PM_OFFSET__+0x7fc8c3>
    139e:	88 23       	and	r24, r24
    13a0:	e4 f7       	brge	.-8      	; 0x139a <SPI_Transfer+0x4>
    13a2:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
    13a6:	08 95       	ret

000013a8 <FXLS8967_Select>:
    13a8:	80 e8       	ldi	r24, 0x80	; 128
    13aa:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7fc406>
    13ae:	08 95       	ret

000013b0 <FXLS8967_Deselect>:
    13b0:	80 e8       	ldi	r24, 0x80	; 128
    13b2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7fc405>
    13b6:	08 95       	ret

000013b8 <FXLS8967_WriteByte>:
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	d8 2f       	mov	r29, r24
    13be:	c6 2f       	mov	r28, r22
    13c0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <FXLS8967_Select>
    13c4:	8d 2f       	mov	r24, r29
    13c6:	8f 77       	andi	r24, 0x7F	; 127
    13c8:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
    13d2:	8c 2f       	mov	r24, r28
    13d4:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
    13d8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <FXLS8967_Deselect>
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	08 95       	ret

000013e2 <FXLS8967_Init>:

// Initialize the FXLS8967
void FXLS8967_Init(void) {
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG1, 0x00);
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	85 e1       	ldi	r24, 0x15	; 21
    13e6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <FXLS8967_WriteByte>
	
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG5, 0x10);
    13ea:	60 e1       	ldi	r22, 0x10	; 16
    13ec:	89 e1       	ldi	r24, 0x19	; 25
    13ee:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <FXLS8967_WriteByte>
	
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG1, 0x07); // Set to active mode
    13f2:	67 e0       	ldi	r22, 0x07	; 7
    13f4:	85 e1       	ldi	r24, 0x15	; 21
    13f6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <FXLS8967_WriteByte>
    13fa:	08 95       	ret

000013fc <FXLS8967_ReadAccel>:
}

// Read accelerometer data
void FXLS8967_ReadAccel(int16_t *x, int16_t *y, int16_t *z, int16_t *a) {
    13fc:	6f 92       	push	r6
    13fe:	7f 92       	push	r7
    1400:	8f 92       	push	r8
    1402:	9f 92       	push	r9
    1404:	af 92       	push	r10
    1406:	bf 92       	push	r11
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	8c 01       	movw	r16, r24
    141a:	eb 01       	movw	r28, r22
    141c:	6a 01       	movw	r12, r20
    141e:	79 01       	movw	r14, r18
	uint8_t x_msb, x_lsb, y_msb, y_lsb, z_msb, z_lsb;
	long la;
	
	FXLS8967_Select();
    1420:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <FXLS8967_Select>
	SPI_Transfer(FXLS8967_REG_OUT_X_LSB | 0x80);
    1424:	84 e8       	ldi	r24, 0x84	; 132
    1426:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
	SPI_Transfer(0x00);
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
	x_lsb = SPI_Transfer(0x00);
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
    1436:	68 2e       	mov	r6, r24
	x_msb = SPI_Transfer(0x00);
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
    143e:	78 2e       	mov	r7, r24
	y_lsb = SPI_Transfer(0x00);
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
    1446:	88 2e       	mov	r8, r24
	y_msb = SPI_Transfer(0x00);
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
    144e:	98 2e       	mov	r9, r24
	z_lsb = SPI_Transfer(0x00);
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
    1456:	a8 2e       	mov	r10, r24
	z_msb = SPI_Transfer(0x00);
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	0e 94 cb 09 	call	0x1396	; 0x1396 <SPI_Transfer>
    145e:	b8 2e       	mov	r11, r24
	FXLS8967_Deselect();
    1460:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <FXLS8967_Deselect>

	*x = (uint16_t)((((x_msb << 8) | x_lsb) << 4) / 2);
    1464:	87 2d       	mov	r24, r7
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	98 2f       	mov	r25, r24
    146a:	88 27       	eor	r24, r24
    146c:	86 29       	or	r24, r6
    146e:	9c 01       	movw	r18, r24
    1470:	22 95       	swap	r18
    1472:	32 95       	swap	r19
    1474:	30 7f       	andi	r19, 0xF0	; 240
    1476:	32 27       	eor	r19, r18
    1478:	20 7f       	andi	r18, 0xF0	; 240
    147a:	32 27       	eor	r19, r18
    147c:	93 ff       	sbrs	r25, 3
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <FXLS8967_ReadAccel+0x88>
    1480:	2f 5f       	subi	r18, 0xFF	; 255
    1482:	3f 4f       	sbci	r19, 0xFF	; 255
    1484:	35 95       	asr	r19
    1486:	27 95       	ror	r18
    1488:	f8 01       	movw	r30, r16
    148a:	20 83       	st	Z, r18
    148c:	31 83       	std	Z+1, r19	; 0x01
	*y = (uint16_t)((((y_msb << 8) | y_lsb) << 4) / 2);
    148e:	89 2d       	mov	r24, r9
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	98 2f       	mov	r25, r24
    1494:	88 27       	eor	r24, r24
    1496:	88 29       	or	r24, r8
    1498:	9c 01       	movw	r18, r24
    149a:	22 95       	swap	r18
    149c:	32 95       	swap	r19
    149e:	30 7f       	andi	r19, 0xF0	; 240
    14a0:	32 27       	eor	r19, r18
    14a2:	20 7f       	andi	r18, 0xF0	; 240
    14a4:	32 27       	eor	r19, r18
    14a6:	93 ff       	sbrs	r25, 3
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <FXLS8967_ReadAccel+0xb2>
    14aa:	2f 5f       	subi	r18, 0xFF	; 255
    14ac:	3f 4f       	sbci	r19, 0xFF	; 255
    14ae:	35 95       	asr	r19
    14b0:	27 95       	ror	r18
    14b2:	28 83       	st	Y, r18
    14b4:	39 83       	std	Y+1, r19	; 0x01
	*z = (uint16_t)((((z_msb << 8) | z_lsb) << 4) / 2);
    14b6:	8b 2d       	mov	r24, r11
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	98 2f       	mov	r25, r24
    14bc:	88 27       	eor	r24, r24
    14be:	8a 29       	or	r24, r10
    14c0:	ac 01       	movw	r20, r24
    14c2:	42 95       	swap	r20
    14c4:	52 95       	swap	r21
    14c6:	50 7f       	andi	r21, 0xF0	; 240
    14c8:	54 27       	eor	r21, r20
    14ca:	40 7f       	andi	r20, 0xF0	; 240
    14cc:	54 27       	eor	r21, r20
    14ce:	93 ff       	sbrs	r25, 3
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <FXLS8967_ReadAccel+0xda>
    14d2:	4f 5f       	subi	r20, 0xFF	; 255
    14d4:	5f 4f       	sbci	r21, 0xFF	; 255
    14d6:	55 95       	asr	r21
    14d8:	47 95       	ror	r20
    14da:	f6 01       	movw	r30, r12
    14dc:	40 83       	st	Z, r20
    14de:	51 83       	std	Z+1, r21	; 0x01
	
	la = (long)*x * (long)*x + (long)*y * (long)*y + (long)*z * (long)*z;
    14e0:	f8 01       	movw	r30, r16
    14e2:	a0 81       	ld	r26, Z
    14e4:	b1 81       	ldd	r27, Z+1	; 0x01
    14e6:	9d 01       	movw	r18, r26
    14e8:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulhisi3>
    14ec:	4b 01       	movw	r8, r22
    14ee:	5c 01       	movw	r10, r24
    14f0:	a8 81       	ld	r26, Y
    14f2:	b9 81       	ldd	r27, Y+1	; 0x01
    14f4:	9d 01       	movw	r18, r26
    14f6:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulhisi3>
    14fa:	86 0e       	add	r8, r22
    14fc:	97 1e       	adc	r9, r23
    14fe:	a8 1e       	adc	r10, r24
    1500:	b9 1e       	adc	r11, r25
    1502:	9a 01       	movw	r18, r20
    1504:	da 01       	movw	r26, r20
    1506:	0e 94 ad 0b 	call	0x175a	; 0x175a <__mulhisi3>
    150a:	68 0d       	add	r22, r8
    150c:	79 1d       	adc	r23, r9
    150e:	8a 1d       	adc	r24, r10
    1510:	9b 1d       	adc	r25, r11
	la = lsqrt(la);
    1512:	0e 94 64 09 	call	0x12c8	; 0x12c8 <lsqrt>
	*a = (uint16_t)la;
    1516:	f7 01       	movw	r30, r14
    1518:	60 83       	st	Z, r22
    151a:	71 83       	std	Z+1, r23	; 0x01
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	df 90       	pop	r13
    152a:	cf 90       	pop	r12
    152c:	bf 90       	pop	r11
    152e:	af 90       	pop	r10
    1530:	9f 90       	pop	r9
    1532:	8f 90       	pop	r8
    1534:	7f 90       	pop	r7
    1536:	6f 90       	pop	r6
    1538:	08 95       	ret

0000153a <Timer_Init>:
}

void Set_Brightness(uint8_t brightness) {
    Set_Brightness_Red(brightness);
    Set_Brightness_Green(brightness);
}
    153a:	9c 01       	movw	r18, r24
    153c:	e0 e8       	ldi	r30, 0x80	; 128
    153e:	fa e0       	ldi	r31, 0x0A	; 10
    1540:	90 81       	ld	r25, Z
    1542:	9e 7f       	andi	r25, 0xFE	; 254
    1544:	90 83       	st	Z, r25
    1546:	24 87       	std	Z+12, r18	; 0x0c
    1548:	35 87       	std	Z+13, r19	; 0x0d
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	85 83       	std	Z+5, r24	; 0x05
    154e:	08 95       	ret

00001550 <Timer_Start>:
    1550:	e0 e8       	ldi	r30, 0x80	; 128
    1552:	fa e0       	ldi	r31, 0x0A	; 10
    1554:	80 81       	ld	r24, Z
    1556:	81 60       	ori	r24, 0x01	; 1
    1558:	80 83       	st	Z, r24
    155a:	08 95       	ret

0000155c <Timer_Stop>:
    155c:	e0 e8       	ldi	r30, 0x80	; 128
    155e:	fa e0       	ldi	r31, 0x0A	; 10
    1560:	80 81       	ld	r24, Z
    1562:	8e 7f       	andi	r24, 0xFE	; 254
    1564:	80 83       	st	Z, r24
    1566:	08 95       	ret

00001568 <Set_Brightness_Red>:
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7fca28>
    156e:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7fca29>
    1572:	08 95       	ret

00001574 <Set_Brightness_Green>:
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__RODATA_PM_OFFSET__+0x7fca2a>
    157a:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__RODATA_PM_OFFSET__+0x7fca2b>
    157e:	08 95       	ret

00001580 <TCA0_Init>:

void TCA0_Init(void) {
	TCA0.SINGLE.PER = 0xFF;
    1580:	e0 e0       	ldi	r30, 0x00	; 0
    1582:	fa e0       	ldi	r31, 0x0A	; 10
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	86 a3       	std	Z+38, r24	; 0x26
    158a:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_SINGLESLOPE_gc | TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm;
    158c:	83 e3       	ldi	r24, 0x33	; 51
    158e:	81 83       	std	Z+1, r24	; 0x01
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTF_gc;
    1590:	85 e0       	ldi	r24, 0x05	; 5
    1592:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__RODATA_PM_OFFSET__+0x7fc5e4>
	TCA0.SINGLE.CTRLA = TCA_SINGLE_ENABLE_bm;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	80 83       	st	Z, r24
    159a:	08 95       	ret

0000159c <USART1_Init>:
#include "UART.h"

void USART1_Init(void) {
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
	int8_t sigrow_val = SIGROW.OSC16ERR3V;
    15a0:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
	int32_t baud_reg_val = BAUD_SETTING;
	baud_reg_val *= (1024 + sigrow_val);
    15a4:	0a 2e       	mov	r0, r26
    15a6:	00 0c       	add	r0, r0
    15a8:	bb 0b       	sbc	r27, r27
    15aa:	bc 5f       	subi	r27, 0xFC	; 252
    15ac:	27 e5       	ldi	r18, 0x57	; 87
    15ae:	34 e0       	ldi	r19, 0x04	; 4
    15b0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <__usmulhisi3>
	baud_reg_val /= 1024;
    15b4:	8b 01       	movw	r16, r22
    15b6:	9c 01       	movw	r18, r24
    15b8:	99 23       	and	r25, r25
    15ba:	24 f4       	brge	.+8      	; 0x15c4 <USART1_Init+0x28>
    15bc:	01 50       	subi	r16, 0x01	; 1
    15be:	1c 4f       	sbci	r17, 0xFC	; 252
    15c0:	2f 4f       	sbci	r18, 0xFF	; 255
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	d9 01       	movw	r26, r18
    15c6:	c8 01       	movw	r24, r16
    15c8:	07 2e       	mov	r0, r23
    15ca:	7a e0       	ldi	r23, 0x0A	; 10
    15cc:	b5 95       	asr	r27
    15ce:	a7 95       	ror	r26
    15d0:	97 95       	ror	r25
    15d2:	87 95       	ror	r24
    15d4:	7a 95       	dec	r23
    15d6:	d1 f7       	brne	.-12     	; 0x15cc <USART1_Init+0x30>
    15d8:	70 2d       	mov	r23, r0
	
	USART1.BAUD = (uint16_t)baud_reg_val;
    15da:	e0 e2       	ldi	r30, 0x20	; 32
    15dc:	f8 e0       	ldi	r31, 0x08	; 8
    15de:	80 87       	std	Z+8, r24	; 0x08
    15e0:	91 87       	std	Z+9, r25	; 0x09
	PORTC.DIRSET = PIN0_bm;
    15e2:	a0 e4       	ldi	r26, 0x40	; 64
    15e4:	b4 e0       	ldi	r27, 0x04	; 4
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	8c 93       	st	X, r24
    15ec:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.DIRCLR = PIN1_bm;
    15ee:	82 e0       	ldi	r24, 0x02	; 2
    15f0:	12 96       	adiw	r26, 0x02	; 2
    15f2:	8c 93       	st	X, r24
	
	USART1.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    15f4:	80 ec       	ldi	r24, 0xC0	; 192
    15f6:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
    15f8:	83 e0       	ldi	r24, 0x03	; 3
    15fa:	87 83       	std	Z+7, r24	; 0x07
}
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	08 95       	ret

00001602 <USART1_Transmit>:

void USART1_Transmit(uint8_t data) {
	while (!(USART1.STATUS & USART_DREIF_bm));
    1602:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
    1606:	95 ff       	sbrs	r25, 5
    1608:	fc cf       	rjmp	.-8      	; 0x1602 <USART1_Transmit>
	USART1.TXDATAL = data;
    160a:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7fc822>
    160e:	08 95       	ret

00001610 <USART1_Transmit_Number>:
}

void USART1_Transmit_Number(uint16_t num) {
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	2a 97       	sbiw	r28, 0x0a	; 10
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	de bf       	out	0x3e, r29	; 62
	char buffer[10];
	sprintf(buffer, "%d", num);
    1620:	9f 93       	push	r25
    1622:	8f 93       	push	r24
    1624:	8d eb       	ldi	r24, 0xBD	; 189
    1626:	96 e6       	ldi	r25, 0x66	; 102
    1628:	9f 93       	push	r25
    162a:	8f 93       	push	r24
    162c:	ce 01       	movw	r24, r28
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	9f 93       	push	r25
    1632:	8f 93       	push	r24
    1634:	0e 94 0c 0c 	call	0x1818	; 0x1818 <sprintf>

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	03 c0       	rjmp	.+6      	; 0x164e <USART1_Transmit_Number+0x3e>
		USART1_Transmit((uint8_t)buffer[i]);
    1648:	0e 94 01 0b 	call	0x1602	; 0x1602 <USART1_Transmit>

void USART1_Transmit_Number(uint16_t num) {
	char buffer[10];
	sprintf(buffer, "%d", num);

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
    164c:	1f 5f       	subi	r17, 0xFF	; 255
    164e:	e1 e0       	ldi	r30, 0x01	; 1
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	ec 0f       	add	r30, r28
    1654:	fd 1f       	adc	r31, r29
    1656:	e1 0f       	add	r30, r17
    1658:	f1 1d       	adc	r31, r1
    165a:	80 81       	ld	r24, Z
    165c:	81 11       	cpse	r24, r1
    165e:	f4 cf       	rjmp	.-24     	; 0x1648 <USART1_Transmit_Number+0x38>
		USART1_Transmit((uint8_t)buffer[i]);
	}
}
    1660:	2a 96       	adiw	r28, 0x0a	; 10
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	08 95       	ret

0000166e <USART1_Transmit_String>:

void USART1_Transmit_String(char* string) {
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	7c 01       	movw	r14, r24
	uint16_t string_len = strlen(string);
    167c:	fc 01       	movw	r30, r24
    167e:	01 90       	ld	r0, Z+
    1680:	00 20       	and	r0, r0
    1682:	e9 f7       	brne	.-6      	; 0x167e <USART1_Transmit_String+0x10>
    1684:	31 97       	sbiw	r30, 0x01	; 1
    1686:	8f 01       	movw	r16, r30
    1688:	08 1b       	sub	r16, r24
    168a:	19 0b       	sbc	r17, r25
	for (uint16_t i = 0; i < string_len; i++) {
    168c:	c0 e0       	ldi	r28, 0x00	; 0
    168e:	d0 e0       	ldi	r29, 0x00	; 0
    1690:	07 c0       	rjmp	.+14     	; 0x16a0 <USART1_Transmit_String+0x32>
		USART1_Transmit((uint8_t)string[i]);
    1692:	f7 01       	movw	r30, r14
    1694:	ec 0f       	add	r30, r28
    1696:	fd 1f       	adc	r31, r29
    1698:	80 81       	ld	r24, Z
    169a:	0e 94 01 0b 	call	0x1602	; 0x1602 <USART1_Transmit>
	}
}

void USART1_Transmit_String(char* string) {
	uint16_t string_len = strlen(string);
	for (uint16_t i = 0; i < string_len; i++) {
    169e:	21 96       	adiw	r28, 0x01	; 1
    16a0:	c0 17       	cp	r28, r16
    16a2:	d1 07       	cpc	r29, r17
    16a4:	b0 f3       	brcs	.-20     	; 0x1692 <USART1_Transmit_String+0x24>
		USART1_Transmit((uint8_t)string[i]);
	}
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	08 95       	ret

000016b4 <USART1_Receive>:

uint8_t USART1_Receive(void) {
	while (!(USART1.STATUS & USART_RXCIF_bm)) wdt_reset();
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <USART1_Receive+0x4>
    16b6:	a8 95       	wdr
    16b8:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
    16bc:	88 23       	and	r24, r24
    16be:	dc f7       	brge	.-10     	; 0x16b6 <USART1_Receive+0x2>
	return USART1.RXDATAL;
    16c0:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7fc820>
}
    16c4:	08 95       	ret

000016c6 <USART1_Receive_No_Wait>:

uint8_t USART1_Receive_No_Wait(void) {
	return USART1.RXDATAL;
    16c6:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7fc820>
    16ca:	08 95       	ret

000016cc <__udivmodsi4>:
    16cc:	a1 e2       	ldi	r26, 0x21	; 33
    16ce:	1a 2e       	mov	r1, r26
    16d0:	aa 1b       	sub	r26, r26
    16d2:	bb 1b       	sub	r27, r27
    16d4:	fd 01       	movw	r30, r26
    16d6:	0d c0       	rjmp	.+26     	; 0x16f2 <__udivmodsi4_ep>

000016d8 <__udivmodsi4_loop>:
    16d8:	aa 1f       	adc	r26, r26
    16da:	bb 1f       	adc	r27, r27
    16dc:	ee 1f       	adc	r30, r30
    16de:	ff 1f       	adc	r31, r31
    16e0:	a2 17       	cp	r26, r18
    16e2:	b3 07       	cpc	r27, r19
    16e4:	e4 07       	cpc	r30, r20
    16e6:	f5 07       	cpc	r31, r21
    16e8:	20 f0       	brcs	.+8      	; 0x16f2 <__udivmodsi4_ep>
    16ea:	a2 1b       	sub	r26, r18
    16ec:	b3 0b       	sbc	r27, r19
    16ee:	e4 0b       	sbc	r30, r20
    16f0:	f5 0b       	sbc	r31, r21

000016f2 <__udivmodsi4_ep>:
    16f2:	66 1f       	adc	r22, r22
    16f4:	77 1f       	adc	r23, r23
    16f6:	88 1f       	adc	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	1a 94       	dec	r1
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <__udivmodsi4_loop>
    16fe:	60 95       	com	r22
    1700:	70 95       	com	r23
    1702:	80 95       	com	r24
    1704:	90 95       	com	r25
    1706:	9b 01       	movw	r18, r22
    1708:	ac 01       	movw	r20, r24
    170a:	bd 01       	movw	r22, r26
    170c:	cf 01       	movw	r24, r30
    170e:	08 95       	ret

00001710 <__divmodsi4>:
    1710:	05 2e       	mov	r0, r21
    1712:	97 fb       	bst	r25, 7
    1714:	1e f4       	brtc	.+6      	; 0x171c <__divmodsi4+0xc>
    1716:	00 94       	com	r0
    1718:	0e 94 9f 0b 	call	0x173e	; 0x173e <__negsi2>
    171c:	57 fd       	sbrc	r21, 7
    171e:	07 d0       	rcall	.+14     	; 0x172e <__divmodsi4_neg2>
    1720:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__udivmodsi4>
    1724:	07 fc       	sbrc	r0, 7
    1726:	03 d0       	rcall	.+6      	; 0x172e <__divmodsi4_neg2>
    1728:	4e f4       	brtc	.+18     	; 0x173c <__divmodsi4_exit>
    172a:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__negsi2>

0000172e <__divmodsi4_neg2>:
    172e:	50 95       	com	r21
    1730:	40 95       	com	r20
    1732:	30 95       	com	r19
    1734:	21 95       	neg	r18
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	4f 4f       	sbci	r20, 0xFF	; 255
    173a:	5f 4f       	sbci	r21, 0xFF	; 255

0000173c <__divmodsi4_exit>:
    173c:	08 95       	ret

0000173e <__negsi2>:
    173e:	90 95       	com	r25
    1740:	80 95       	com	r24
    1742:	70 95       	com	r23
    1744:	61 95       	neg	r22
    1746:	7f 4f       	sbci	r23, 0xFF	; 255
    1748:	8f 4f       	sbci	r24, 0xFF	; 255
    174a:	9f 4f       	sbci	r25, 0xFF	; 255
    174c:	08 95       	ret

0000174e <__tablejump2__>:
    174e:	ee 0f       	add	r30, r30
    1750:	ff 1f       	adc	r31, r31
    1752:	05 90       	lpm	r0, Z+
    1754:	f4 91       	lpm	r31, Z
    1756:	e0 2d       	mov	r30, r0
    1758:	09 94       	ijmp

0000175a <__mulhisi3>:
    175a:	0e 94 b5 0b 	call	0x176a	; 0x176a <__umulhisi3>
    175e:	33 23       	and	r19, r19
    1760:	12 f4       	brpl	.+4      	; 0x1766 <__mulhisi3+0xc>
    1762:	8a 1b       	sub	r24, r26
    1764:	9b 0b       	sbc	r25, r27
    1766:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__usmulhisi3_tail>

0000176a <__umulhisi3>:
    176a:	a2 9f       	mul	r26, r18
    176c:	b0 01       	movw	r22, r0
    176e:	b3 9f       	mul	r27, r19
    1770:	c0 01       	movw	r24, r0
    1772:	a3 9f       	mul	r26, r19
    1774:	70 0d       	add	r23, r0
    1776:	81 1d       	adc	r24, r1
    1778:	11 24       	eor	r1, r1
    177a:	91 1d       	adc	r25, r1
    177c:	b2 9f       	mul	r27, r18
    177e:	70 0d       	add	r23, r0
    1780:	81 1d       	adc	r24, r1
    1782:	11 24       	eor	r1, r1
    1784:	91 1d       	adc	r25, r1
    1786:	08 95       	ret

00001788 <__usmulhisi3>:
    1788:	0e 94 b5 0b 	call	0x176a	; 0x176a <__umulhisi3>

0000178c <__usmulhisi3_tail>:
    178c:	b7 ff       	sbrs	r27, 7
    178e:	08 95       	ret
    1790:	82 1b       	sub	r24, r18
    1792:	93 0b       	sbc	r25, r19
    1794:	08 95       	ret

00001796 <__muluhisi3>:
    1796:	0e 94 b5 0b 	call	0x176a	; 0x176a <__umulhisi3>
    179a:	a5 9f       	mul	r26, r21
    179c:	90 0d       	add	r25, r0
    179e:	b4 9f       	mul	r27, r20
    17a0:	90 0d       	add	r25, r0
    17a2:	a4 9f       	mul	r26, r20
    17a4:	80 0d       	add	r24, r0
    17a6:	91 1d       	adc	r25, r1
    17a8:	11 24       	eor	r1, r1
    17aa:	08 95       	ret

000017ac <atoi>:
    17ac:	fc 01       	movw	r30, r24
    17ae:	88 27       	eor	r24, r24
    17b0:	99 27       	eor	r25, r25
    17b2:	e8 94       	clt
    17b4:	21 91       	ld	r18, Z+
    17b6:	20 32       	cpi	r18, 0x20	; 32
    17b8:	e9 f3       	breq	.-6      	; 0x17b4 <atoi+0x8>
    17ba:	29 30       	cpi	r18, 0x09	; 9
    17bc:	10 f0       	brcs	.+4      	; 0x17c2 <atoi+0x16>
    17be:	2e 30       	cpi	r18, 0x0E	; 14
    17c0:	c8 f3       	brcs	.-14     	; 0x17b4 <atoi+0x8>
    17c2:	2b 32       	cpi	r18, 0x2B	; 43
    17c4:	41 f0       	breq	.+16     	; 0x17d6 <atoi+0x2a>
    17c6:	2d 32       	cpi	r18, 0x2D	; 45
    17c8:	39 f4       	brne	.+14     	; 0x17d8 <atoi+0x2c>
    17ca:	68 94       	set
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <atoi+0x2a>
    17ce:	0e 94 04 0c 	call	0x1808	; 0x1808 <__mulhi_const_10>
    17d2:	82 0f       	add	r24, r18
    17d4:	91 1d       	adc	r25, r1
    17d6:	21 91       	ld	r18, Z+
    17d8:	20 53       	subi	r18, 0x30	; 48
    17da:	2a 30       	cpi	r18, 0x0A	; 10
    17dc:	c0 f3       	brcs	.-16     	; 0x17ce <atoi+0x22>
    17de:	1e f4       	brtc	.+6      	; 0x17e6 <atoi+0x3a>
    17e0:	90 95       	com	r25
    17e2:	81 95       	neg	r24
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	08 95       	ret

000017e8 <tolower>:
    17e8:	91 11       	cpse	r25, r1
    17ea:	08 95       	ret
    17ec:	81 54       	subi	r24, 0x41	; 65
    17ee:	8a 51       	subi	r24, 0x1A	; 26
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <tolower+0xc>
    17f2:	80 5e       	subi	r24, 0xE0	; 224
    17f4:	85 5a       	subi	r24, 0xA5	; 165
    17f6:	08 95       	ret

000017f8 <toupper>:
    17f8:	91 11       	cpse	r25, r1
    17fa:	08 95       	ret
    17fc:	81 56       	subi	r24, 0x61	; 97
    17fe:	8a 51       	subi	r24, 0x1A	; 26
    1800:	08 f4       	brcc	.+2      	; 0x1804 <toupper+0xc>
    1802:	80 52       	subi	r24, 0x20	; 32
    1804:	85 58       	subi	r24, 0x85	; 133
    1806:	08 95       	ret

00001808 <__mulhi_const_10>:
    1808:	7a e0       	ldi	r23, 0x0A	; 10
    180a:	97 9f       	mul	r25, r23
    180c:	90 2d       	mov	r25, r0
    180e:	87 9f       	mul	r24, r23
    1810:	80 2d       	mov	r24, r0
    1812:	91 0d       	add	r25, r1
    1814:	11 24       	eor	r1, r1
    1816:	08 95       	ret

00001818 <sprintf>:
    1818:	ae e0       	ldi	r26, 0x0E	; 14
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e2 e1       	ldi	r30, 0x12	; 18
    181e:	fc e0       	ldi	r31, 0x0C	; 12
    1820:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__prologue_saves__+0x1c>
    1824:	0d 89       	ldd	r16, Y+21	; 0x15
    1826:	1e 89       	ldd	r17, Y+22	; 0x16
    1828:	86 e0       	ldi	r24, 0x06	; 6
    182a:	8c 83       	std	Y+4, r24	; 0x04
    182c:	09 83       	std	Y+1, r16	; 0x01
    182e:	1a 83       	std	Y+2, r17	; 0x02
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	9f e7       	ldi	r25, 0x7F	; 127
    1834:	8d 83       	std	Y+5, r24	; 0x05
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	ae 01       	movw	r20, r28
    183a:	47 5e       	subi	r20, 0xE7	; 231
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	6f 89       	ldd	r22, Y+23	; 0x17
    1840:	78 8d       	ldd	r23, Y+24	; 0x18
    1842:	ce 01       	movw	r24, r28
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	0e 94 2e 0c 	call	0x185c	; 0x185c <vfprintf>
    184a:	ef 81       	ldd	r30, Y+7	; 0x07
    184c:	f8 85       	ldd	r31, Y+8	; 0x08
    184e:	e0 0f       	add	r30, r16
    1850:	f1 1f       	adc	r31, r17
    1852:	10 82       	st	Z, r1
    1854:	2e 96       	adiw	r28, 0x0e	; 14
    1856:	e4 e0       	ldi	r30, 0x04	; 4
    1858:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__epilogue_restores__+0x1c>

0000185c <vfprintf>:
    185c:	ab e0       	ldi	r26, 0x0B	; 11
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e4 e3       	ldi	r30, 0x34	; 52
    1862:	fc e0       	ldi	r31, 0x0C	; 12
    1864:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__prologue_saves__>
    1868:	6c 01       	movw	r12, r24
    186a:	7b 01       	movw	r14, r22
    186c:	8a 01       	movw	r16, r20
    186e:	fc 01       	movw	r30, r24
    1870:	16 82       	std	Z+6, r1	; 0x06
    1872:	17 82       	std	Z+7, r1	; 0x07
    1874:	83 81       	ldd	r24, Z+3	; 0x03
    1876:	81 ff       	sbrs	r24, 1
    1878:	cc c1       	rjmp	.+920    	; 0x1c12 <vfprintf+0x3b6>
    187a:	ce 01       	movw	r24, r28
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	3c 01       	movw	r6, r24
    1880:	f6 01       	movw	r30, r12
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	f7 01       	movw	r30, r14
    1886:	93 fd       	sbrc	r25, 3
    1888:	85 91       	lpm	r24, Z+
    188a:	93 ff       	sbrs	r25, 3
    188c:	81 91       	ld	r24, Z+
    188e:	7f 01       	movw	r14, r30
    1890:	88 23       	and	r24, r24
    1892:	09 f4       	brne	.+2      	; 0x1896 <vfprintf+0x3a>
    1894:	ba c1       	rjmp	.+884    	; 0x1c0a <vfprintf+0x3ae>
    1896:	85 32       	cpi	r24, 0x25	; 37
    1898:	39 f4       	brne	.+14     	; 0x18a8 <vfprintf+0x4c>
    189a:	93 fd       	sbrc	r25, 3
    189c:	85 91       	lpm	r24, Z+
    189e:	93 ff       	sbrs	r25, 3
    18a0:	81 91       	ld	r24, Z+
    18a2:	7f 01       	movw	r14, r30
    18a4:	85 32       	cpi	r24, 0x25	; 37
    18a6:	29 f4       	brne	.+10     	; 0x18b2 <vfprintf+0x56>
    18a8:	b6 01       	movw	r22, r12
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fputc>
    18b0:	e7 cf       	rjmp	.-50     	; 0x1880 <vfprintf+0x24>
    18b2:	91 2c       	mov	r9, r1
    18b4:	21 2c       	mov	r2, r1
    18b6:	31 2c       	mov	r3, r1
    18b8:	ff e1       	ldi	r31, 0x1F	; 31
    18ba:	f3 15       	cp	r31, r3
    18bc:	d8 f0       	brcs	.+54     	; 0x18f4 <vfprintf+0x98>
    18be:	8b 32       	cpi	r24, 0x2B	; 43
    18c0:	79 f0       	breq	.+30     	; 0x18e0 <vfprintf+0x84>
    18c2:	38 f4       	brcc	.+14     	; 0x18d2 <vfprintf+0x76>
    18c4:	80 32       	cpi	r24, 0x20	; 32
    18c6:	79 f0       	breq	.+30     	; 0x18e6 <vfprintf+0x8a>
    18c8:	83 32       	cpi	r24, 0x23	; 35
    18ca:	a1 f4       	brne	.+40     	; 0x18f4 <vfprintf+0x98>
    18cc:	23 2d       	mov	r18, r3
    18ce:	20 61       	ori	r18, 0x10	; 16
    18d0:	1d c0       	rjmp	.+58     	; 0x190c <vfprintf+0xb0>
    18d2:	8d 32       	cpi	r24, 0x2D	; 45
    18d4:	61 f0       	breq	.+24     	; 0x18ee <vfprintf+0x92>
    18d6:	80 33       	cpi	r24, 0x30	; 48
    18d8:	69 f4       	brne	.+26     	; 0x18f4 <vfprintf+0x98>
    18da:	23 2d       	mov	r18, r3
    18dc:	21 60       	ori	r18, 0x01	; 1
    18de:	16 c0       	rjmp	.+44     	; 0x190c <vfprintf+0xb0>
    18e0:	83 2d       	mov	r24, r3
    18e2:	82 60       	ori	r24, 0x02	; 2
    18e4:	38 2e       	mov	r3, r24
    18e6:	e3 2d       	mov	r30, r3
    18e8:	e4 60       	ori	r30, 0x04	; 4
    18ea:	3e 2e       	mov	r3, r30
    18ec:	2a c0       	rjmp	.+84     	; 0x1942 <vfprintf+0xe6>
    18ee:	f3 2d       	mov	r31, r3
    18f0:	f8 60       	ori	r31, 0x08	; 8
    18f2:	1d c0       	rjmp	.+58     	; 0x192e <vfprintf+0xd2>
    18f4:	37 fc       	sbrc	r3, 7
    18f6:	2d c0       	rjmp	.+90     	; 0x1952 <vfprintf+0xf6>
    18f8:	20 ed       	ldi	r18, 0xD0	; 208
    18fa:	28 0f       	add	r18, r24
    18fc:	2a 30       	cpi	r18, 0x0A	; 10
    18fe:	40 f0       	brcs	.+16     	; 0x1910 <vfprintf+0xb4>
    1900:	8e 32       	cpi	r24, 0x2E	; 46
    1902:	b9 f4       	brne	.+46     	; 0x1932 <vfprintf+0xd6>
    1904:	36 fc       	sbrc	r3, 6
    1906:	81 c1       	rjmp	.+770    	; 0x1c0a <vfprintf+0x3ae>
    1908:	23 2d       	mov	r18, r3
    190a:	20 64       	ori	r18, 0x40	; 64
    190c:	32 2e       	mov	r3, r18
    190e:	19 c0       	rjmp	.+50     	; 0x1942 <vfprintf+0xe6>
    1910:	36 fe       	sbrs	r3, 6
    1912:	06 c0       	rjmp	.+12     	; 0x1920 <vfprintf+0xc4>
    1914:	8a e0       	ldi	r24, 0x0A	; 10
    1916:	98 9e       	mul	r9, r24
    1918:	20 0d       	add	r18, r0
    191a:	11 24       	eor	r1, r1
    191c:	92 2e       	mov	r9, r18
    191e:	11 c0       	rjmp	.+34     	; 0x1942 <vfprintf+0xe6>
    1920:	ea e0       	ldi	r30, 0x0A	; 10
    1922:	2e 9e       	mul	r2, r30
    1924:	20 0d       	add	r18, r0
    1926:	11 24       	eor	r1, r1
    1928:	22 2e       	mov	r2, r18
    192a:	f3 2d       	mov	r31, r3
    192c:	f0 62       	ori	r31, 0x20	; 32
    192e:	3f 2e       	mov	r3, r31
    1930:	08 c0       	rjmp	.+16     	; 0x1942 <vfprintf+0xe6>
    1932:	8c 36       	cpi	r24, 0x6C	; 108
    1934:	21 f4       	brne	.+8      	; 0x193e <vfprintf+0xe2>
    1936:	83 2d       	mov	r24, r3
    1938:	80 68       	ori	r24, 0x80	; 128
    193a:	38 2e       	mov	r3, r24
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <vfprintf+0xe6>
    193e:	88 36       	cpi	r24, 0x68	; 104
    1940:	41 f4       	brne	.+16     	; 0x1952 <vfprintf+0xf6>
    1942:	f7 01       	movw	r30, r14
    1944:	93 fd       	sbrc	r25, 3
    1946:	85 91       	lpm	r24, Z+
    1948:	93 ff       	sbrs	r25, 3
    194a:	81 91       	ld	r24, Z+
    194c:	7f 01       	movw	r14, r30
    194e:	81 11       	cpse	r24, r1
    1950:	b3 cf       	rjmp	.-154    	; 0x18b8 <vfprintf+0x5c>
    1952:	98 2f       	mov	r25, r24
    1954:	9f 7d       	andi	r25, 0xDF	; 223
    1956:	95 54       	subi	r25, 0x45	; 69
    1958:	93 30       	cpi	r25, 0x03	; 3
    195a:	28 f4       	brcc	.+10     	; 0x1966 <vfprintf+0x10a>
    195c:	0c 5f       	subi	r16, 0xFC	; 252
    195e:	1f 4f       	sbci	r17, 0xFF	; 255
    1960:	9f e3       	ldi	r25, 0x3F	; 63
    1962:	99 83       	std	Y+1, r25	; 0x01
    1964:	0d c0       	rjmp	.+26     	; 0x1980 <vfprintf+0x124>
    1966:	83 36       	cpi	r24, 0x63	; 99
    1968:	31 f0       	breq	.+12     	; 0x1976 <vfprintf+0x11a>
    196a:	83 37       	cpi	r24, 0x73	; 115
    196c:	71 f0       	breq	.+28     	; 0x198a <vfprintf+0x12e>
    196e:	83 35       	cpi	r24, 0x53	; 83
    1970:	09 f0       	breq	.+2      	; 0x1974 <vfprintf+0x118>
    1972:	59 c0       	rjmp	.+178    	; 0x1a26 <vfprintf+0x1ca>
    1974:	21 c0       	rjmp	.+66     	; 0x19b8 <vfprintf+0x15c>
    1976:	f8 01       	movw	r30, r16
    1978:	80 81       	ld	r24, Z
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	0e 5f       	subi	r16, 0xFE	; 254
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	88 24       	eor	r8, r8
    1982:	83 94       	inc	r8
    1984:	91 2c       	mov	r9, r1
    1986:	53 01       	movw	r10, r6
    1988:	13 c0       	rjmp	.+38     	; 0x19b0 <vfprintf+0x154>
    198a:	28 01       	movw	r4, r16
    198c:	f2 e0       	ldi	r31, 0x02	; 2
    198e:	4f 0e       	add	r4, r31
    1990:	51 1c       	adc	r5, r1
    1992:	f8 01       	movw	r30, r16
    1994:	a0 80       	ld	r10, Z
    1996:	b1 80       	ldd	r11, Z+1	; 0x01
    1998:	36 fe       	sbrs	r3, 6
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <vfprintf+0x146>
    199c:	69 2d       	mov	r22, r9
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <vfprintf+0x14a>
    19a2:	6f ef       	ldi	r22, 0xFF	; 255
    19a4:	7f ef       	ldi	r23, 0xFF	; 255
    19a6:	c5 01       	movw	r24, r10
    19a8:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <strnlen>
    19ac:	4c 01       	movw	r8, r24
    19ae:	82 01       	movw	r16, r4
    19b0:	f3 2d       	mov	r31, r3
    19b2:	ff 77       	andi	r31, 0x7F	; 127
    19b4:	3f 2e       	mov	r3, r31
    19b6:	16 c0       	rjmp	.+44     	; 0x19e4 <vfprintf+0x188>
    19b8:	28 01       	movw	r4, r16
    19ba:	22 e0       	ldi	r18, 0x02	; 2
    19bc:	42 0e       	add	r4, r18
    19be:	51 1c       	adc	r5, r1
    19c0:	f8 01       	movw	r30, r16
    19c2:	a0 80       	ld	r10, Z
    19c4:	b1 80       	ldd	r11, Z+1	; 0x01
    19c6:	36 fe       	sbrs	r3, 6
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <vfprintf+0x174>
    19ca:	69 2d       	mov	r22, r9
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <vfprintf+0x178>
    19d0:	6f ef       	ldi	r22, 0xFF	; 255
    19d2:	7f ef       	ldi	r23, 0xFF	; 255
    19d4:	c5 01       	movw	r24, r10
    19d6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <strnlen_P>
    19da:	4c 01       	movw	r8, r24
    19dc:	f3 2d       	mov	r31, r3
    19de:	f0 68       	ori	r31, 0x80	; 128
    19e0:	3f 2e       	mov	r3, r31
    19e2:	82 01       	movw	r16, r4
    19e4:	33 fc       	sbrc	r3, 3
    19e6:	1b c0       	rjmp	.+54     	; 0x1a1e <vfprintf+0x1c2>
    19e8:	82 2d       	mov	r24, r2
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	88 16       	cp	r8, r24
    19ee:	99 06       	cpc	r9, r25
    19f0:	b0 f4       	brcc	.+44     	; 0x1a1e <vfprintf+0x1c2>
    19f2:	b6 01       	movw	r22, r12
    19f4:	80 e2       	ldi	r24, 0x20	; 32
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fputc>
    19fc:	2a 94       	dec	r2
    19fe:	f4 cf       	rjmp	.-24     	; 0x19e8 <vfprintf+0x18c>
    1a00:	f5 01       	movw	r30, r10
    1a02:	37 fc       	sbrc	r3, 7
    1a04:	85 91       	lpm	r24, Z+
    1a06:	37 fe       	sbrs	r3, 7
    1a08:	81 91       	ld	r24, Z+
    1a0a:	5f 01       	movw	r10, r30
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fputc>
    1a14:	21 10       	cpse	r2, r1
    1a16:	2a 94       	dec	r2
    1a18:	21 e0       	ldi	r18, 0x01	; 1
    1a1a:	82 1a       	sub	r8, r18
    1a1c:	91 08       	sbc	r9, r1
    1a1e:	81 14       	cp	r8, r1
    1a20:	91 04       	cpc	r9, r1
    1a22:	71 f7       	brne	.-36     	; 0x1a00 <vfprintf+0x1a4>
    1a24:	e8 c0       	rjmp	.+464    	; 0x1bf6 <vfprintf+0x39a>
    1a26:	84 36       	cpi	r24, 0x64	; 100
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <vfprintf+0x1d2>
    1a2a:	89 36       	cpi	r24, 0x69	; 105
    1a2c:	41 f5       	brne	.+80     	; 0x1a7e <vfprintf+0x222>
    1a2e:	f8 01       	movw	r30, r16
    1a30:	37 fe       	sbrs	r3, 7
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <vfprintf+0x1e6>
    1a34:	60 81       	ld	r22, Z
    1a36:	71 81       	ldd	r23, Z+1	; 0x01
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	93 81       	ldd	r25, Z+3	; 0x03
    1a3c:	0c 5f       	subi	r16, 0xFC	; 252
    1a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a40:	08 c0       	rjmp	.+16     	; 0x1a52 <vfprintf+0x1f6>
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	07 2e       	mov	r0, r23
    1a48:	00 0c       	add	r0, r0
    1a4a:	88 0b       	sbc	r24, r24
    1a4c:	99 0b       	sbc	r25, r25
    1a4e:	0e 5f       	subi	r16, 0xFE	; 254
    1a50:	1f 4f       	sbci	r17, 0xFF	; 255
    1a52:	f3 2d       	mov	r31, r3
    1a54:	ff 76       	andi	r31, 0x6F	; 111
    1a56:	3f 2e       	mov	r3, r31
    1a58:	97 ff       	sbrs	r25, 7
    1a5a:	09 c0       	rjmp	.+18     	; 0x1a6e <vfprintf+0x212>
    1a5c:	90 95       	com	r25
    1a5e:	80 95       	com	r24
    1a60:	70 95       	com	r23
    1a62:	61 95       	neg	r22
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255
    1a66:	8f 4f       	sbci	r24, 0xFF	; 255
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	f0 68       	ori	r31, 0x80	; 128
    1a6c:	3f 2e       	mov	r3, r31
    1a6e:	2a e0       	ldi	r18, 0x0A	; 10
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	a3 01       	movw	r20, r6
    1a74:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__ultoa_invert>
    1a78:	88 2e       	mov	r8, r24
    1a7a:	86 18       	sub	r8, r6
    1a7c:	45 c0       	rjmp	.+138    	; 0x1b08 <vfprintf+0x2ac>
    1a7e:	85 37       	cpi	r24, 0x75	; 117
    1a80:	31 f4       	brne	.+12     	; 0x1a8e <vfprintf+0x232>
    1a82:	23 2d       	mov	r18, r3
    1a84:	2f 7e       	andi	r18, 0xEF	; 239
    1a86:	b2 2e       	mov	r11, r18
    1a88:	2a e0       	ldi	r18, 0x0A	; 10
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	25 c0       	rjmp	.+74     	; 0x1ad8 <vfprintf+0x27c>
    1a8e:	93 2d       	mov	r25, r3
    1a90:	99 7f       	andi	r25, 0xF9	; 249
    1a92:	b9 2e       	mov	r11, r25
    1a94:	8f 36       	cpi	r24, 0x6F	; 111
    1a96:	c1 f0       	breq	.+48     	; 0x1ac8 <vfprintf+0x26c>
    1a98:	18 f4       	brcc	.+6      	; 0x1aa0 <vfprintf+0x244>
    1a9a:	88 35       	cpi	r24, 0x58	; 88
    1a9c:	79 f0       	breq	.+30     	; 0x1abc <vfprintf+0x260>
    1a9e:	b5 c0       	rjmp	.+362    	; 0x1c0a <vfprintf+0x3ae>
    1aa0:	80 37       	cpi	r24, 0x70	; 112
    1aa2:	19 f0       	breq	.+6      	; 0x1aaa <vfprintf+0x24e>
    1aa4:	88 37       	cpi	r24, 0x78	; 120
    1aa6:	21 f0       	breq	.+8      	; 0x1ab0 <vfprintf+0x254>
    1aa8:	b0 c0       	rjmp	.+352    	; 0x1c0a <vfprintf+0x3ae>
    1aaa:	e9 2f       	mov	r30, r25
    1aac:	e0 61       	ori	r30, 0x10	; 16
    1aae:	be 2e       	mov	r11, r30
    1ab0:	b4 fe       	sbrs	r11, 4
    1ab2:	0d c0       	rjmp	.+26     	; 0x1ace <vfprintf+0x272>
    1ab4:	fb 2d       	mov	r31, r11
    1ab6:	f4 60       	ori	r31, 0x04	; 4
    1ab8:	bf 2e       	mov	r11, r31
    1aba:	09 c0       	rjmp	.+18     	; 0x1ace <vfprintf+0x272>
    1abc:	34 fe       	sbrs	r3, 4
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <vfprintf+0x278>
    1ac0:	29 2f       	mov	r18, r25
    1ac2:	26 60       	ori	r18, 0x06	; 6
    1ac4:	b2 2e       	mov	r11, r18
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <vfprintf+0x278>
    1ac8:	28 e0       	ldi	r18, 0x08	; 8
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <vfprintf+0x27c>
    1ace:	20 e1       	ldi	r18, 0x10	; 16
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <vfprintf+0x27c>
    1ad4:	20 e1       	ldi	r18, 0x10	; 16
    1ad6:	32 e0       	ldi	r19, 0x02	; 2
    1ad8:	f8 01       	movw	r30, r16
    1ada:	b7 fe       	sbrs	r11, 7
    1adc:	07 c0       	rjmp	.+14     	; 0x1aec <vfprintf+0x290>
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	82 81       	ldd	r24, Z+2	; 0x02
    1ae4:	93 81       	ldd	r25, Z+3	; 0x03
    1ae6:	0c 5f       	subi	r16, 0xFC	; 252
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	06 c0       	rjmp	.+12     	; 0x1af8 <vfprintf+0x29c>
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 5f       	subi	r16, 0xFE	; 254
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	a3 01       	movw	r20, r6
    1afa:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__ultoa_invert>
    1afe:	88 2e       	mov	r8, r24
    1b00:	86 18       	sub	r8, r6
    1b02:	fb 2d       	mov	r31, r11
    1b04:	ff 77       	andi	r31, 0x7F	; 127
    1b06:	3f 2e       	mov	r3, r31
    1b08:	36 fe       	sbrs	r3, 6
    1b0a:	0d c0       	rjmp	.+26     	; 0x1b26 <vfprintf+0x2ca>
    1b0c:	23 2d       	mov	r18, r3
    1b0e:	2e 7f       	andi	r18, 0xFE	; 254
    1b10:	a2 2e       	mov	r10, r18
    1b12:	89 14       	cp	r8, r9
    1b14:	58 f4       	brcc	.+22     	; 0x1b2c <vfprintf+0x2d0>
    1b16:	34 fe       	sbrs	r3, 4
    1b18:	0b c0       	rjmp	.+22     	; 0x1b30 <vfprintf+0x2d4>
    1b1a:	32 fc       	sbrc	r3, 2
    1b1c:	09 c0       	rjmp	.+18     	; 0x1b30 <vfprintf+0x2d4>
    1b1e:	83 2d       	mov	r24, r3
    1b20:	8e 7e       	andi	r24, 0xEE	; 238
    1b22:	a8 2e       	mov	r10, r24
    1b24:	05 c0       	rjmp	.+10     	; 0x1b30 <vfprintf+0x2d4>
    1b26:	b8 2c       	mov	r11, r8
    1b28:	a3 2c       	mov	r10, r3
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <vfprintf+0x2d6>
    1b2c:	b8 2c       	mov	r11, r8
    1b2e:	01 c0       	rjmp	.+2      	; 0x1b32 <vfprintf+0x2d6>
    1b30:	b9 2c       	mov	r11, r9
    1b32:	a4 fe       	sbrs	r10, 4
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <vfprintf+0x2f8>
    1b36:	fe 01       	movw	r30, r28
    1b38:	e8 0d       	add	r30, r8
    1b3a:	f1 1d       	adc	r31, r1
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 33       	cpi	r24, 0x30	; 48
    1b40:	21 f4       	brne	.+8      	; 0x1b4a <vfprintf+0x2ee>
    1b42:	9a 2d       	mov	r25, r10
    1b44:	99 7e       	andi	r25, 0xE9	; 233
    1b46:	a9 2e       	mov	r10, r25
    1b48:	09 c0       	rjmp	.+18     	; 0x1b5c <vfprintf+0x300>
    1b4a:	a2 fe       	sbrs	r10, 2
    1b4c:	06 c0       	rjmp	.+12     	; 0x1b5a <vfprintf+0x2fe>
    1b4e:	b3 94       	inc	r11
    1b50:	b3 94       	inc	r11
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <vfprintf+0x300>
    1b54:	8a 2d       	mov	r24, r10
    1b56:	86 78       	andi	r24, 0x86	; 134
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <vfprintf+0x300>
    1b5a:	b3 94       	inc	r11
    1b5c:	a3 fc       	sbrc	r10, 3
    1b5e:	11 c0       	rjmp	.+34     	; 0x1b82 <vfprintf+0x326>
    1b60:	a0 fe       	sbrs	r10, 0
    1b62:	06 c0       	rjmp	.+12     	; 0x1b70 <vfprintf+0x314>
    1b64:	b2 14       	cp	r11, r2
    1b66:	88 f4       	brcc	.+34     	; 0x1b8a <vfprintf+0x32e>
    1b68:	28 0c       	add	r2, r8
    1b6a:	92 2c       	mov	r9, r2
    1b6c:	9b 18       	sub	r9, r11
    1b6e:	0e c0       	rjmp	.+28     	; 0x1b8c <vfprintf+0x330>
    1b70:	b2 14       	cp	r11, r2
    1b72:	60 f4       	brcc	.+24     	; 0x1b8c <vfprintf+0x330>
    1b74:	b6 01       	movw	r22, r12
    1b76:	80 e2       	ldi	r24, 0x20	; 32
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fputc>
    1b7e:	b3 94       	inc	r11
    1b80:	f7 cf       	rjmp	.-18     	; 0x1b70 <vfprintf+0x314>
    1b82:	b2 14       	cp	r11, r2
    1b84:	18 f4       	brcc	.+6      	; 0x1b8c <vfprintf+0x330>
    1b86:	2b 18       	sub	r2, r11
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <vfprintf+0x332>
    1b8a:	98 2c       	mov	r9, r8
    1b8c:	21 2c       	mov	r2, r1
    1b8e:	a4 fe       	sbrs	r10, 4
    1b90:	10 c0       	rjmp	.+32     	; 0x1bb2 <vfprintf+0x356>
    1b92:	b6 01       	movw	r22, r12
    1b94:	80 e3       	ldi	r24, 0x30	; 48
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fputc>
    1b9c:	a2 fe       	sbrs	r10, 2
    1b9e:	17 c0       	rjmp	.+46     	; 0x1bce <vfprintf+0x372>
    1ba0:	a1 fc       	sbrc	r10, 1
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <vfprintf+0x34e>
    1ba4:	88 e7       	ldi	r24, 0x78	; 120
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <vfprintf+0x352>
    1baa:	88 e5       	ldi	r24, 0x58	; 88
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	b6 01       	movw	r22, r12
    1bb0:	0c c0       	rjmp	.+24     	; 0x1bca <vfprintf+0x36e>
    1bb2:	8a 2d       	mov	r24, r10
    1bb4:	86 78       	andi	r24, 0x86	; 134
    1bb6:	59 f0       	breq	.+22     	; 0x1bce <vfprintf+0x372>
    1bb8:	a1 fe       	sbrs	r10, 1
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <vfprintf+0x364>
    1bbc:	8b e2       	ldi	r24, 0x2B	; 43
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <vfprintf+0x366>
    1bc0:	80 e2       	ldi	r24, 0x20	; 32
    1bc2:	a7 fc       	sbrc	r10, 7
    1bc4:	8d e2       	ldi	r24, 0x2D	; 45
    1bc6:	b6 01       	movw	r22, r12
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fputc>
    1bce:	89 14       	cp	r8, r9
    1bd0:	38 f4       	brcc	.+14     	; 0x1be0 <vfprintf+0x384>
    1bd2:	b6 01       	movw	r22, r12
    1bd4:	80 e3       	ldi	r24, 0x30	; 48
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fputc>
    1bdc:	9a 94       	dec	r9
    1bde:	f7 cf       	rjmp	.-18     	; 0x1bce <vfprintf+0x372>
    1be0:	8a 94       	dec	r8
    1be2:	f3 01       	movw	r30, r6
    1be4:	e8 0d       	add	r30, r8
    1be6:	f1 1d       	adc	r31, r1
    1be8:	80 81       	ld	r24, Z
    1bea:	b6 01       	movw	r22, r12
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fputc>
    1bf2:	81 10       	cpse	r8, r1
    1bf4:	f5 cf       	rjmp	.-22     	; 0x1be0 <vfprintf+0x384>
    1bf6:	22 20       	and	r2, r2
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <vfprintf+0x3a0>
    1bfa:	42 ce       	rjmp	.-892    	; 0x1880 <vfprintf+0x24>
    1bfc:	b6 01       	movw	r22, r12
    1bfe:	80 e2       	ldi	r24, 0x20	; 32
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <fputc>
    1c06:	2a 94       	dec	r2
    1c08:	f6 cf       	rjmp	.-20     	; 0x1bf6 <vfprintf+0x39a>
    1c0a:	f6 01       	movw	r30, r12
    1c0c:	86 81       	ldd	r24, Z+6	; 0x06
    1c0e:	97 81       	ldd	r25, Z+7	; 0x07
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <vfprintf+0x3ba>
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	9f ef       	ldi	r25, 0xFF	; 255
    1c16:	2b 96       	adiw	r28, 0x0b	; 11
    1c18:	e2 e1       	ldi	r30, 0x12	; 18
    1c1a:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__epilogue_restores__>

00001c1e <strnlen_P>:
    1c1e:	fc 01       	movw	r30, r24
    1c20:	05 90       	lpm	r0, Z+
    1c22:	61 50       	subi	r22, 0x01	; 1
    1c24:	70 40       	sbci	r23, 0x00	; 0
    1c26:	01 10       	cpse	r0, r1
    1c28:	d8 f7       	brcc	.-10     	; 0x1c20 <strnlen_P+0x2>
    1c2a:	80 95       	com	r24
    1c2c:	90 95       	com	r25
    1c2e:	8e 0f       	add	r24, r30
    1c30:	9f 1f       	adc	r25, r31
    1c32:	08 95       	ret

00001c34 <strnlen>:
    1c34:	fc 01       	movw	r30, r24
    1c36:	61 50       	subi	r22, 0x01	; 1
    1c38:	70 40       	sbci	r23, 0x00	; 0
    1c3a:	01 90       	ld	r0, Z+
    1c3c:	01 10       	cpse	r0, r1
    1c3e:	d8 f7       	brcc	.-10     	; 0x1c36 <strnlen+0x2>
    1c40:	80 95       	com	r24
    1c42:	90 95       	com	r25
    1c44:	8e 0f       	add	r24, r30
    1c46:	9f 1f       	adc	r25, r31
    1c48:	08 95       	ret

00001c4a <fputc>:
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	fb 01       	movw	r30, r22
    1c54:	23 81       	ldd	r18, Z+3	; 0x03
    1c56:	21 fd       	sbrc	r18, 1
    1c58:	03 c0       	rjmp	.+6      	; 0x1c60 <fputc+0x16>
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	9f ef       	ldi	r25, 0xFF	; 255
    1c5e:	2c c0       	rjmp	.+88     	; 0x1cb8 <fputc+0x6e>
    1c60:	22 ff       	sbrs	r18, 2
    1c62:	16 c0       	rjmp	.+44     	; 0x1c90 <fputc+0x46>
    1c64:	46 81       	ldd	r20, Z+6	; 0x06
    1c66:	57 81       	ldd	r21, Z+7	; 0x07
    1c68:	24 81       	ldd	r18, Z+4	; 0x04
    1c6a:	35 81       	ldd	r19, Z+5	; 0x05
    1c6c:	42 17       	cp	r20, r18
    1c6e:	53 07       	cpc	r21, r19
    1c70:	44 f4       	brge	.+16     	; 0x1c82 <fputc+0x38>
    1c72:	a0 81       	ld	r26, Z
    1c74:	b1 81       	ldd	r27, Z+1	; 0x01
    1c76:	9d 01       	movw	r18, r26
    1c78:	2f 5f       	subi	r18, 0xFF	; 255
    1c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7c:	20 83       	st	Z, r18
    1c7e:	31 83       	std	Z+1, r19	; 0x01
    1c80:	8c 93       	st	X, r24
    1c82:	26 81       	ldd	r18, Z+6	; 0x06
    1c84:	37 81       	ldd	r19, Z+7	; 0x07
    1c86:	2f 5f       	subi	r18, 0xFF	; 255
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	26 83       	std	Z+6, r18	; 0x06
    1c8c:	37 83       	std	Z+7, r19	; 0x07
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <fputc+0x6e>
    1c90:	8b 01       	movw	r16, r22
    1c92:	ec 01       	movw	r28, r24
    1c94:	fb 01       	movw	r30, r22
    1c96:	00 84       	ldd	r0, Z+8	; 0x08
    1c98:	f1 85       	ldd	r31, Z+9	; 0x09
    1c9a:	e0 2d       	mov	r30, r0
    1c9c:	09 95       	icall
    1c9e:	89 2b       	or	r24, r25
    1ca0:	e1 f6       	brne	.-72     	; 0x1c5a <fputc+0x10>
    1ca2:	d8 01       	movw	r26, r16
    1ca4:	16 96       	adiw	r26, 0x06	; 6
    1ca6:	8d 91       	ld	r24, X+
    1ca8:	9c 91       	ld	r25, X
    1caa:	17 97       	sbiw	r26, 0x07	; 7
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	16 96       	adiw	r26, 0x06	; 6
    1cb0:	8d 93       	st	X+, r24
    1cb2:	9c 93       	st	X, r25
    1cb4:	17 97       	sbiw	r26, 0x07	; 7
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	df 91       	pop	r29
    1cba:	cf 91       	pop	r28
    1cbc:	1f 91       	pop	r17
    1cbe:	0f 91       	pop	r16
    1cc0:	08 95       	ret

00001cc2 <__ultoa_invert>:
    1cc2:	fa 01       	movw	r30, r20
    1cc4:	aa 27       	eor	r26, r26
    1cc6:	28 30       	cpi	r18, 0x08	; 8
    1cc8:	51 f1       	breq	.+84     	; 0x1d1e <__ultoa_invert+0x5c>
    1cca:	20 31       	cpi	r18, 0x10	; 16
    1ccc:	81 f1       	breq	.+96     	; 0x1d2e <__ultoa_invert+0x6c>
    1cce:	e8 94       	clt
    1cd0:	6f 93       	push	r22
    1cd2:	6e 7f       	andi	r22, 0xFE	; 254
    1cd4:	6e 5f       	subi	r22, 0xFE	; 254
    1cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cda:	9f 4f       	sbci	r25, 0xFF	; 255
    1cdc:	af 4f       	sbci	r26, 0xFF	; 255
    1cde:	b1 e0       	ldi	r27, 0x01	; 1
    1ce0:	3e d0       	rcall	.+124    	; 0x1d5e <__ultoa_invert+0x9c>
    1ce2:	b4 e0       	ldi	r27, 0x04	; 4
    1ce4:	3c d0       	rcall	.+120    	; 0x1d5e <__ultoa_invert+0x9c>
    1ce6:	67 0f       	add	r22, r23
    1ce8:	78 1f       	adc	r23, r24
    1cea:	89 1f       	adc	r24, r25
    1cec:	9a 1f       	adc	r25, r26
    1cee:	a1 1d       	adc	r26, r1
    1cf0:	68 0f       	add	r22, r24
    1cf2:	79 1f       	adc	r23, r25
    1cf4:	8a 1f       	adc	r24, r26
    1cf6:	91 1d       	adc	r25, r1
    1cf8:	a1 1d       	adc	r26, r1
    1cfa:	6a 0f       	add	r22, r26
    1cfc:	71 1d       	adc	r23, r1
    1cfe:	81 1d       	adc	r24, r1
    1d00:	91 1d       	adc	r25, r1
    1d02:	a1 1d       	adc	r26, r1
    1d04:	20 d0       	rcall	.+64     	; 0x1d46 <__ultoa_invert+0x84>
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <__ultoa_invert+0x48>
    1d08:	68 94       	set
    1d0a:	3f 91       	pop	r19
    1d0c:	2a e0       	ldi	r18, 0x0A	; 10
    1d0e:	26 9f       	mul	r18, r22
    1d10:	11 24       	eor	r1, r1
    1d12:	30 19       	sub	r19, r0
    1d14:	30 5d       	subi	r19, 0xD0	; 208
    1d16:	31 93       	st	Z+, r19
    1d18:	de f6       	brtc	.-74     	; 0x1cd0 <__ultoa_invert+0xe>
    1d1a:	cf 01       	movw	r24, r30
    1d1c:	08 95       	ret
    1d1e:	46 2f       	mov	r20, r22
    1d20:	47 70       	andi	r20, 0x07	; 7
    1d22:	40 5d       	subi	r20, 0xD0	; 208
    1d24:	41 93       	st	Z+, r20
    1d26:	b3 e0       	ldi	r27, 0x03	; 3
    1d28:	0f d0       	rcall	.+30     	; 0x1d48 <__ultoa_invert+0x86>
    1d2a:	c9 f7       	brne	.-14     	; 0x1d1e <__ultoa_invert+0x5c>
    1d2c:	f6 cf       	rjmp	.-20     	; 0x1d1a <__ultoa_invert+0x58>
    1d2e:	46 2f       	mov	r20, r22
    1d30:	4f 70       	andi	r20, 0x0F	; 15
    1d32:	40 5d       	subi	r20, 0xD0	; 208
    1d34:	4a 33       	cpi	r20, 0x3A	; 58
    1d36:	18 f0       	brcs	.+6      	; 0x1d3e <__ultoa_invert+0x7c>
    1d38:	49 5d       	subi	r20, 0xD9	; 217
    1d3a:	31 fd       	sbrc	r19, 1
    1d3c:	40 52       	subi	r20, 0x20	; 32
    1d3e:	41 93       	st	Z+, r20
    1d40:	02 d0       	rcall	.+4      	; 0x1d46 <__ultoa_invert+0x84>
    1d42:	a9 f7       	brne	.-22     	; 0x1d2e <__ultoa_invert+0x6c>
    1d44:	ea cf       	rjmp	.-44     	; 0x1d1a <__ultoa_invert+0x58>
    1d46:	b4 e0       	ldi	r27, 0x04	; 4
    1d48:	a6 95       	lsr	r26
    1d4a:	97 95       	ror	r25
    1d4c:	87 95       	ror	r24
    1d4e:	77 95       	ror	r23
    1d50:	67 95       	ror	r22
    1d52:	ba 95       	dec	r27
    1d54:	c9 f7       	brne	.-14     	; 0x1d48 <__ultoa_invert+0x86>
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	61 05       	cpc	r22, r1
    1d5a:	71 05       	cpc	r23, r1
    1d5c:	08 95       	ret
    1d5e:	9b 01       	movw	r18, r22
    1d60:	ac 01       	movw	r20, r24
    1d62:	0a 2e       	mov	r0, r26
    1d64:	06 94       	lsr	r0
    1d66:	57 95       	ror	r21
    1d68:	47 95       	ror	r20
    1d6a:	37 95       	ror	r19
    1d6c:	27 95       	ror	r18
    1d6e:	ba 95       	dec	r27
    1d70:	c9 f7       	brne	.-14     	; 0x1d64 <__ultoa_invert+0xa2>
    1d72:	62 0f       	add	r22, r18
    1d74:	73 1f       	adc	r23, r19
    1d76:	84 1f       	adc	r24, r20
    1d78:	95 1f       	adc	r25, r21
    1d7a:	a0 1d       	adc	r26, r0
    1d7c:	08 95       	ret

00001d7e <eeprom_read_word>:
    1d7e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <eeprom_mapen>
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	08 95       	ret

00001d88 <eeprom_write_word>:
    1d88:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <eeprom_write_byte>
    1d8c:	27 2f       	mov	r18, r23
    1d8e:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <eeprom_write_r18>

00001d92 <eeprom_read_byte>:
    1d92:	03 d0       	rcall	.+6      	; 0x1d9a <eeprom_mapen>
    1d94:	80 81       	ld	r24, Z
    1d96:	99 27       	eor	r25, r25
    1d98:	08 95       	ret

00001d9a <eeprom_mapen>:
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	e0 50       	subi	r30, 0x00	; 0
    1d9e:	fc 4e       	sbci	r31, 0xEC	; 236
    1da0:	08 95       	ret

00001da2 <eeprom_write_byte>:
    1da2:	26 2f       	mov	r18, r22

00001da4 <eeprom_write_r18>:
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	e0 e0       	ldi	r30, 0x00	; 0
    1daa:	f0 e1       	ldi	r31, 0x10	; 16
    1dac:	32 81       	ldd	r19, Z+2	; 0x02
    1dae:	31 fd       	sbrc	r19, 1
    1db0:	fd cf       	rjmp	.-6      	; 0x1dac <eeprom_write_r18+0x8>
    1db2:	dc 01       	movw	r26, r24
    1db4:	a0 50       	subi	r26, 0x00	; 0
    1db6:	bc 4e       	sbci	r27, 0xEC	; 236
    1db8:	2c 93       	st	X, r18
    1dba:	2d e9       	ldi	r18, 0x9D	; 157
    1dbc:	24 bf       	out	0x34, r18	; 52
    1dbe:	23 e0       	ldi	r18, 0x03	; 3
    1dc0:	20 83       	st	Z, r18
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	bf 91       	pop	r27
    1dc6:	af 91       	pop	r26
    1dc8:	08 95       	ret

00001dca <__prologue_saves__>:
    1dca:	2f 92       	push	r2
    1dcc:	3f 92       	push	r3
    1dce:	4f 92       	push	r4
    1dd0:	5f 92       	push	r5
    1dd2:	6f 92       	push	r6
    1dd4:	7f 92       	push	r7
    1dd6:	8f 92       	push	r8
    1dd8:	9f 92       	push	r9
    1dda:	af 92       	push	r10
    1ddc:	bf 92       	push	r11
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	ca 1b       	sub	r28, r26
    1df4:	db 0b       	sbc	r29, r27
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	09 94       	ijmp

00001dfc <__epilogue_restores__>:
    1dfc:	2a 88       	ldd	r2, Y+18	; 0x12
    1dfe:	39 88       	ldd	r3, Y+17	; 0x11
    1e00:	48 88       	ldd	r4, Y+16	; 0x10
    1e02:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e04:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e06:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e08:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e0e:	b9 84       	ldd	r11, Y+9	; 0x09
    1e10:	c8 84       	ldd	r12, Y+8	; 0x08
    1e12:	df 80       	ldd	r13, Y+7	; 0x07
    1e14:	ee 80       	ldd	r14, Y+6	; 0x06
    1e16:	fd 80       	ldd	r15, Y+5	; 0x05
    1e18:	0c 81       	ldd	r16, Y+4	; 0x04
    1e1a:	1b 81       	ldd	r17, Y+3	; 0x03
    1e1c:	aa 81       	ldd	r26, Y+2	; 0x02
    1e1e:	b9 81       	ldd	r27, Y+1	; 0x01
    1e20:	ce 0f       	add	r28, r30
    1e22:	d1 1d       	adc	r29, r1
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	ed 01       	movw	r28, r26
    1e2a:	08 95       	ret

00001e2c <_exit>:
    1e2c:	f8 94       	cli

00001e2e <__stop_program>:
    1e2e:	ff cf       	rjmp	.-2      	; 0x1e2e <__stop_program>
