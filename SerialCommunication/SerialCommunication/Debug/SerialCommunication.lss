
SerialCommunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a8c  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000022ad  00000000  00000000  00002cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000389  00000000  00000000  00004f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000530c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000014ac  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f5  00000000  00000000  0000683c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00006931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  a0:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <BTN_Init>:
}

uint8_t USART1_Receive(void) {
	while (!(USART1.STATUS & USART_RXCIF_bm));  // Wait for data to be received
	return USART1.RXDATAL;  // Get and return received data from buffer
}
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f4 e0       	ldi	r31, 0x04	; 4
  ac:	82 81       	ldd	r24, Z+2	; 0x02
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	82 83       	std	Z+2, r24	; 0x02
  b2:	e0 ea       	ldi	r30, 0xA0	; 160
  b4:	f4 e0       	ldi	r31, 0x04	; 4
  b6:	82 81       	ldd	r24, Z+2	; 0x02
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	82 83       	std	Z+2, r24	; 0x02
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f4 e0       	ldi	r31, 0x04	; 4
  c0:	82 81       	ldd	r24, Z+2	; 0x02
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	82 83       	std	Z+2, r24	; 0x02
  c6:	08 95       	ret

000000c8 <LED_Init>:
  c8:	e0 ea       	ldi	r30, 0xA0	; 160
  ca:	f4 e0       	ldi	r31, 0x04	; 4
  cc:	81 81       	ldd	r24, Z+1	; 0x01
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	81 83       	std	Z+1, r24	; 0x01
  d2:	81 81       	ldd	r24, Z+1	; 0x01
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	81 83       	std	Z+1, r24	; 0x01
  d8:	08 95       	ret

000000da <USART1_Init>:
  da:	80 91 22 11 	lds	r24, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
  de:	e0 e2       	ldi	r30, 0x20	; 32
  e0:	f8 e0       	ldi	r31, 0x08	; 8
  e2:	8c e4       	ldi	r24, 0x4C	; 76
  e4:	94 e0       	ldi	r25, 0x04	; 4
  e6:	80 87       	std	Z+8, r24	; 0x08
  e8:	91 87       	std	Z+9, r25	; 0x09
  ea:	a0 e4       	ldi	r26, 0x40	; 64
  ec:	b4 e0       	ldi	r27, 0x04	; 4
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	11 96       	adiw	r26, 0x01	; 1
  f2:	8c 93       	st	X, r24
  f4:	11 97       	sbiw	r26, 0x01	; 1
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	12 96       	adiw	r26, 0x02	; 2
  fa:	8c 93       	st	X, r24
  fc:	80 ec       	ldi	r24, 0xC0	; 192
  fe:	86 83       	std	Z+6, r24	; 0x06
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	87 83       	std	Z+7, r24	; 0x07
 104:	08 95       	ret

00000106 <USART1_Transmit>:
 106:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 10a:	95 ff       	sbrs	r25, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <USART1_Transmit>
 10e:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7fc822>
 112:	08 95       	ret

00000114 <main>:

int main(void) {
	USART1_Init();
 114:	0e 94 6d 00 	call	0xda	; 0xda <USART1_Init>
	LED_Init();
 118:	0e 94 64 00 	call	0xc8	; 0xc8 <LED_Init>
	BTN_Init();
 11c:	0e 94 54 00 	call	0xa8	; 0xa8 <BTN_Init>
	{
	case IGN_1:
		pressed = GET_BIT(PORTD.IN, IGN_1);
		break;
	case IGN_2:
		pressed = GET_BIT(PORTF.IN, IGN_2);
 120:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__RODATA_PM_OFFSET__+0x7fc4a8>
int main(void) {
	USART1_Init();
	LED_Init();
	BTN_Init();
	while (1) {
		if (BTN_Pressed(IGN_2)) {
 124:	84 ff       	sbrs	r24, 4
 126:	fc cf       	rjmp	.-8      	; 0x120 <main+0xc>
			USART1_Transmit('I');
 128:	89 e4       	ldi	r24, 0x49	; 73
 12a:	0e 94 83 00 	call	0x106	; 0x106 <USART1_Transmit>
 12e:	f8 cf       	rjmp	.-16     	; 0x120 <main+0xc>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
