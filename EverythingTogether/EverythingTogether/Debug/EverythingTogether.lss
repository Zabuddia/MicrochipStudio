
EverythingTogether.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  000020b5  00002169  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000192e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000787  0000592e  0000192e  000019e2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000002f  00803802  00803802  0000216b  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000216b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000270  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005cce  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a80  00000000  00000000  00008146  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a92  00000000  00000000  0000abc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005a8  00000000  00000000  0000c658  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ea9  00000000  00000000  0000cc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000de8  00000000  00000000  0000eaa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000210  00000000  00000000  0000f891  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_12>
      34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      68:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      70:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      7c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      80:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      84:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      88:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      8c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      90:	52 07       	cpc	r21, r18
      92:	64 07       	cpc	r22, r20
      94:	6d 07       	cpc	r22, r29
      96:	72 07       	cpc	r23, r18
      98:	72 07       	cpc	r23, r18
      9a:	72 07       	cpc	r23, r18
      9c:	72 07       	cpc	r23, r18
      9e:	72 07       	cpc	r23, r18
      a0:	67 07       	cpc	r22, r23
      a2:	72 07       	cpc	r23, r18
      a4:	72 07       	cpc	r23, r18
      a6:	61 07       	cpc	r22, r17
      a8:	72 07       	cpc	r23, r18
      aa:	72 07       	cpc	r23, r18
      ac:	72 07       	cpc	r23, r18
      ae:	55 07       	cpc	r21, r21
      b0:	72 07       	cpc	r23, r18
      b2:	70 07       	cpc	r23, r16
      b4:	5e 07       	cpc	r21, r30
      b6:	58 07       	cpc	r21, r24
      b8:	5b 07       	cpc	r21, r27
      ba:	6a 07       	cpc	r22, r26

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	cd bf       	out	0x3d, r28	; 61
      c4:	df e3       	ldi	r29, 0x3F	; 63
      c6:	de bf       	out	0x3e, r29	; 62

000000c8 <__do_copy_data>:
      c8:	18 e3       	ldi	r17, 0x38	; 56
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b8 e3       	ldi	r27, 0x38	; 56
      ce:	e5 eb       	ldi	r30, 0xB5	; 181
      d0:	f0 e2       	ldi	r31, 0x20	; 32
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	a2 30       	cpi	r26, 0x02	; 2
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	28 e3       	ldi	r18, 0x38	; 56
      e0:	a2 e0       	ldi	r26, 0x02	; 2
      e2:	b8 e3       	ldi	r27, 0x38	; 56
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a1 33       	cpi	r26, 0x31	; 49
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	0e 94 f5 06 	call	0xdea	; 0xdea <main>
      f2:	0c 94 95 0c 	jmp	0x192a	; 0x192a <_exit>

000000f6 <__bad_interrupt>:
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <ADC_Init>:
#include "Button.h"

void ADC_Init(void) {
	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_8BIT_gc;
      fa:	e0 e0       	ldi	r30, 0x00	; 0
      fc:	f6 e0       	ldi	r31, 0x06	; 6
      fe:	85 e0       	ldi	r24, 0x05	; 5
     100:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_REFSEL_VDDREF_gc;
     102:	80 e1       	ldi	r24, 0x10	; 16
     104:	81 83       	std	Z+1, r24	; 0x01
     106:	08 95       	ret

00000108 <ADC_Switch>:
}

void ADC_Switch(uint8_t btn) {
	switch (btn)
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	41 f0       	breq	.+16     	; 0x11c <ADC_Switch+0x14>
     10c:	18 f0       	brcs	.+6      	; 0x114 <ADC_Switch+0xc>
     10e:	82 30       	cpi	r24, 0x02	; 2
     110:	49 f0       	breq	.+18     	; 0x124 <ADC_Switch+0x1c>
     112:	08 95       	ret
	{
		case IGN_1:
			ADC0.MUXPOS = IGN_1_bm;
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
     11a:	08 95       	ret
		case IGN_2:
			ADC0.MUXPOS = IGN_2_bm;
     11c:	8e e0       	ldi	r24, 0x0E	; 14
     11e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
     122:	08 95       	ret
		case HORN:
			ADC0.MUXPOS = HORN_bm;
     124:	84 e0       	ldi	r24, 0x04	; 4
     126:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
     12a:	08 95       	ret

0000012c <BTN_Pressed>:
			break;
	}
}

uint8_t BTN_Pressed(uint8_t btn) {
	ADC_Switch(btn);
     12c:	0e 94 84 00 	call	0x108	; 0x108 <ADC_Switch>
	ADC0.COMMAND = 0x01;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7fc608>
	while((!ADC0.INTFLAGS & 0x01));
     136:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7fc60b>
     13a:	88 23       	and	r24, r24
     13c:	e1 f3       	breq	.-8      	; 0x136 <BTN_Pressed+0xa>
	if (ADC0.RES > 0xF0) {
     13e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7fc610>
     142:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7fc611>
     146:	81 3f       	cpi	r24, 0xF1	; 241
     148:	91 05       	cpc	r25, r1
     14a:	10 f0       	brcs	.+4      	; 0x150 <BTN_Pressed+0x24>
		return 1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	08 95       	ret
	} else {
		return 0;
     150:	80 e0       	ldi	r24, 0x00	; 0
	}
     152:	08 95       	ret

00000154 <LED_Init>:
	PORTF.OUTCLR = (0x01 << RED_LED);
	PORTF.OUTCLR = (0x01 << GREEN_LED);
}

void LED_On(uint8_t led) {
	PORTF.OUTSET = (0x01 << led);
     154:	e0 ea       	ldi	r30, 0xA0	; 160
     156:	f4 e0       	ldi	r31, 0x04	; 4
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	91 83       	std	Z+1, r25	; 0x01
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	81 83       	std	Z+1, r24	; 0x01
     160:	96 83       	std	Z+6, r25	; 0x06
     162:	86 83       	std	Z+6, r24	; 0x06
     164:	08 95       	ret

00000166 <LED_Off>:
}

void LED_Off(uint8_t led) {
	PORTF.OUTCLR = (0x01 << led);
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	02 c0       	rjmp	.+4      	; 0x170 <LED_Off+0xa>
     16c:	22 0f       	add	r18, r18
     16e:	33 1f       	adc	r19, r19
     170:	8a 95       	dec	r24
     172:	e2 f7       	brpl	.-8      	; 0x16c <LED_Off+0x6>
     174:	20 93 a6 04 	sts	0x04A6, r18	; 0x8004a6 <__RODATA_PM_OFFSET__+0x7fc4a6>
     178:	08 95       	ret

0000017a <__vector_12>:

void ClearScreen(void);

void Reset(void);

ISR(TCB0_INT_vect) {
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	2f 93       	push	r18
     186:	3f 93       	push	r19
     188:	4f 93       	push	r20
     18a:	5f 93       	push	r21
     18c:	6f 93       	push	r22
     18e:	7f 93       	push	r23
     190:	8f 93       	push	r24
     192:	9f 93       	push	r25
     194:	af 93       	push	r26
     196:	bf 93       	push	r27
     198:	ef 93       	push	r30
     19a:	ff 93       	push	r31
	TCB0.INTFLAGS = TCB_CAPT_bm;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <__RODATA_PM_OFFSET__+0x7fca86>
	if (timerMode) {
     1a2:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <timerMode>
     1a6:	88 23       	and	r24, r24
     1a8:	19 f1       	breq	.+70     	; 0x1f0 <__vector_12+0x76>
		light_on_counter = 0;
     1aa:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <light_on_counter>
     1ae:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <light_on_counter+0x1>
		TBMoverflowCount = 0;
     1b2:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     1b6:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
		overflowCount++;
     1ba:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <overflowCount>
     1be:	8f 5f       	subi	r24, 0xFF	; 255
     1c0:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <overflowCount>
		if (overflowCount >= 100) {
     1c4:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <overflowCount>
     1c8:	84 36       	cpi	r24, 0x64	; 100
     1ca:	08 f4       	brcc	.+2      	; 0x1ce <__vector_12+0x54>
     1cc:	91 c0       	rjmp	.+290    	; 0x2f0 <__vector_12+0x176>
			overflowCount = 0;
     1ce:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <overflowCount>
			counter++;
     1d2:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <counter>
     1d6:	8f 5f       	subi	r24, 0xFF	; 255
     1d8:	80 93 29 38 	sts	0x3829, r24	; 0x803829 <counter>
			USART1_Transmit_Number(counter);
     1dc:	80 91 29 38 	lds	r24, 0x3829	; 0x803829 <counter>
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 1f 09 	call	0x123e	; 0x123e <USART1_Transmit_Number>
			USART1_Transmit_String("\n\r");
     1e6:	85 e6       	ldi	r24, 0x65	; 101
     1e8:	9f e5       	ldi	r25, 0x5F	; 95
     1ea:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
     1ee:	80 c0       	rjmp	.+256    	; 0x2f0 <__vector_12+0x176>
		}
	} else if (serialButtonLEDMode) {
     1f0:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <serialButtonLEDMode>
     1f4:	88 23       	and	r24, r24
     1f6:	91 f0       	breq	.+36     	; 0x21c <__vector_12+0xa2>
		overflowCount = 0;
     1f8:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <overflowCount>
		counter = 0;
     1fc:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <counter>
		TBMoverflowCount = 0;
     200:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     204:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
		light_on_counter++;
     208:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <light_on_counter>
     20c:	90 91 12 38 	lds	r25, 0x3812	; 0x803812 <light_on_counter+0x1>
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <light_on_counter>
     216:	90 93 12 38 	sts	0x3812, r25	; 0x803812 <light_on_counter+0x1>
     21a:	6a c0       	rjmp	.+212    	; 0x2f0 <__vector_12+0x176>
	} else if (timerButtonMode) {
     21c:	80 91 22 38 	lds	r24, 0x3822	; 0x803822 <timerButtonMode>
     220:	88 23       	and	r24, r24
     222:	09 f4       	brne	.+2      	; 0x226 <__vector_12+0xac>
     224:	65 c0       	rjmp	.+202    	; 0x2f0 <__vector_12+0x176>
		overflowCount = 0;
     226:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <overflowCount>
		counter = 0;
     22a:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <counter>
		light_on_counter = 0;
     22e:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <light_on_counter>
     232:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <light_on_counter+0x1>
		if (ign1Pressed) {
     236:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <ign1Pressed>
     23a:	88 23       	and	r24, r24
     23c:	d9 f0       	breq	.+54     	; 0x274 <__vector_12+0xfa>
			TBMoverflowCount++;
     23e:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     242:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <TBMoverflowCount>
     24c:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <TBMoverflowCount+0x1>
			if (TBMoverflowCount >= 100) {
     250:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     254:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     258:	84 36       	cpi	r24, 0x64	; 100
     25a:	91 05       	cpc	r25, r1
     25c:	08 f4       	brcc	.+2      	; 0x260 <__vector_12+0xe6>
     25e:	48 c0       	rjmp	.+144    	; 0x2f0 <__vector_12+0x176>
				TBMoverflowCount = 0;
     260:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     264:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
				ign1Pressed = 0;
     268:	10 92 25 38 	sts	0x3825, r1	; 0x803825 <ign1Pressed>
				Set_Brightness_Red(0);
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
     272:	3e c0       	rjmp	.+124    	; 0x2f0 <__vector_12+0x176>
			}
		} else if (ign2Pressed) {
     274:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <ign2Pressed>
     278:	88 23       	and	r24, r24
     27a:	d1 f0       	breq	.+52     	; 0x2b0 <__vector_12+0x136>
			TBMoverflowCount++;
     27c:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     280:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <TBMoverflowCount>
     28a:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <TBMoverflowCount+0x1>
			if (TBMoverflowCount >= 500) {
     28e:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     292:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     296:	84 3f       	cpi	r24, 0xF4	; 244
     298:	91 40       	sbci	r25, 0x01	; 1
     29a:	50 f1       	brcs	.+84     	; 0x2f0 <__vector_12+0x176>
				TBMoverflowCount = 0;
     29c:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     2a0:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
				ign2Pressed = 0;
     2a4:	10 92 24 38 	sts	0x3824, r1	; 0x803824 <ign2Pressed>
				Set_Brightness_Green(0);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
     2ae:	20 c0       	rjmp	.+64     	; 0x2f0 <__vector_12+0x176>
			}
		} else if (hornPressed) {
     2b0:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <hornPressed>
     2b4:	88 23       	and	r24, r24
     2b6:	e1 f0       	breq	.+56     	; 0x2f0 <__vector_12+0x176>
			TBMoverflowCount++;
     2b8:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     2bc:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <TBMoverflowCount>
     2c6:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <TBMoverflowCount+0x1>
			if (TBMoverflowCount >= 1000) {
     2ca:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <TBMoverflowCount>
     2ce:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <TBMoverflowCount+0x1>
     2d2:	88 3e       	cpi	r24, 0xE8	; 232
     2d4:	93 40       	sbci	r25, 0x03	; 3
     2d6:	60 f0       	brcs	.+24     	; 0x2f0 <__vector_12+0x176>
				TBMoverflowCount = 0;
     2d8:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     2dc:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
				hornPressed = 0;
     2e0:	10 92 23 38 	sts	0x3823, r1	; 0x803823 <hornPressed>
				Set_Brightness_Red(0);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
				Set_Brightness_Green(0);
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
			}
		}
	}
	
}
     2f0:	ff 91       	pop	r31
     2f2:	ef 91       	pop	r30
     2f4:	bf 91       	pop	r27
     2f6:	af 91       	pop	r26
     2f8:	9f 91       	pop	r25
     2fa:	8f 91       	pop	r24
     2fc:	7f 91       	pop	r23
     2fe:	6f 91       	pop	r22
     300:	5f 91       	pop	r21
     302:	4f 91       	pop	r20
     304:	3f 91       	pop	r19
     306:	2f 91       	pop	r18
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <ReadAccelerometerMode>:
		}
		USART1_Transmit_String("\n\r");
    }
}

void ReadAccelerometerMode(void) {
     312:	cf 93       	push	r28
	USART1_Transmit_String("You are in Read accelerometer mode (press q to exit)\n\r");
     314:	8e e2       	ldi	r24, 0x2E	; 46
     316:	99 e5       	ldi	r25, 0x59	; 89
     318:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	USART1_Transmit_String("This tells you the x, y, and z accelerations and the total acceleration\n\r");
     31c:	85 e6       	ldi	r24, 0x65	; 101
     31e:	99 e5       	ldi	r25, 0x59	; 89
     320:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	uint8_t quit = 0;
     324:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     326:	47 c0       	rjmp	.+142    	; 0x3b6 <ReadAccelerometerMode+0xa4>
		wdt_reset();
     328:	a8 95       	wdr
		FXLS8967_ReadAccel(&x, &y, &z, &a);
     32a:	28 e0       	ldi	r18, 0x08	; 8
     32c:	38 e3       	ldi	r19, 0x38	; 56
     32e:	4a e0       	ldi	r20, 0x0A	; 10
     330:	58 e3       	ldi	r21, 0x38	; 56
     332:	6c e0       	ldi	r22, 0x0C	; 12
     334:	78 e3       	ldi	r23, 0x38	; 56
     336:	8e e0       	ldi	r24, 0x0E	; 14
     338:	98 e3       	ldi	r25, 0x38	; 56
     33a:	0e 94 15 08 	call	0x102a	; 0x102a <FXLS8967_ReadAccel>
		USART1_Transmit_String("X: ");
     33e:	8f ea       	ldi	r24, 0xAF	; 175
     340:	99 e5       	ldi	r25, 0x59	; 89
     342:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_Number(x);
     346:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <x>
     34a:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <x+0x1>
     34e:	0e 94 1f 09 	call	0x123e	; 0x123e <USART1_Transmit_Number>
		USART1_Transmit_String(" Y: ");
     352:	83 eb       	ldi	r24, 0xB3	; 179
     354:	99 e5       	ldi	r25, 0x59	; 89
     356:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_Number(y);
     35a:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <y>
     35e:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <y+0x1>
     362:	0e 94 1f 09 	call	0x123e	; 0x123e <USART1_Transmit_Number>
		USART1_Transmit_String(" Z: ");
     366:	88 eb       	ldi	r24, 0xB8	; 184
     368:	99 e5       	ldi	r25, 0x59	; 89
     36a:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_Number(z);
     36e:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <z>
     372:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <z+0x1>
     376:	0e 94 1f 09 	call	0x123e	; 0x123e <USART1_Transmit_Number>
		USART1_Transmit_String(" A: ");
     37a:	8d eb       	ldi	r24, 0xBD	; 189
     37c:	99 e5       	ldi	r25, 0x59	; 89
     37e:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_Number(a);
     382:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <a>
     386:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <a+0x1>
     38a:	0e 94 1f 09 	call	0x123e	; 0x123e <USART1_Transmit_Number>
		USART1_Transmit_String("\n\r");
     38e:	85 e6       	ldi	r24, 0x65	; 101
     390:	9f e5       	ldi	r25, 0x5F	; 95
     392:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     396:	2f ef       	ldi	r18, 0xFF	; 255
     398:	80 e7       	ldi	r24, 0x70	; 112
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	21 50       	subi	r18, 0x01	; 1
     39e:	80 40       	sbci	r24, 0x00	; 0
     3a0:	90 40       	sbci	r25, 0x00	; 0
     3a2:	e1 f7       	brne	.-8      	; 0x39c <ReadAccelerometerMode+0x8a>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <ReadAccelerometerMode+0x94>
     3a6:	00 00       	nop
		_delay_ms(300);
		if (USART1.STATUS & USART_RXCIF_bm) {
     3a8:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     3ac:	88 23       	and	r24, r24
     3ae:	1c f4       	brge	.+6      	; 0x3b6 <ReadAccelerometerMode+0xa4>
			quit = USART1_Receive_No_Wait();
     3b0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <USART1_Receive_No_Wait>
     3b4:	c8 2f       	mov	r28, r24

void ReadAccelerometerMode(void) {
	USART1_Transmit_String("You are in Read accelerometer mode (press q to exit)\n\r");
	USART1_Transmit_String("This tells you the x, y, and z accelerations and the total acceleration\n\r");
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     3b6:	8c 2f       	mov	r24, r28
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 a1 09 	call	0x1342	; 0x1342 <tolower>
     3be:	81 37       	cpi	r24, 0x71	; 113
     3c0:	91 05       	cpc	r25, r1
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <ReadAccelerometerMode+0xb4>
     3c4:	b1 cf       	rjmp	.-158    	; 0x328 <ReadAccelerometerMode+0x16>
		_delay_ms(300);
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
}
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <PWMPerception>:

void PWMPerception(void) {
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
	bool ign1_pressed = BTN_Pressed(IGN_1);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	0e 94 96 00 	call	0x12c	; 0x12c <BTN_Pressed>
     3d4:	c8 2f       	mov	r28, r24
	bool ign2_pressed = BTN_Pressed(IGN_2);
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 96 00 	call	0x12c	; 0x12c <BTN_Pressed>
     3dc:	d8 2f       	mov	r29, r24
	bool horn_pressed = BTN_Pressed(HORN);
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	0e 94 96 00 	call	0x12c	; 0x12c <BTN_Pressed>
	if (ign1_pressed && !ign2_pressed && !horn_pressed) {
     3e4:	cc 23       	and	r28, r28
     3e6:	41 f0       	breq	.+16     	; 0x3f8 <PWMPerception+0x2e>
     3e8:	d1 11       	cpse	r29, r1
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <PWMPerception+0x2e>
     3ec:	81 11       	cpse	r24, r1
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <PWMPerception+0x2e>
		PWMIGN1_pressed = true;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <PWMIGN1_pressed>
     3f6:	1a c0       	rjmp	.+52     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	} else if (!ign1_pressed && ign2_pressed && !horn_pressed) {
     3f8:	c1 11       	cpse	r28, r1
     3fa:	08 c0       	rjmp	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fc:	dd 23       	and	r29, r29
     3fe:	31 f0       	breq	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     400:	81 11       	cpse	r24, r1
     402:	04 c0       	rjmp	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		PWMIGN2_pressed = true;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <PWMIGN2_pressed>
     40a:	10 c0       	rjmp	.+32     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	} else if (!ign1_pressed && !ign2_pressed && horn_pressed) {
     40c:	c1 11       	cpse	r28, r1
     40e:	08 c0       	rjmp	.+16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     410:	d1 11       	cpse	r29, r1
     412:	06 c0       	rjmp	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     414:	88 23       	and	r24, r24
     416:	21 f0       	breq	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		PWMHorn_pressed = true;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <PWMHorn_pressed>
     41e:	06 c0       	rjmp	.+12     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	} else {
		PWMIGN1_pressed = false;
     420:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <PWMIGN1_pressed>
		PWMIGN2_pressed = false;
     424:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <PWMIGN2_pressed>
		PWMHorn_pressed = false;
     428:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <PWMHorn_pressed>
	}
}
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	08 95       	ret

00000432 <PWMIGN1>:

void PWMIGN1(void) {
	static uint8_t IGN1_state = 0;
	switch (IGN1_state)
     432:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <IGN1_state.3762>
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	71 f0       	breq	.+28     	; 0x456 <PWMIGN1+0x24>
     43a:	18 f0       	brcs	.+6      	; 0x442 <PWMIGN1+0x10>
     43c:	82 30       	cpi	r24, 0x02	; 2
     43e:	99 f0       	breq	.+38     	; 0x466 <PWMIGN1+0x34>
     440:	08 95       	ret
	{
	case 0:
		decrease_brightness = false;
     442:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <decrease_brightness>
		if (PWMIGN1_pressed) {
     446:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <PWMIGN1_pressed>
     44a:	88 23       	and	r24, r24
     44c:	89 f0       	breq	.+34     	; 0x470 <PWMIGN1+0x3e>
			IGN1_state = 1;
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <IGN1_state.3762>
     454:	08 95       	ret
		}
		break;
	case 1:
		if (!PWMIGN1_pressed) {
     456:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <PWMIGN1_pressed>
     45a:	81 11       	cpse	r24, r1
     45c:	09 c0       	rjmp	.+18     	; 0x470 <PWMIGN1+0x3e>
			IGN1_state = 2;
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <IGN1_state.3762>
     464:	08 95       	ret
		}
		break;
	case 2:
		decrease_brightness = true;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <decrease_brightness>
		IGN1_state = 0;
     46c:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <IGN1_state.3762>
     470:	08 95       	ret

00000472 <PWMIGN2>:
	}
}

void PWMIGN2(void) {
	static uint8_t IGN2_state = 0;
	switch (IGN2_state)
     472:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <IGN2_state.3770>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	71 f0       	breq	.+28     	; 0x496 <PWMIGN2+0x24>
     47a:	18 f0       	brcs	.+6      	; 0x482 <PWMIGN2+0x10>
     47c:	82 30       	cpi	r24, 0x02	; 2
     47e:	99 f0       	breq	.+38     	; 0x4a6 <PWMIGN2+0x34>
     480:	08 95       	ret
	{
	case 0:
		increase_brightness = false;
     482:	10 92 2f 38 	sts	0x382F, r1	; 0x80382f <increase_brightness>
		if (PWMIGN2_pressed) {
     486:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <PWMIGN2_pressed>
     48a:	88 23       	and	r24, r24
     48c:	89 f0       	breq	.+34     	; 0x4b0 <PWMIGN2+0x3e>
			IGN2_state = 1;
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <IGN2_state.3770>
     494:	08 95       	ret
		}
		break;
	case 1:
		if (!PWMIGN2_pressed) {
     496:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <PWMIGN2_pressed>
     49a:	81 11       	cpse	r24, r1
     49c:	09 c0       	rjmp	.+18     	; 0x4b0 <PWMIGN2+0x3e>
			IGN2_state = 2;
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <IGN2_state.3770>
     4a4:	08 95       	ret
		}
		break;
	case 2:
		increase_brightness = true;
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <increase_brightness>
		IGN2_state = 0;
     4ac:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <IGN2_state.3770>
     4b0:	08 95       	ret

000004b2 <PWMHORN>:
	}
}

void PWMHORN(void) {
	static uint8_t Horn_state = 0;
	switch (Horn_state)
     4b2:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <Horn_state.3778>
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	71 f0       	breq	.+28     	; 0x4d6 <PWMHORN+0x24>
     4ba:	18 f0       	brcs	.+6      	; 0x4c2 <PWMHORN+0x10>
     4bc:	82 30       	cpi	r24, 0x02	; 2
     4be:	99 f0       	breq	.+38     	; 0x4e6 <PWMHORN+0x34>
     4c0:	08 95       	ret
	{
	case 0:
		change_light_color = false;
     4c2:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <change_light_color>
		if (PWMHorn_pressed) {
     4c6:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <PWMHorn_pressed>
     4ca:	88 23       	and	r24, r24
     4cc:	89 f0       	breq	.+34     	; 0x4f0 <PWMHORN+0x3e>
			Horn_state = 1;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <Horn_state.3778>
     4d4:	08 95       	ret
		}
		break;
	case 1:
		if (!PWMHorn_pressed) {
     4d6:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <PWMHorn_pressed>
     4da:	81 11       	cpse	r24, r1
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <PWMHORN+0x3e>
			Horn_state = 2;
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <Horn_state.3778>
     4e4:	08 95       	ret
		}
		break;
	case 2:
		change_light_color = true;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	80 93 30 38 	sts	0x3830, r24	; 0x803830 <change_light_color>
		Horn_state = 0;
     4ec:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <Horn_state.3778>
     4f0:	08 95       	ret

000004f2 <PWMPlanning>:
		break;
	}
}

void PWMPlanning(void) {
	PWMIGN1();
     4f2:	0e 94 19 02 	call	0x432	; 0x432 <PWMIGN1>
	PWMIGN2();
     4f6:	0e 94 39 02 	call	0x472	; 0x472 <PWMIGN2>
	PWMHORN();
     4fa:	0e 94 59 02 	call	0x4b2	; 0x4b2 <PWMHORN>
     4fe:	08 95       	ret

00000500 <PWMAction>:
}

void PWMAction(void) {
	if (change_light_color) {
     500:	80 91 30 38 	lds	r24, 0x3830	; 0x803830 <change_light_color>
     504:	88 23       	and	r24, r24
     506:	59 f0       	breq	.+22     	; 0x51e <PWMAction+0x1e>
		light_color++;
     508:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <light_color>
     50c:	8f 5f       	subi	r24, 0xFF	; 255
     50e:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <light_color>
		if (light_color > OFF) light_color = RED;
     512:	84 30       	cpi	r24, 0x04	; 4
     514:	10 f0       	brcs	.+4      	; 0x51a <PWMAction+0x1a>
     516:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <light_color>
		change_light_color = 0;
     51a:	10 92 30 38 	sts	0x3830, r1	; 0x803830 <change_light_color>
	}
	if (increase_brightness) {
     51e:	80 91 2f 38 	lds	r24, 0x382F	; 0x80382f <increase_brightness>
     522:	88 23       	and	r24, r24
     524:	39 f0       	breq	.+14     	; 0x534 <PWMAction+0x34>
		if (brightness < 250) brightness += 10;
     526:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     52a:	8a 3f       	cpi	r24, 0xFA	; 250
     52c:	18 f4       	brcc	.+6      	; 0x534 <PWMAction+0x34>
     52e:	86 5f       	subi	r24, 0xF6	; 246
     530:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}
	if (decrease_brightness) {
     534:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <decrease_brightness>
     538:	88 23       	and	r24, r24
     53a:	39 f0       	breq	.+14     	; 0x54a <PWMAction+0x4a>
		if (brightness > 0) brightness -= 10;
     53c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     540:	88 23       	and	r24, r24
     542:	19 f0       	breq	.+6      	; 0x54a <PWMAction+0x4a>
     544:	8a 50       	subi	r24, 0x0A	; 10
     546:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}
	switch (light_color)
     54a:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <light_color>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	71 f0       	breq	.+28     	; 0x56e <PWMAction+0x6e>
     552:	28 f0       	brcs	.+10     	; 0x55e <PWMAction+0x5e>
     554:	82 30       	cpi	r24, 0x02	; 2
     556:	99 f0       	breq	.+38     	; 0x57e <PWMAction+0x7e>
     558:	83 30       	cpi	r24, 0x03	; 3
     55a:	d1 f0       	breq	.+52     	; 0x590 <PWMAction+0x90>
     55c:	08 95       	ret
	{
	case RED:
		Set_Brightness_Red(brightness);
     55e:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     562:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
		Set_Brightness_Green(0);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
		break;
     56c:	08 95       	ret
	case GREEN:
		Set_Brightness_Red(0);
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
		Set_Brightness_Green(brightness);
     574:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     578:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
		break;
     57c:	08 95       	ret
	case YELLOW:
		Set_Brightness_Red(brightness);
     57e:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     582:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
		Set_Brightness_Green(brightness);
     586:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
     58a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
		break;
     58e:	08 95       	ret
	case OFF:
		Set_Brightness_Red(0);
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
		Set_Brightness_Green(0);
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
     59c:	08 95       	ret

0000059e <PWMMode>:
		break;
	}
}

void PWMMode(void) {
     59e:	cf 93       	push	r28
	USART1_Transmit_String("You are in PWM mode (press q to exit)\n\r");
     5a0:	82 ec       	ldi	r24, 0xC2	; 194
     5a2:	99 e5       	ldi	r25, 0x59	; 89
     5a4:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	USART1_Transmit_String("You can change the color with the HORN button and make the light dimmer with the IGN1 button and brighter with the IGN2 button\n\r");
     5a8:	8a ee       	ldi	r24, 0xEA	; 234
     5aa:	99 e5       	ldi	r25, 0x59	; 89
     5ac:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	uint8_t quit = 0;
     5b0:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     5b2:	0e c0       	rjmp	.+28     	; 0x5d0 <PWMMode+0x32>
		wdt_reset();
     5b4:	a8 95       	wdr
		PWMPerception();
     5b6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <PWMPerception>
		PWMPlanning();
     5ba:	0e 94 79 02 	call	0x4f2	; 0x4f2 <PWMPlanning>
		PWMAction();
     5be:	0e 94 80 02 	call	0x500	; 0x500 <PWMAction>
		if (USART1.STATUS & USART_RXCIF_bm) {
     5c2:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     5c6:	88 23       	and	r24, r24
     5c8:	1c f4       	brge	.+6      	; 0x5d0 <PWMMode+0x32>
			quit = USART1_Receive_No_Wait();
     5ca:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <USART1_Receive_No_Wait>
     5ce:	c8 2f       	mov	r28, r24

void PWMMode(void) {
	USART1_Transmit_String("You are in PWM mode (press q to exit)\n\r");
	USART1_Transmit_String("You can change the color with the HORN button and make the light dimmer with the IGN1 button and brighter with the IGN2 button\n\r");
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     5d0:	8c 2f       	mov	r24, r28
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 a1 09 	call	0x1342	; 0x1342 <tolower>
     5d8:	81 37       	cpi	r24, 0x71	; 113
     5da:	91 05       	cpc	r25, r1
     5dc:	59 f7       	brne	.-42     	; 0x5b4 <PWMMode+0x16>
		PWMAction();
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Set_Brightness_Red(0);
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
}
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <TimerMode>:

void TimerMode(void) {
     5ee:	cf 93       	push	r28
	USART1_Transmit_String("You are in Timer mode (press q to exit)\n\r");
     5f0:	8b e6       	ldi	r24, 0x6B	; 107
     5f2:	9a e5       	ldi	r25, 0x5A	; 90
     5f4:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	USART1_Transmit_String("This tells how many seconds have passed\n\r");
     5f8:	85 e9       	ldi	r24, 0x95	; 149
     5fa:	9a e5       	ldi	r25, 0x5A	; 90
     5fc:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	Timer_Start();
     600:	0e 94 bf 08 	call	0x117e	; 0x117e <Timer_Start>
	timerMode = true;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <timerMode>
	uint8_t quit = 0;
     60a:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     60c:	08 c0       	rjmp	.+16     	; 0x61e <TimerMode+0x30>
		wdt_reset();
     60e:	a8 95       	wdr
		if (USART1.STATUS & USART_RXCIF_bm) {
     610:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     614:	88 23       	and	r24, r24
     616:	1c f4       	brge	.+6      	; 0x61e <TimerMode+0x30>
			quit = USART1_Receive_No_Wait();
     618:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <USART1_Receive_No_Wait>
     61c:	c8 2f       	mov	r28, r24
	USART1_Transmit_String("You are in Timer mode (press q to exit)\n\r");
	USART1_Transmit_String("This tells how many seconds have passed\n\r");
	Timer_Start();
	timerMode = true;
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     61e:	8c 2f       	mov	r24, r28
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 a1 09 	call	0x1342	; 0x1342 <tolower>
     626:	81 37       	cpi	r24, 0x71	; 113
     628:	91 05       	cpc	r25, r1
     62a:	89 f7       	brne	.-30     	; 0x60e <TimerMode+0x20>
		wdt_reset();
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Timer_Stop();
     62c:	0e 94 c5 08 	call	0x118a	; 0x118a <Timer_Stop>
	counter = 0;
     630:	10 92 29 38 	sts	0x3829, r1	; 0x803829 <counter>
	overflowCount = 0;
     634:	10 92 28 38 	sts	0x3828, r1	; 0x803828 <overflowCount>
	timerMode = false;
     638:	10 92 2a 38 	sts	0x382A, r1	; 0x80382a <timerMode>
}
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <TimerButtonMode>:

void TimerButtonMode(void) {
     640:	cf 93       	push	r28
	USART1_Transmit_String("You are in Timer button mode (press q to exit)\n\r");
     642:	8f eb       	ldi	r24, 0xBF	; 191
     644:	9a e5       	ldi	r25, 0x5A	; 90
     646:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	USART1_Transmit_String("Pressing IGN1 turns the red light on for 1 second. IGN2 turns the green light on for 5 seconds. HORN turns the yellow light on for 10 seconds\n\r");
     64a:	80 ef       	ldi	r24, 0xF0	; 240
     64c:	9a e5       	ldi	r25, 0x5A	; 90
     64e:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	Timer_Start();
     652:	0e 94 bf 08 	call	0x117e	; 0x117e <Timer_Start>
	timerButtonMode = true;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 93 22 38 	sts	0x3822, r24	; 0x803822 <timerButtonMode>
	uint8_t quit = 0;
     65c:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     65e:	46 c0       	rjmp	.+140    	; 0x6ec <TimerButtonMode+0xac>
		wdt_reset();
     660:	a8 95       	wdr
		if (BTN_Pressed(IGN_1) && !ign2Pressed && !hornPressed) {
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 96 00 	call	0x12c	; 0x12c <BTN_Pressed>
     668:	88 23       	and	r24, r24
     66a:	79 f0       	breq	.+30     	; 0x68a <TimerButtonMode+0x4a>
     66c:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <ign2Pressed>
     670:	81 11       	cpse	r24, r1
     672:	0b c0       	rjmp	.+22     	; 0x68a <TimerButtonMode+0x4a>
     674:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <hornPressed>
     678:	81 11       	cpse	r24, r1
     67a:	07 c0       	rjmp	.+14     	; 0x68a <TimerButtonMode+0x4a>
			Set_Brightness_Red(255);
     67c:	8f ef       	ldi	r24, 0xFF	; 255
     67e:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			ign1Pressed = 1;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 25 38 	sts	0x3825, r24	; 0x803825 <ign1Pressed>
     688:	2a c0       	rjmp	.+84     	; 0x6de <TimerButtonMode+0x9e>
		} else if (BTN_Pressed(IGN_2) && !ign1Pressed && !hornPressed) {
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 96 00 	call	0x12c	; 0x12c <BTN_Pressed>
     690:	88 23       	and	r24, r24
     692:	79 f0       	breq	.+30     	; 0x6b2 <TimerButtonMode+0x72>
     694:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <ign1Pressed>
     698:	81 11       	cpse	r24, r1
     69a:	0b c0       	rjmp	.+22     	; 0x6b2 <TimerButtonMode+0x72>
     69c:	80 91 23 38 	lds	r24, 0x3823	; 0x803823 <hornPressed>
     6a0:	81 11       	cpse	r24, r1
     6a2:	07 c0       	rjmp	.+14     	; 0x6b2 <TimerButtonMode+0x72>
			Set_Brightness_Green(255);
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
			ign2Pressed = 1;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	80 93 24 38 	sts	0x3824, r24	; 0x803824 <ign2Pressed>
     6b0:	16 c0       	rjmp	.+44     	; 0x6de <TimerButtonMode+0x9e>
		} else if (BTN_Pressed(HORN) && !ign1Pressed && !ign2Pressed) {
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	0e 94 96 00 	call	0x12c	; 0x12c <BTN_Pressed>
     6b8:	88 23       	and	r24, r24
     6ba:	89 f0       	breq	.+34     	; 0x6de <TimerButtonMode+0x9e>
     6bc:	80 91 25 38 	lds	r24, 0x3825	; 0x803825 <ign1Pressed>
     6c0:	81 11       	cpse	r24, r1
     6c2:	0d c0       	rjmp	.+26     	; 0x6de <TimerButtonMode+0x9e>
     6c4:	80 91 24 38 	lds	r24, 0x3824	; 0x803824 <ign2Pressed>
     6c8:	81 11       	cpse	r24, r1
     6ca:	09 c0       	rjmp	.+18     	; 0x6de <TimerButtonMode+0x9e>
			Set_Brightness_Red(255);
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			Set_Brightness_Green(255);
     6d2:	8f ef       	ldi	r24, 0xFF	; 255
     6d4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
			hornPressed = 1;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	80 93 23 38 	sts	0x3823, r24	; 0x803823 <hornPressed>
		}
		if (USART1.STATUS & USART_RXCIF_bm) {
     6de:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     6e2:	88 23       	and	r24, r24
     6e4:	1c f4       	brge	.+6      	; 0x6ec <TimerButtonMode+0xac>
			quit = USART1_Receive_No_Wait();
     6e6:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <USART1_Receive_No_Wait>
     6ea:	c8 2f       	mov	r28, r24
	USART1_Transmit_String("You are in Timer button mode (press q to exit)\n\r");
	USART1_Transmit_String("Pressing IGN1 turns the red light on for 1 second. IGN2 turns the green light on for 5 seconds. HORN turns the yellow light on for 10 seconds\n\r");
	Timer_Start();
	timerButtonMode = true;
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     6ec:	8c 2f       	mov	r24, r28
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 a1 09 	call	0x1342	; 0x1342 <tolower>
     6f4:	81 37       	cpi	r24, 0x71	; 113
     6f6:	91 05       	cpc	r25, r1
     6f8:	09 f0       	breq	.+2      	; 0x6fc <TimerButtonMode+0xbc>
     6fa:	b2 cf       	rjmp	.-156    	; 0x660 <TimerButtonMode+0x20>
		}
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Timer_Stop();
     6fc:	0e 94 c5 08 	call	0x118a	; 0x118a <Timer_Stop>
	TBMoverflowCount = 0;
     700:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <TBMoverflowCount>
     704:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <TBMoverflowCount+0x1>
	timerButtonMode = false;
     708:	10 92 22 38 	sts	0x3822, r1	; 0x803822 <timerButtonMode>
	Set_Brightness_Red(0);
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
}
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <SerialCommunicationMode>:

void SerialCommunicationMode(void) {
     71c:	cf 93       	push	r28
	USART1_Transmit_String("You are in Serial communication mode (press q to exit)\n\r");
     71e:	80 e8       	ldi	r24, 0x80	; 128
     720:	9b e5       	ldi	r25, 0x5B	; 91
     722:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	USART1_Transmit_String("Anything you type will be sent back to you\n\r");
     726:	89 eb       	ldi	r24, 0xB9	; 185
     728:	9b e5       	ldi	r25, 0x5B	; 91
     72a:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	uint8_t message = 0;
     72e:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(message) != 'q') {
     730:	05 c0       	rjmp	.+10     	; 0x73c <SerialCommunicationMode+0x20>
		message = USART1_Receive();
     732:	0e 94 71 09 	call	0x12e2	; 0x12e2 <USART1_Receive>
     736:	c8 2f       	mov	r28, r24
		USART1_Transmit(message);
     738:	0e 94 18 09 	call	0x1230	; 0x1230 <USART1_Transmit>

void SerialCommunicationMode(void) {
	USART1_Transmit_String("You are in Serial communication mode (press q to exit)\n\r");
	USART1_Transmit_String("Anything you type will be sent back to you\n\r");
	uint8_t message = 0;
	while (tolower(message) != 'q') {
     73c:	8c 2f       	mov	r24, r28
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 a1 09 	call	0x1342	; 0x1342 <tolower>
     744:	81 37       	cpi	r24, 0x71	; 113
     746:	91 05       	cpc	r25, r1
     748:	a1 f7       	brne	.-24     	; 0x732 <SerialCommunicationMode+0x16>
		message = USART1_Receive();
		USART1_Transmit(message);
	}
	USART1_Transmit_String("\n\r");
     74a:	85 e6       	ldi	r24, 0x65	; 101
     74c:	9f e5       	ldi	r25, 0x5F	; 95
     74e:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
}
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <SBLPerceive_Input>:
}

void SBLPerceive_Input(void) {
	uint8_t input = 0;
	do {
		wdt_reset();
     756:	a8 95       	wdr
		input = USART1_Receive();
     758:	0e 94 71 09 	call	0x12e2	; 0x12e2 <USART1_Receive>
		input = toupper(input);
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 a9 09 	call	0x1352	; 0x1352 <toupper>
     762:	9c 01       	movw	r18, r24
	} while (!((input == 'G') || (input == 'R') || (input == 'Y')));
     764:	87 34       	cpi	r24, 0x47	; 71
     766:	21 f0       	breq	.+8      	; 0x770 <SBLPerceive_Input+0x1a>
     768:	82 35       	cpi	r24, 0x52	; 82
     76a:	11 f0       	breq	.+4      	; 0x770 <SBLPerceive_Input+0x1a>
     76c:	89 35       	cpi	r24, 0x59	; 89
     76e:	99 f7       	brne	.-26     	; 0x756 <SBLPerceive_Input>
		
	switch (input)
     770:	33 27       	eor	r19, r19
     772:	22 35       	cpi	r18, 0x52	; 82
     774:	31 05       	cpc	r19, r1
     776:	39 f0       	breq	.+14     	; 0x786 <SBLPerceive_Input+0x30>
     778:	29 35       	cpi	r18, 0x59	; 89
     77a:	31 05       	cpc	r19, r1
     77c:	a1 f0       	breq	.+40     	; 0x7a6 <SBLPerceive_Input+0x50>
     77e:	27 34       	cpi	r18, 0x47	; 71
     780:	31 05       	cpc	r19, r1
     782:	c9 f4       	brne	.+50     	; 0x7b6 <SBLPerceive_Input+0x60>
     784:	08 c0       	rjmp	.+16     	; 0x796 <SBLPerceive_Input+0x40>
	{
	case 'R':
		Input_R = true;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	80 93 18 38 	sts	0x3818, r24	; 0x803818 <Input_R>
		Input_G = false;
     78c:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <Input_G>
		Input_Y = false;
     790:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <Input_Y>
		break;
     794:	08 95       	ret
	case 'G':
		Input_G = true;
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	80 93 17 38 	sts	0x3817, r24	; 0x803817 <Input_G>
		Input_R = false;
     79c:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <Input_R>
		Input_Y = false;
     7a0:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <Input_Y>
		break;
     7a4:	08 95       	ret
	case 'Y':
		Input_Y = true;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <Input_Y>
		Input_G = false;
     7ac:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <Input_G>
		Input_R = false;
     7b0:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <Input_R>
		break;
     7b4:	08 95       	ret
	default:
		Input_R = false;
     7b6:	10 92 18 38 	sts	0x3818, r1	; 0x803818 <Input_R>
		Input_G = false;
     7ba:	10 92 17 38 	sts	0x3817, r1	; 0x803817 <Input_G>
		Input_Y = false;
     7be:	10 92 16 38 	sts	0x3816, r1	; 0x803816 <Input_Y>
     7c2:	08 95       	ret

000007c4 <SBLPerceive_Buttons>:
		USART1_Transmit(message);
	}
	USART1_Transmit_String("\n\r");
}

void SBLPerceive_Buttons(void) {
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
	bool ign1_pressed = BTN_Pressed(IGN_1);
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 96 00 	call	0x12c	; 0x12c <BTN_Pressed>
     7ce:	c8 2f       	mov	r28, r24
	bool ign2_pressed = BTN_Pressed(IGN_2);
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e 94 96 00 	call	0x12c	; 0x12c <BTN_Pressed>
     7d6:	d8 2f       	mov	r29, r24
	bool horn_pressed = BTN_Pressed(HORN);
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	0e 94 96 00 	call	0x12c	; 0x12c <BTN_Pressed>
	if (ign1_pressed && !ign2_pressed && !horn_pressed) {
     7de:	cc 23       	and	r28, r28
     7e0:	41 f0       	breq	.+16     	; 0x7f2 <SBLPerceive_Buttons+0x2e>
     7e2:	d1 11       	cpse	r29, r1
     7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <SBLPerceive_Buttons+0x2e>
     7e6:	81 11       	cpse	r24, r1
     7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <SBLPerceive_Buttons+0x2e>
		IGN1_pressed = true;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <IGN1_pressed>
     7f0:	36 c0       	rjmp	.+108    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	} else if (!ign1_pressed && ign2_pressed && !horn_pressed) {
     7f2:	c1 11       	cpse	r28, r1
     7f4:	08 c0       	rjmp	.+16     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7f6:	dd 23       	and	r29, r29
     7f8:	31 f0       	breq	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7fa:	81 11       	cpse	r24, r1
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		IGN2_pressed = true;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	80 93 20 38 	sts	0x3820, r24	; 0x803820 <IGN2_pressed>
     804:	2c c0       	rjmp	.+88     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	} else if (!ign1_pressed && !ign2_pressed && horn_pressed) {
     806:	c1 11       	cpse	r28, r1
     808:	08 c0       	rjmp	.+16     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     80a:	d1 11       	cpse	r29, r1
     80c:	06 c0       	rjmp	.+12     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     80e:	88 23       	and	r24, r24
     810:	21 f0       	breq	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		Horn_pressed = true;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <Horn_pressed>
     818:	22 c0       	rjmp	.+68     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	} else if (ign1_pressed && ign2_pressed && horn_pressed) {
     81a:	cc 23       	and	r28, r28
     81c:	d1 f0       	breq	.+52     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     81e:	dd 23       	and	r29, r29
     820:	c1 f0       	breq	.+48     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     822:	88 23       	and	r24, r24
     824:	b1 f0       	breq	.+44     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
		Get_input = true;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 19 38 	sts	0x3819, r24	; 0x803819 <Get_input>
		IGN1_pressed = false;
     82c:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <IGN1_pressed>
		IGN2_pressed = false;
     830:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <IGN2_pressed>
		Horn_pressed = false;
     834:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <Horn_pressed>
		LED_Off(RED_LED);
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 b3 00 	call	0x166	; 0x166 <LED_Off>
		LED_Off(GREEN_LED);
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 b3 00 	call	0x166	; 0x166 <LED_Off>
		USART1_Transmit_String("Give the letter of the light you want to turn on:\r\n");
     844:	86 ee       	ldi	r24, 0xE6	; 230
     846:	9b e5       	ldi	r25, 0x5B	; 91
     848:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		SBLPerceive_Input();
     84c:	0e 94 ab 03 	call	0x756	; 0x756 <SBLPerceive_Input>
     850:	06 c0       	rjmp	.+12     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	} else {
		IGN1_pressed = false;
     852:	10 92 21 38 	sts	0x3821, r1	; 0x803821 <IGN1_pressed>
		IGN2_pressed = false;
     856:	10 92 20 38 	sts	0x3820, r1	; 0x803820 <IGN2_pressed>
		Horn_pressed = false;
     85a:	10 92 1f 38 	sts	0x381F, r1	; 0x80381f <Horn_pressed>
	}
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <SBLPerception>:
		Input_Y = false;
	}
}

void SBLPerception(void) {
	SBLPerceive_Buttons();
     864:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <SBLPerceive_Buttons>
     868:	08 95       	ret

0000086a <SBLIGN1>:
}

void SBLIGN1(void) {
	static uint8_t IGN1_state = 0;
	switch (IGN1_state)
     86a:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <IGN1_state.3845>
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	81 f0       	breq	.+32     	; 0x892 <SBLIGN1+0x28>
     872:	18 f0       	brcs	.+6      	; 0x87a <SBLIGN1+0x10>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	c1 f0       	breq	.+48     	; 0x8a8 <SBLIGN1+0x3e>
     878:	08 95       	ret
	{
	case 0:
		Send_IGN1_message = false;
     87a:	10 92 1c 38 	sts	0x381C, r1	; 0x80381c <Send_IGN1_message>
		Turn_red_on = false;
     87e:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <Turn_red_on>
		if (IGN1_pressed) {
     882:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <IGN1_pressed>
     886:	88 23       	and	r24, r24
     888:	a1 f0       	breq	.+40     	; 0x8b2 <SBLIGN1+0x48>
			IGN1_state = 1;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <IGN1_state.3845>
     890:	08 95       	ret
		}
		break;
	case 1:
		Turn_red_on = true;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <Turn_red_on>
		if (!IGN1_pressed) {
     898:	80 91 21 38 	lds	r24, 0x3821	; 0x803821 <IGN1_pressed>
     89c:	81 11       	cpse	r24, r1
     89e:	09 c0       	rjmp	.+18     	; 0x8b2 <SBLIGN1+0x48>
			IGN1_state = 2;
     8a0:	82 e0       	ldi	r24, 0x02	; 2
     8a2:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <IGN1_state.3845>
     8a6:	08 95       	ret
		}
		break;
	case 2:
		Send_IGN1_message = true;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <Send_IGN1_message>
		IGN1_state = 0;
     8ae:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <IGN1_state.3845>
     8b2:	08 95       	ret

000008b4 <SBLIGN2>:
	}
}

void SBLIGN2(void) {
	static uint8_t IGN2_state = 0;
	switch (IGN2_state)
     8b4:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <IGN2_state.3853>
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	81 f0       	breq	.+32     	; 0x8dc <SBLIGN2+0x28>
     8bc:	18 f0       	brcs	.+6      	; 0x8c4 <SBLIGN2+0x10>
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	c1 f0       	breq	.+48     	; 0x8f2 <SBLIGN2+0x3e>
     8c2:	08 95       	ret
	{
	case 0:
		Send_IGN2_message = false;
     8c4:	10 92 1b 38 	sts	0x381B, r1	; 0x80381b <Send_IGN2_message>
		Turn_green_on = false;
     8c8:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <Turn_green_on>
		if (IGN2_pressed) {
     8cc:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <IGN2_pressed>
     8d0:	88 23       	and	r24, r24
     8d2:	a1 f0       	breq	.+40     	; 0x8fc <SBLIGN2+0x48>
			IGN2_state = 1;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <IGN2_state.3853>
     8da:	08 95       	ret
		}
		break;
	case 1:
		Turn_green_on = true;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <Turn_green_on>
		if (!IGN2_pressed) {
     8e2:	80 91 20 38 	lds	r24, 0x3820	; 0x803820 <IGN2_pressed>
     8e6:	81 11       	cpse	r24, r1
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <SBLIGN2+0x48>
			IGN2_state = 2;
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <IGN2_state.3853>
     8f0:	08 95       	ret
		}
		break;
	case 2:
		Send_IGN2_message = true;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <Send_IGN2_message>
		IGN2_state = 0;
     8f8:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <IGN2_state.3853>
     8fc:	08 95       	ret

000008fe <SBLHorn>:
	}
}

void SBLHorn(void) {
	static uint8_t Horn_state = 0;
	switch (Horn_state)
     8fe:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__data_end>
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	71 f0       	breq	.+28     	; 0x922 <SBLHorn+0x24>
     906:	18 f0       	brcs	.+6      	; 0x90e <SBLHorn+0x10>
     908:	82 30       	cpi	r24, 0x02	; 2
     90a:	c1 f0       	breq	.+48     	; 0x93c <SBLHorn+0x3e>
     90c:	08 95       	ret
	{
	case 0:
		Send_Horn_message = false;
     90e:	10 92 1a 38 	sts	0x381A, r1	; 0x80381a <Send_Horn_message>
		if (Horn_pressed) {
     912:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <Horn_pressed>
     916:	88 23       	and	r24, r24
     918:	b1 f0       	breq	.+44     	; 0x946 <SBLHorn+0x48>
			Horn_state = 1;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__data_end>
     920:	08 95       	ret
		}
		break;
	case 1:
		Turn_red_on = true;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <Turn_red_on>
		Turn_green_on = true;
     928:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <Turn_green_on>
		if (!Horn_pressed) {
     92c:	80 91 1f 38 	lds	r24, 0x381F	; 0x80381f <Horn_pressed>
     930:	81 11       	cpse	r24, r1
     932:	09 c0       	rjmp	.+18     	; 0x946 <SBLHorn+0x48>
			Horn_state = 2;
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__data_end>
     93a:	08 95       	ret
		}
		break;
	case 2:
		Send_Horn_message = true;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <Send_Horn_message>
		Horn_state = 0;
     942:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <__data_end>
     946:	08 95       	ret

00000948 <SBLR>:
		break;
	}
}

void SBLR(void) {
	if (Input_R) {
     948:	80 91 18 38 	lds	r24, 0x3818	; 0x803818 <Input_R>
     94c:	88 23       	and	r24, r24
     94e:	21 f0       	breq	.+8      	; 0x958 <SBLR+0x10>
		Toggle_red = true;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	80 93 15 38 	sts	0x3815, r24	; 0x803815 <Toggle_red>
     956:	08 95       	ret
	} else {
		Toggle_red = false;
     958:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <Toggle_red>
     95c:	08 95       	ret

0000095e <SBLG>:
	}
}

void SBLG(void) {
	if (Input_G) {
     95e:	80 91 17 38 	lds	r24, 0x3817	; 0x803817 <Input_G>
     962:	88 23       	and	r24, r24
     964:	21 f0       	breq	.+8      	; 0x96e <SBLG+0x10>
		Toggle_green = true;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <Toggle_green>
     96c:	08 95       	ret
	} else {
		Toggle_green = false;
     96e:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <Toggle_green>
     972:	08 95       	ret

00000974 <SBLY>:
	}
}

void SBLY(void) {
	if (Input_Y) {
     974:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <Input_Y>
     978:	88 23       	and	r24, r24
     97a:	21 f0       	breq	.+8      	; 0x984 <SBLY+0x10>
		Toggle_yellow = true;
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <Toggle_yellow>
     982:	08 95       	ret
	} else {
		Toggle_yellow = false;
     984:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <Toggle_yellow>
     988:	08 95       	ret

0000098a <SBLPlanning>:
	}
}

void SBLPlanning(void) {
	if (Get_input) {
     98a:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <Get_input>
     98e:	88 23       	and	r24, r24
     990:	39 f0       	breq	.+14     	; 0x9a0 <SBLPlanning+0x16>
		SBLR();
     992:	0e 94 a4 04 	call	0x948	; 0x948 <SBLR>
		SBLG();
     996:	0e 94 af 04 	call	0x95e	; 0x95e <SBLG>
		SBLY();
     99a:	0e 94 ba 04 	call	0x974	; 0x974 <SBLY>
     99e:	08 95       	ret
	} else {
		SBLIGN1();
     9a0:	0e 94 35 04 	call	0x86a	; 0x86a <SBLIGN1>
		SBLIGN2();
     9a4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <SBLIGN2>
		SBLHorn();
     9a8:	0e 94 7f 04 	call	0x8fe	; 0x8fe <SBLHorn>
     9ac:	08 95       	ret

000009ae <SBLAction>:
	}
}

void SBLAction(void) {
	if (Get_input) {
     9ae:	80 91 19 38 	lds	r24, 0x3819	; 0x803819 <Get_input>
     9b2:	88 23       	and	r24, r24
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <SBLAction+0xa>
     9b6:	a2 c0       	rjmp	.+324    	; 0xafc <SBLAction+0x14e>
		if (Toggle_red) {
     9b8:	80 91 15 38 	lds	r24, 0x3815	; 0x803815 <Toggle_red>
     9bc:	88 23       	and	r24, r24
     9be:	79 f1       	breq	.+94     	; 0xa1e <SBLAction+0x70>
			Set_Brightness_Red(255);
     9c0:	8f ef       	ldi	r24, 0xFF	; 255
     9c2:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			Timer_Start();
     9c6:	0e 94 bf 08 	call	0x117e	; 0x117e <Timer_Start>
			USART1_Transmit_String("Press any key to turn the red LED off\n\r");
     9ca:	8a e1       	ldi	r24, 0x1A	; 26
     9cc:	9c e5       	ldi	r25, 0x5C	; 92
     9ce:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
			USART1_Receive();
     9d2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <USART1_Receive>
			Timer_Stop();
     9d6:	0e 94 c5 08 	call	0x118a	; 0x118a <Timer_Stop>
			Set_Brightness_Red(0);
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			USART1_Transmit_String("Red LED was on for about ");
     9e0:	82 e4       	ldi	r24, 0x42	; 66
     9e2:	9c e5       	ldi	r25, 0x5C	; 92
     9e4:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
			USART1_Transmit_Number((uint16_t)(light_on_counter * 10));
     9e8:	20 91 11 38 	lds	r18, 0x3811	; 0x803811 <light_on_counter>
     9ec:	30 91 12 38 	lds	r19, 0x3812	; 0x803812 <light_on_counter+0x1>
     9f0:	c9 01       	movw	r24, r18
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	22 0f       	add	r18, r18
     a00:	33 1f       	adc	r19, r19
     a02:	82 0f       	add	r24, r18
     a04:	93 1f       	adc	r25, r19
     a06:	0e 94 1f 09 	call	0x123e	; 0x123e <USART1_Transmit_Number>
			USART1_Transmit_String(" milliseconds\n\r");
     a0a:	8c e5       	ldi	r24, 0x5C	; 92
     a0c:	9c e5       	ldi	r25, 0x5C	; 92
     a0e:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
			light_on_counter = 0;
     a12:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <light_on_counter>
     a16:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <light_on_counter+0x1>
			Toggle_red = false;
     a1a:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <Toggle_red>
		}
		if (Toggle_green) {
     a1e:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <Toggle_green>
     a22:	88 23       	and	r24, r24
     a24:	79 f1       	breq	.+94     	; 0xa84 <SBLAction+0xd6>
			Set_Brightness_Green(255);
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
			Timer_Start();
     a2c:	0e 94 bf 08 	call	0x117e	; 0x117e <Timer_Start>
			USART1_Transmit_String("Press any key to turn the green LED off\n\r");
     a30:	8c e6       	ldi	r24, 0x6C	; 108
     a32:	9c e5       	ldi	r25, 0x5C	; 92
     a34:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
			USART1_Receive();
     a38:	0e 94 71 09 	call	0x12e2	; 0x12e2 <USART1_Receive>
			Timer_Stop();
     a3c:	0e 94 c5 08 	call	0x118a	; 0x118a <Timer_Stop>
			Set_Brightness_Green(0);
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
			USART1_Transmit_String("Green LED was on for about ");
     a46:	86 e9       	ldi	r24, 0x96	; 150
     a48:	9c e5       	ldi	r25, 0x5C	; 92
     a4a:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
			USART1_Transmit_Number((uint16_t)(light_on_counter * 10));
     a4e:	20 91 11 38 	lds	r18, 0x3811	; 0x803811 <light_on_counter>
     a52:	30 91 12 38 	lds	r19, 0x3812	; 0x803812 <light_on_counter+0x1>
     a56:	c9 01       	movw	r24, r18
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	22 0f       	add	r18, r18
     a62:	33 1f       	adc	r19, r19
     a64:	22 0f       	add	r18, r18
     a66:	33 1f       	adc	r19, r19
     a68:	82 0f       	add	r24, r18
     a6a:	93 1f       	adc	r25, r19
     a6c:	0e 94 1f 09 	call	0x123e	; 0x123e <USART1_Transmit_Number>
			USART1_Transmit_String(" milliseconds\n\r");
     a70:	8c e5       	ldi	r24, 0x5C	; 92
     a72:	9c e5       	ldi	r25, 0x5C	; 92
     a74:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
			light_on_counter = 0;
     a78:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <light_on_counter>
     a7c:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <light_on_counter+0x1>
			Toggle_green = false;
     a80:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <Toggle_green>
		}
		if (Toggle_yellow) {
     a84:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <Toggle_yellow>
     a88:	88 23       	and	r24, r24
     a8a:	a9 f1       	breq	.+106    	; 0xaf6 <SBLAction+0x148>
			Set_Brightness_Green(255);
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
			Set_Brightness_Red(255);
     a92:	8f ef       	ldi	r24, 0xFF	; 255
     a94:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			Timer_Start();
     a98:	0e 94 bf 08 	call	0x117e	; 0x117e <Timer_Start>
			USART1_Transmit_String("Press any key to turn the yellow LED off\n\r");
     a9c:	82 eb       	ldi	r24, 0xB2	; 178
     a9e:	9c e5       	ldi	r25, 0x5C	; 92
     aa0:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
			USART1_Receive();
     aa4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <USART1_Receive>
			Timer_Stop();
     aa8:	0e 94 c5 08 	call	0x118a	; 0x118a <Timer_Stop>
			Set_Brightness_Green(0);
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
			Set_Brightness_Red(0);
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			USART1_Transmit_String("Yellow LED was on for about ");
     ab8:	8d ed       	ldi	r24, 0xDD	; 221
     aba:	9c e5       	ldi	r25, 0x5C	; 92
     abc:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
			USART1_Transmit_Number((uint16_t)(light_on_counter * 10));
     ac0:	20 91 11 38 	lds	r18, 0x3811	; 0x803811 <light_on_counter>
     ac4:	30 91 12 38 	lds	r19, 0x3812	; 0x803812 <light_on_counter+0x1>
     ac8:	c9 01       	movw	r24, r18
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	22 0f       	add	r18, r18
     ad0:	33 1f       	adc	r19, r19
     ad2:	22 0f       	add	r18, r18
     ad4:	33 1f       	adc	r19, r19
     ad6:	22 0f       	add	r18, r18
     ad8:	33 1f       	adc	r19, r19
     ada:	82 0f       	add	r24, r18
     adc:	93 1f       	adc	r25, r19
     ade:	0e 94 1f 09 	call	0x123e	; 0x123e <USART1_Transmit_Number>
			USART1_Transmit_String(" milliseconds\n\r");
     ae2:	8c e5       	ldi	r24, 0x5C	; 92
     ae4:	9c e5       	ldi	r25, 0x5C	; 92
     ae6:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
			light_on_counter = 0;
     aea:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <light_on_counter>
     aee:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <light_on_counter+0x1>
			Toggle_yellow = false;
     af2:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <Toggle_yellow>
		}
		Get_input = false;
     af6:	10 92 19 38 	sts	0x3819, r1	; 0x803819 <Get_input>
     afa:	08 95       	ret
	} else {
		Turn_red_on ? Set_Brightness_Red(255) : Set_Brightness_Red(0);
     afc:	80 91 1e 38 	lds	r24, 0x381E	; 0x80381e <Turn_red_on>
     b00:	88 23       	and	r24, r24
     b02:	21 f0       	breq	.+8      	; 0xb0c <SBLAction+0x15e>
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <SBLAction+0x164>
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			
		Turn_green_on ? Set_Brightness_Green(255) : Set_Brightness_Green(0);
     b12:	80 91 1d 38 	lds	r24, 0x381D	; 0x80381d <Turn_green_on>
     b16:	88 23       	and	r24, r24
     b18:	21 f0       	breq	.+8      	; 0xb22 <SBLAction+0x174>
     b1a:	8f ef       	ldi	r24, 0xFF	; 255
     b1c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <SBLAction+0x17a>
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>

		Send_IGN1_message ? USART1_Transmit_String("IGN_1 button was pressed\r\n") : (void)0;
     b28:	80 91 1c 38 	lds	r24, 0x381C	; 0x80381c <Send_IGN1_message>
     b2c:	88 23       	and	r24, r24
     b2e:	21 f0       	breq	.+8      	; 0xb38 <SBLAction+0x18a>
     b30:	8a ef       	ldi	r24, 0xFA	; 250
     b32:	9c e5       	ldi	r25, 0x5C	; 92
     b34:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>

		Send_IGN2_message ? USART1_Transmit_String("IGN_2 button was pressed\r\n") : (void)0;
     b38:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <Send_IGN2_message>
     b3c:	88 23       	and	r24, r24
     b3e:	21 f0       	breq	.+8      	; 0xb48 <SBLAction+0x19a>
     b40:	85 e1       	ldi	r24, 0x15	; 21
     b42:	9d e5       	ldi	r25, 0x5D	; 93
     b44:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>

		Send_Horn_message ? USART1_Transmit_String("HORN button was pressed\r\n") : (void)0;
     b48:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <Send_Horn_message>
     b4c:	88 23       	and	r24, r24
     b4e:	21 f0       	breq	.+8      	; 0xb58 <SBLAction+0x1aa>
     b50:	80 e3       	ldi	r24, 0x30	; 48
     b52:	9d e5       	ldi	r25, 0x5D	; 93
     b54:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
     b58:	08 95       	ret

00000b5a <SerialButtonLEDMode>:
	}
}

void SerialButtonLEDMode(void) {
     b5a:	cf 93       	push	r28
	USART1_Transmit_String("You are in Serial button LED mode (press q to exit)\n\r");
     b5c:	8a e4       	ldi	r24, 0x4A	; 74
     b5e:	9d e5       	ldi	r25, 0x5D	; 93
     b60:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	USART1_Transmit_String("You are alerted when a button is pressed and if you press all three buttons at once, something special happens\n\r");
     b64:	80 e8       	ldi	r24, 0x80	; 128
     b66:	9d e5       	ldi	r25, 0x5D	; 93
     b68:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	serialButtonLEDMode = true;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <serialButtonLEDMode>
	uint8_t quit = 0;
     b72:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     b74:	0e c0       	rjmp	.+28     	; 0xb92 <SerialButtonLEDMode+0x38>
		wdt_reset();
     b76:	a8 95       	wdr
		SBLPerception();
     b78:	0e 94 32 04 	call	0x864	; 0x864 <SBLPerception>
		SBLPlanning();
     b7c:	0e 94 c5 04 	call	0x98a	; 0x98a <SBLPlanning>
		SBLAction();
     b80:	0e 94 d7 04 	call	0x9ae	; 0x9ae <SBLAction>
		if (USART1.STATUS & USART_RXCIF_bm) {
     b84:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     b88:	88 23       	and	r24, r24
     b8a:	1c f4       	brge	.+6      	; 0xb92 <SerialButtonLEDMode+0x38>
			quit = USART1_Receive_No_Wait();
     b8c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <USART1_Receive_No_Wait>
     b90:	c8 2f       	mov	r28, r24
void SerialButtonLEDMode(void) {
	USART1_Transmit_String("You are in Serial button LED mode (press q to exit)\n\r");
	USART1_Transmit_String("You are alerted when a button is pressed and if you press all three buttons at once, something special happens\n\r");
	serialButtonLEDMode = true;
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     b92:	8c 2f       	mov	r24, r28
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 a1 09 	call	0x1342	; 0x1342 <tolower>
     b9a:	81 37       	cpi	r24, 0x71	; 113
     b9c:	91 05       	cpc	r25, r1
     b9e:	59 f7       	brne	.-42     	; 0xb76 <SerialButtonLEDMode+0x1c>
		SBLAction();
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Set_Brightness_Red(0);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
	serialButtonLEDMode = false;
     bac:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <serialButtonLEDMode>
}
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <BlinkingLEDMode>:

void BlinkingLEDMode(void) {
     bb4:	cf 93       	push	r28
	USART1_Transmit_String("You are in Blinking LED mode (press q to exit)\n\r");
     bb6:	81 ef       	ldi	r24, 0xF1	; 241
     bb8:	9d e5       	ldi	r25, 0x5D	; 93
     bba:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	USART1_Transmit_String("The LED changes colors rapidly\n\r");
     bbe:	82 e2       	ldi	r24, 0x22	; 34
     bc0:	9e e5       	ldi	r25, 0x5E	; 94
     bc2:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	uint8_t quit = 0;
     bc6:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     bc8:	31 c0       	rjmp	.+98     	; 0xc2c <BlinkingLEDMode+0x78>
		Set_Brightness_Green(0);
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
		Set_Brightness_Red(255);
     bd0:	8f ef       	ldi	r24, 0xFF	; 255
     bd2:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
     bd6:	2a ea       	ldi	r18, 0xAA	; 170
     bd8:	80 ea       	ldi	r24, 0xA0	; 160
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	21 50       	subi	r18, 0x01	; 1
     bde:	80 40       	sbci	r24, 0x00	; 0
     be0:	90 40       	sbci	r25, 0x00	; 0
     be2:	e1 f7       	brne	.-8      	; 0xbdc <BlinkingLEDMode+0x28>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <BlinkingLEDMode+0x32>
		_delay_ms(200);
		wdt_reset();
     be6:	a8 95       	wdr
		Set_Brightness_Green(255);
     be8:	8f ef       	ldi	r24, 0xFF	; 255
     bea:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
		Set_Brightness_Red(0);
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
     bf4:	2a ea       	ldi	r18, 0xAA	; 170
     bf6:	80 ea       	ldi	r24, 0xA0	; 160
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	21 50       	subi	r18, 0x01	; 1
     bfc:	80 40       	sbci	r24, 0x00	; 0
     bfe:	90 40       	sbci	r25, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <BlinkingLEDMode+0x46>
     c02:	00 c0       	rjmp	.+0      	; 0xc04 <BlinkingLEDMode+0x50>
		_delay_ms(200);
		wdt_reset();
     c04:	a8 95       	wdr
		Set_Brightness_Red(255);
     c06:	8f ef       	ldi	r24, 0xFF	; 255
     c08:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
     c0c:	2a ea       	ldi	r18, 0xAA	; 170
     c0e:	80 ea       	ldi	r24, 0xA0	; 160
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	21 50       	subi	r18, 0x01	; 1
     c14:	80 40       	sbci	r24, 0x00	; 0
     c16:	90 40       	sbci	r25, 0x00	; 0
     c18:	e1 f7       	brne	.-8      	; 0xc12 <BlinkingLEDMode+0x5e>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <BlinkingLEDMode+0x68>
		_delay_ms(200);
		wdt_reset();
     c1c:	a8 95       	wdr
		if (USART1.STATUS & USART_RXCIF_bm) {
     c1e:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     c22:	88 23       	and	r24, r24
     c24:	1c f4       	brge	.+6      	; 0xc2c <BlinkingLEDMode+0x78>
			quit = USART1_Receive_No_Wait();
     c26:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <USART1_Receive_No_Wait>
     c2a:	c8 2f       	mov	r28, r24

void BlinkingLEDMode(void) {
	USART1_Transmit_String("You are in Blinking LED mode (press q to exit)\n\r");
	USART1_Transmit_String("The LED changes colors rapidly\n\r");
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     c2c:	8c 2f       	mov	r24, r28
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 a1 09 	call	0x1342	; 0x1342 <tolower>
     c34:	81 37       	cpi	r24, 0x71	; 113
     c36:	91 05       	cpc	r25, r1
     c38:	41 f6       	brne	.-112    	; 0xbca <BlinkingLEDMode+0x16>
		wdt_reset();
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Set_Brightness_Red(0);
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
}
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <LEDSPIMode>:

void LEDSPIMode(void) {
     c4a:	cf 93       	push	r28
	USART1_Transmit_String("You are in LED SPI mode (press q to exit)\n\r");
     c4c:	83 e4       	ldi	r24, 0x43	; 67
     c4e:	9e e5       	ldi	r25, 0x5E	; 94
     c50:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	USART1_Transmit_String("The LED changes color based on the tilt (green in x direction, red in y direction, and yellow in z direction)\n\r");
     c54:	8f e6       	ldi	r24, 0x6F	; 111
     c56:	9e e5       	ldi	r25, 0x5E	; 94
     c58:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	uint8_t quit = 0;
     c5c:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     c5e:	48 c0       	rjmp	.+144    	; 0xcf0 <LEDSPIMode+0xa6>
		wdt_reset();
     c60:	a8 95       	wdr
		FXLS8967_ReadAccel(&x, &y, &z, &a);
     c62:	28 e0       	ldi	r18, 0x08	; 8
     c64:	38 e3       	ldi	r19, 0x38	; 56
     c66:	4a e0       	ldi	r20, 0x0A	; 10
     c68:	58 e3       	ldi	r21, 0x38	; 56
     c6a:	6c e0       	ldi	r22, 0x0C	; 12
     c6c:	78 e3       	ldi	r23, 0x38	; 56
     c6e:	8e e0       	ldi	r24, 0x0E	; 14
     c70:	98 e3       	ldi	r25, 0x38	; 56
     c72:	0e 94 15 08 	call	0x102a	; 0x102a <FXLS8967_ReadAccel>
		if (x > 800 || x < -800) {
     c76:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <x>
     c7a:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <x+0x1>
     c7e:	80 5e       	subi	r24, 0xE0	; 224
     c80:	9c 4f       	sbci	r25, 0xFC	; 252
     c82:	81 34       	cpi	r24, 0x41	; 65
     c84:	96 40       	sbci	r25, 0x06	; 6
     c86:	38 f0       	brcs	.+14     	; 0xc96 <LEDSPIMode+0x4c>
			Set_Brightness_Red(255);
     c88:	8f ef       	ldi	r24, 0xFF	; 255
     c8a:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			Set_Brightness_Green(0);
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
     c94:	26 c0       	rjmp	.+76     	; 0xce2 <LEDSPIMode+0x98>
		} else if (y > 800 || y < -800) {
     c96:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <y>
     c9a:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <y+0x1>
     c9e:	80 5e       	subi	r24, 0xE0	; 224
     ca0:	9c 4f       	sbci	r25, 0xFC	; 252
     ca2:	81 34       	cpi	r24, 0x41	; 65
     ca4:	96 40       	sbci	r25, 0x06	; 6
     ca6:	38 f0       	brcs	.+14     	; 0xcb6 <LEDSPIMode+0x6c>
			Set_Brightness_Red(0);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			Set_Brightness_Green(255);
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
     cb4:	16 c0       	rjmp	.+44     	; 0xce2 <LEDSPIMode+0x98>
		} else if (z > 800 || z < -800) {
     cb6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <z>
     cba:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <z+0x1>
     cbe:	80 5e       	subi	r24, 0xE0	; 224
     cc0:	9c 4f       	sbci	r25, 0xFC	; 252
     cc2:	81 34       	cpi	r24, 0x41	; 65
     cc4:	96 40       	sbci	r25, 0x06	; 6
     cc6:	38 f0       	brcs	.+14     	; 0xcd6 <LEDSPIMode+0x8c>
			Set_Brightness_Red(255);
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			Set_Brightness_Green(255);
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
     cd4:	06 c0       	rjmp	.+12     	; 0xce2 <LEDSPIMode+0x98>
		} else {
			Set_Brightness_Red(0);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
			Set_Brightness_Green(0);
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
		}
		if (USART1.STATUS & USART_RXCIF_bm) {
     ce2:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     ce6:	88 23       	and	r24, r24
     ce8:	1c f4       	brge	.+6      	; 0xcf0 <LEDSPIMode+0xa6>
			quit = USART1_Receive_No_Wait();
     cea:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <USART1_Receive_No_Wait>
     cee:	c8 2f       	mov	r28, r24

void LEDSPIMode(void) {
	USART1_Transmit_String("You are in LED SPI mode (press q to exit)\n\r");
	USART1_Transmit_String("The LED changes color based on the tilt (green in x direction, red in y direction, and yellow in z direction)\n\r");
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     cf0:	8c 2f       	mov	r24, r28
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 a1 09 	call	0x1342	; 0x1342 <tolower>
     cf8:	81 37       	cpi	r24, 0x71	; 113
     cfa:	91 05       	cpc	r25, r1
     cfc:	09 f0       	breq	.+2      	; 0xd00 <LEDSPIMode+0xb6>
     cfe:	b0 cf       	rjmp	.-160    	; 0xc60 <LEDSPIMode+0x16>
		}
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Set_Brightness_Red(0);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
}
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <PWMSPIMode>:

void PWMSPIMode(void) {
     d10:	cf 93       	push	r28
	USART1_Transmit_String("You are in PWM SPI mode (press q to exit)\n\r");
     d12:	8f ed       	ldi	r24, 0xDF	; 223
     d14:	9e e5       	ldi	r25, 0x5E	; 94
     d16:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	USART1_Transmit_String("The LED changes brightness based on the tilt (green in x direction and red in y direction)\n\r");
     d1a:	8b e0       	ldi	r24, 0x0B	; 11
     d1c:	9f e5       	ldi	r25, 0x5F	; 95
     d1e:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	uint8_t quit = 0;
     d22:	c0 e0       	ldi	r28, 0x00	; 0
	while (tolower(quit) != 'q') {
     d24:	44 c0       	rjmp	.+136    	; 0xdae <PWMSPIMode+0x9e>
		wdt_reset();
     d26:	a8 95       	wdr
		FXLS8967_ReadAccel(&x, &y, &z, &a);
     d28:	28 e0       	ldi	r18, 0x08	; 8
     d2a:	38 e3       	ldi	r19, 0x38	; 56
     d2c:	4a e0       	ldi	r20, 0x0A	; 10
     d2e:	58 e3       	ldi	r21, 0x38	; 56
     d30:	6c e0       	ldi	r22, 0x0C	; 12
     d32:	78 e3       	ldi	r23, 0x38	; 56
     d34:	8e e0       	ldi	r24, 0x0E	; 14
     d36:	98 e3       	ldi	r25, 0x38	; 56
     d38:	0e 94 15 08 	call	0x102a	; 0x102a <FXLS8967_ReadAccel>
		y = abs(y);
     d3c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <y>
     d40:	90 91 0d 38 	lds	r25, 0x380D	; 0x80380d <y+0x1>
     d44:	99 23       	and	r25, r25
     d46:	1c f4       	brge	.+6      	; 0xd4e <PWMSPIMode+0x3e>
     d48:	91 95       	neg	r25
     d4a:	81 95       	neg	r24
     d4c:	91 09       	sbc	r25, r1
     d4e:	9c 01       	movw	r18, r24
     d50:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <y>
     d54:	90 93 0d 38 	sts	0x380D, r25	; 0x80380d <y+0x1>
		x = abs(x);
     d58:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <x>
     d5c:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <x+0x1>
     d60:	99 23       	and	r25, r25
     d62:	1c f4       	brge	.+6      	; 0xd6a <PWMSPIMode+0x5a>
     d64:	91 95       	neg	r25
     d66:	81 95       	neg	r24
     d68:	91 09       	sbc	r25, r1
     d6a:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <x>
     d6e:	90 93 0f 38 	sts	0x380F, r25	; 0x80380f <x+0x1>
		Set_Brightness_Red(y / 4);
     d72:	c9 01       	movw	r24, r18
     d74:	99 23       	and	r25, r25
     d76:	0c f4       	brge	.+2      	; 0xd7a <PWMSPIMode+0x6a>
     d78:	03 96       	adiw	r24, 0x03	; 3
     d7a:	95 95       	asr	r25
     d7c:	87 95       	ror	r24
     d7e:	95 95       	asr	r25
     d80:	87 95       	ror	r24
     d82:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
		Set_Brightness_Green(x / 4);
     d86:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <x>
     d8a:	90 91 0f 38 	lds	r25, 0x380F	; 0x80380f <x+0x1>
     d8e:	99 23       	and	r25, r25
     d90:	0c f4       	brge	.+2      	; 0xd94 <PWMSPIMode+0x84>
     d92:	03 96       	adiw	r24, 0x03	; 3
     d94:	95 95       	asr	r25
     d96:	87 95       	ror	r24
     d98:	95 95       	asr	r25
     d9a:	87 95       	ror	r24
     d9c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
		if (USART1.STATUS & USART_RXCIF_bm) {
     da0:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
     da4:	88 23       	and	r24, r24
     da6:	1c f4       	brge	.+6      	; 0xdae <PWMSPIMode+0x9e>
			quit = USART1_Receive_No_Wait();
     da8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <USART1_Receive_No_Wait>
     dac:	c8 2f       	mov	r28, r24

void PWMSPIMode(void) {
	USART1_Transmit_String("You are in PWM SPI mode (press q to exit)\n\r");
	USART1_Transmit_String("The LED changes brightness based on the tilt (green in x direction and red in y direction)\n\r");
	uint8_t quit = 0;
	while (tolower(quit) != 'q') {
     dae:	8c 2f       	mov	r24, r28
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 a1 09 	call	0x1342	; 0x1342 <tolower>
     db6:	81 37       	cpi	r24, 0x71	; 113
     db8:	91 05       	cpc	r25, r1
     dba:	09 f0       	breq	.+2      	; 0xdbe <PWMSPIMode+0xae>
     dbc:	b4 cf       	rjmp	.-152    	; 0xd26 <PWMSPIMode+0x16>
		Set_Brightness_Green(x / 4);
		if (USART1.STATUS & USART_RXCIF_bm) {
			quit = USART1_Receive_No_Wait();
		}
	}
	Set_Brightness_Red(0);
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	0e 94 cb 08 	call	0x1196	; 0x1196 <Set_Brightness_Red>
	Set_Brightness_Green(0);
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <Set_Brightness_Green>
}
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <ClearScreen>:

void ClearScreen(void) {
	USART1_Transmit_String("\033[2J"); //Clear screen
     dce:	88 e6       	ldi	r24, 0x68	; 104
     dd0:	9f e5       	ldi	r25, 0x5F	; 95
     dd2:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
	USART1_Transmit_String("\033[H"); //Move everything to the top
     dd6:	8d e6       	ldi	r24, 0x6D	; 109
     dd8:	9f e5       	ldi	r25, 0x5F	; 95
     dda:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
     dde:	08 95       	ret

00000de0 <Reset>:
}

void Reset(void) {
	USART1_Transmit_String("Resetting...\n\r");
     de0:	81 e7       	ldi	r24, 0x71	; 113
     de2:	9f e5       	ldi	r25, 0x5F	; 95
     de4:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
     de8:	ff cf       	rjmp	.-2      	; 0xde8 <Reset+0x8>

00000dea <main>:
}

int main(void)
{
	uint8_t c = 0;
	USART1_Init();
     dea:	0e 94 e5 08 	call	0x11ca	; 0x11ca <USART1_Init>
	SPI_Init();
     dee:	0e 94 d6 07 	call	0xfac	; 0xfac <SPI_Init>
	ADC_Init();
     df2:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_Init>
	LED_Init();
     df6:	0e 94 aa 00 	call	0x154	; 0x154 <LED_Init>
	Timer_Init(DEFAULT_TOP_VALUE);
     dfa:	88 e2       	ldi	r24, 0x28	; 40
     dfc:	98 e6       	ldi	r25, 0x68	; 104
     dfe:	0e 94 b4 08 	call	0x1168	; 0x1168 <Timer_Init>
	TCA0_Init();
     e02:	0e 94 d7 08 	call	0x11ae	; 0x11ae <TCA0_Init>
	FXLS8967_Init();
     e06:	0e 94 08 08 	call	0x1010	; 0x1010 <FXLS8967_Init>
	sei();
     e0a:	78 94       	sei
	ClearScreen();
     e0c:	0e 94 e7 06 	call	0xdce	; 0xdce <ClearScreen>
	wdt_reset();
     e10:	a8 95       	wdr
     e12:	2a ea       	ldi	r18, 0xAA	; 170
     e14:	81 e1       	ldi	r24, 0x11	; 17
     e16:	94 e0       	ldi	r25, 0x04	; 4
     e18:	21 50       	subi	r18, 0x01	; 1
     e1a:	80 40       	sbci	r24, 0x00	; 0
     e1c:	90 40       	sbci	r25, 0x00	; 0
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <main+0x2e>
     e20:	00 00       	nop
	_delay_ms(500);
    while (1) 
    {
		wdt_reset();
     e22:	a8 95       	wdr
		USART1_Transmit_String("Please type the letter corresponding to what mode you would like to enter\n\r");
     e24:	80 e8       	ldi	r24, 0x80	; 128
     e26:	9f e5       	ldi	r25, 0x5F	; 95
     e28:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\ta: Read accelerometer\n\r");
     e2c:	8c ec       	ldi	r24, 0xCC	; 204
     e2e:	9f e5       	ldi	r25, 0x5F	; 95
     e30:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\tp: PWM\n\r");
     e34:	85 ee       	ldi	r24, 0xE5	; 229
     e36:	9f e5       	ldi	r25, 0x5F	; 95
     e38:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\tt: Timer\n\r");
     e3c:	8f ee       	ldi	r24, 0xEF	; 239
     e3e:	9f e5       	ldi	r25, 0x5F	; 95
     e40:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\tu: Timer button\n\r");
     e44:	8b ef       	ldi	r24, 0xFB	; 251
     e46:	9f e5       	ldi	r25, 0x5F	; 95
     e48:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\ts: Serial communication\n\r");
     e4c:	8e e0       	ldi	r24, 0x0E	; 14
     e4e:	90 e6       	ldi	r25, 0x60	; 96
     e50:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\tl: Serial button LED\n\r");
     e54:	89 e2       	ldi	r24, 0x29	; 41
     e56:	90 e6       	ldi	r25, 0x60	; 96
     e58:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\tb: Blinking LED\n\r");
     e5c:	81 e4       	ldi	r24, 0x41	; 65
     e5e:	90 e6       	ldi	r25, 0x60	; 96
     e60:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\ti: LED SPI\n\r");
     e64:	84 e5       	ldi	r24, 0x54	; 84
     e66:	90 e6       	ldi	r25, 0x60	; 96
     e68:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\tv: PWM SPI\n\r");
     e6c:	82 e6       	ldi	r24, 0x62	; 98
     e6e:	90 e6       	ldi	r25, 0x60	; 96
     e70:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\tc: Clear screen\n\r");
     e74:	80 e7       	ldi	r24, 0x70	; 112
     e76:	90 e6       	ldi	r25, 0x60	; 96
     e78:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		USART1_Transmit_String("\tr: Reset\n\r");
     e7c:	83 e8       	ldi	r24, 0x83	; 131
     e7e:	90 e6       	ldi	r25, 0x60	; 96
     e80:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
		c = USART1_Receive();
     e84:	0e 94 71 09 	call	0x12e2	; 0x12e2 <USART1_Receive>
		c = tolower(c);
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 a1 09 	call	0x1342	; 0x1342 <tolower>
		switch (c)
     e8e:	fc 01       	movw	r30, r24
     e90:	ff 27       	eor	r31, r31
     e92:	e1 56       	subi	r30, 0x61	; 97
     e94:	f1 09       	sbc	r31, r1
     e96:	e6 31       	cpi	r30, 0x16	; 22
     e98:	f1 05       	cpc	r31, r1
     e9a:	20 f5       	brcc	.+72     	; 0xee4 <main+0xfa>
     e9c:	e8 5b       	subi	r30, 0xB8	; 184
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__tablejump2__>
		{
		case 'a':
			ReadAccelerometerMode();
     ea4:	0e 94 89 01 	call	0x312	; 0x312 <ReadAccelerometerMode>
			break;
     ea8:	21 c0       	rjmp	.+66     	; 0xeec <main+0x102>
		case 'p':
			PWMMode();
     eaa:	0e 94 cf 02 	call	0x59e	; 0x59e <PWMMode>
			break;
     eae:	1e c0       	rjmp	.+60     	; 0xeec <main+0x102>
		case 't':
			TimerMode();
     eb0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <TimerMode>
			break;
     eb4:	1b c0       	rjmp	.+54     	; 0xeec <main+0x102>
		case 'u':
			TimerButtonMode();
     eb6:	0e 94 20 03 	call	0x640	; 0x640 <TimerButtonMode>
			break;
     eba:	18 c0       	rjmp	.+48     	; 0xeec <main+0x102>
		case 's':
			SerialCommunicationMode();
     ebc:	0e 94 8e 03 	call	0x71c	; 0x71c <SerialCommunicationMode>
			break;
     ec0:	15 c0       	rjmp	.+42     	; 0xeec <main+0x102>
		case 'l':
			SerialButtonLEDMode();
     ec2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <SerialButtonLEDMode>
			break;
     ec6:	12 c0       	rjmp	.+36     	; 0xeec <main+0x102>
		case 'b':
			BlinkingLEDMode();
     ec8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <BlinkingLEDMode>
			break;
     ecc:	0f c0       	rjmp	.+30     	; 0xeec <main+0x102>
		case 'i':
			LEDSPIMode();
     ece:	0e 94 25 06 	call	0xc4a	; 0xc4a <LEDSPIMode>
			break;
     ed2:	0c c0       	rjmp	.+24     	; 0xeec <main+0x102>
		case 'v':
			PWMSPIMode();
     ed4:	0e 94 88 06 	call	0xd10	; 0xd10 <PWMSPIMode>
			break;
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <main+0x102>
		case 'c':
			ClearScreen();
     eda:	0e 94 e7 06 	call	0xdce	; 0xdce <ClearScreen>
			break;
     ede:	06 c0       	rjmp	.+12     	; 0xeec <main+0x102>
		case 'r':
			Reset();
     ee0:	0e 94 f0 06 	call	0xde0	; 0xde0 <Reset>
			break;
		default:
			USART1_Transmit_String("Invalid input. Please try again.\n\r");
     ee4:	8f e8       	ldi	r24, 0x8F	; 143
     ee6:	90 e6       	ldi	r25, 0x60	; 96
     ee8:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
			break;
		}
		USART1_Transmit_String("\n\r");
     eec:	85 e6       	ldi	r24, 0x65	; 101
     eee:	9f e5       	ldi	r25, 0x5F	; 95
     ef0:	0e 94 4e 09 	call	0x129c	; 0x129c <USART1_Transmit_String>
    }
     ef4:	96 cf       	rjmp	.-212    	; 0xe22 <main+0x38>

00000ef6 <lsqrt>:
	SPI_Transfer(reg | 0x80); // Read command
	SPI_Transfer(0x00);
	data = SPI_Transfer(0x00);
	FXLS8967_Deselect();
	return data;
}
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	8b 01       	movw	r16, r22
     f04:	9c 01       	movw	r18, r24
     f06:	99 23       	and	r25, r25
     f08:	0c f4       	brge	.+2      	; 0xf0c <lsqrt+0x16>
     f0a:	43 c0       	rjmp	.+134    	; 0xf92 <lsqrt+0x9c>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	a0 e0       	ldi	r26, 0x00	; 0
     f12:	b0 e4       	ldi	r27, 0x40	; 64
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <lsqrt+0x30>
     f16:	b5 95       	asr	r27
     f18:	a7 95       	ror	r26
     f1a:	97 95       	ror	r25
     f1c:	87 95       	ror	r24
     f1e:	b5 95       	asr	r27
     f20:	a7 95       	ror	r26
     f22:	97 95       	ror	r25
     f24:	87 95       	ror	r24
     f26:	08 17       	cp	r16, r24
     f28:	19 07       	cpc	r17, r25
     f2a:	2a 07       	cpc	r18, r26
     f2c:	3b 07       	cpc	r19, r27
     f2e:	9c f3       	brlt	.-26     	; 0xf16 <lsqrt+0x20>
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	ba 01       	movw	r22, r20
     f36:	24 c0       	rjmp	.+72     	; 0xf80 <lsqrt+0x8a>
     f38:	6a 01       	movw	r12, r20
     f3a:	7b 01       	movw	r14, r22
     f3c:	c8 0e       	add	r12, r24
     f3e:	d9 1e       	adc	r13, r25
     f40:	ea 1e       	adc	r14, r26
     f42:	fb 1e       	adc	r15, r27
     f44:	0c 15       	cp	r16, r12
     f46:	1d 05       	cpc	r17, r13
     f48:	2e 05       	cpc	r18, r14
     f4a:	3f 05       	cpc	r19, r15
     f4c:	6c f0       	brlt	.+26     	; 0xf68 <lsqrt+0x72>
     f4e:	0c 19       	sub	r16, r12
     f50:	1d 09       	sbc	r17, r13
     f52:	2e 09       	sbc	r18, r14
     f54:	3f 09       	sbc	r19, r15
     f56:	75 95       	asr	r23
     f58:	67 95       	ror	r22
     f5a:	57 95       	ror	r21
     f5c:	47 95       	ror	r20
     f5e:	48 0f       	add	r20, r24
     f60:	59 1f       	adc	r21, r25
     f62:	6a 1f       	adc	r22, r26
     f64:	7b 1f       	adc	r23, r27
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <lsqrt+0x7a>
     f68:	75 95       	asr	r23
     f6a:	67 95       	ror	r22
     f6c:	57 95       	ror	r21
     f6e:	47 95       	ror	r20
     f70:	b5 95       	asr	r27
     f72:	a7 95       	ror	r26
     f74:	97 95       	ror	r25
     f76:	87 95       	ror	r24
     f78:	b5 95       	asr	r27
     f7a:	a7 95       	ror	r26
     f7c:	97 95       	ror	r25
     f7e:	87 95       	ror	r24
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	a1 05       	cpc	r26, r1
     f84:	b1 05       	cpc	r27, r1
     f86:	c1 f6       	brne	.-80     	; 0xf38 <lsqrt+0x42>
     f88:	34 2f       	mov	r19, r20
     f8a:	25 2f       	mov	r18, r21
     f8c:	86 2f       	mov	r24, r22
     f8e:	97 2f       	mov	r25, r23
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <lsqrt+0xa4>
     f92:	3f ef       	ldi	r19, 0xFF	; 255
     f94:	2f ef       	ldi	r18, 0xFF	; 255
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	9f ef       	ldi	r25, 0xFF	; 255
     f9a:	63 2f       	mov	r22, r19
     f9c:	72 2f       	mov	r23, r18
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	08 95       	ret

00000fac <SPI_Init>:
     fac:	e0 e0       	ldi	r30, 0x00	; 0
     fae:	f4 e0       	ldi	r31, 0x04	; 4
     fb0:	80 e5       	ldi	r24, 0x50	; 80
     fb2:	81 83       	std	Z+1, r24	; 0x01
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	82 83       	std	Z+2, r24	; 0x02
     fb8:	80 e8       	ldi	r24, 0x80	; 128
     fba:	81 83       	std	Z+1, r24	; 0x01
     fbc:	87 e2       	ldi	r24, 0x27	; 39
     fbe:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__RODATA_PM_OFFSET__+0x7fc8c0>
     fc2:	08 95       	ret

00000fc4 <SPI_Transfer>:
     fc4:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
     fc8:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__RODATA_PM_OFFSET__+0x7fc8c3>
     fcc:	88 23       	and	r24, r24
     fce:	e4 f7       	brge	.-8      	; 0xfc8 <SPI_Transfer+0x4>
     fd0:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
     fd4:	08 95       	ret

00000fd6 <FXLS8967_Select>:
     fd6:	80 e8       	ldi	r24, 0x80	; 128
     fd8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7fc406>
     fdc:	08 95       	ret

00000fde <FXLS8967_Deselect>:
     fde:	80 e8       	ldi	r24, 0x80	; 128
     fe0:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7fc405>
     fe4:	08 95       	ret

00000fe6 <FXLS8967_WriteByte>:
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	d8 2f       	mov	r29, r24
     fec:	c6 2f       	mov	r28, r22
     fee:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <FXLS8967_Select>
     ff2:	8d 2f       	mov	r24, r29
     ff4:	8f 77       	andi	r24, 0x7F	; 127
     ff6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
    1000:	8c 2f       	mov	r24, r28
    1002:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
    1006:	0e 94 ef 07 	call	0xfde	; 0xfde <FXLS8967_Deselect>
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <FXLS8967_Init>:

// Initialize the FXLS8967
void FXLS8967_Init(void) {
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG1, 0x00);
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	85 e1       	ldi	r24, 0x15	; 21
    1014:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <FXLS8967_WriteByte>
	
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG5, 0x10);
    1018:	60 e1       	ldi	r22, 0x10	; 16
    101a:	89 e1       	ldi	r24, 0x19	; 25
    101c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <FXLS8967_WriteByte>
	
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG1, 0x07); // Set to active mode
    1020:	67 e0       	ldi	r22, 0x07	; 7
    1022:	85 e1       	ldi	r24, 0x15	; 21
    1024:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <FXLS8967_WriteByte>
    1028:	08 95       	ret

0000102a <FXLS8967_ReadAccel>:
}

// Read accelerometer data
void FXLS8967_ReadAccel(int16_t *x, int16_t *y, int16_t *z, int16_t *a) {
    102a:	6f 92       	push	r6
    102c:	7f 92       	push	r7
    102e:	8f 92       	push	r8
    1030:	9f 92       	push	r9
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	8c 01       	movw	r16, r24
    1048:	eb 01       	movw	r28, r22
    104a:	6a 01       	movw	r12, r20
    104c:	79 01       	movw	r14, r18
	uint8_t x_msb, x_lsb, y_msb, y_lsb, z_msb, z_lsb;
	long la;
	
	FXLS8967_Select();
    104e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <FXLS8967_Select>
	SPI_Transfer(FXLS8967_REG_OUT_X_LSB | 0x80);
    1052:	84 e8       	ldi	r24, 0x84	; 132
    1054:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
	SPI_Transfer(0x00);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
	x_lsb = SPI_Transfer(0x00);
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
    1064:	68 2e       	mov	r6, r24
	x_msb = SPI_Transfer(0x00);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
    106c:	78 2e       	mov	r7, r24
	y_lsb = SPI_Transfer(0x00);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
    1074:	88 2e       	mov	r8, r24
	y_msb = SPI_Transfer(0x00);
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
    107c:	98 2e       	mov	r9, r24
	z_lsb = SPI_Transfer(0x00);
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
    1084:	a8 2e       	mov	r10, r24
	z_msb = SPI_Transfer(0x00);
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_Transfer>
    108c:	b8 2e       	mov	r11, r24
	FXLS8967_Deselect();
    108e:	0e 94 ef 07 	call	0xfde	; 0xfde <FXLS8967_Deselect>

	*x = (uint16_t)((((x_msb << 8) | x_lsb) << 4) / 2);
    1092:	87 2d       	mov	r24, r7
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	98 2f       	mov	r25, r24
    1098:	88 27       	eor	r24, r24
    109a:	86 29       	or	r24, r6
    109c:	9c 01       	movw	r18, r24
    109e:	22 95       	swap	r18
    10a0:	32 95       	swap	r19
    10a2:	30 7f       	andi	r19, 0xF0	; 240
    10a4:	32 27       	eor	r19, r18
    10a6:	20 7f       	andi	r18, 0xF0	; 240
    10a8:	32 27       	eor	r19, r18
    10aa:	93 ff       	sbrs	r25, 3
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <FXLS8967_ReadAccel+0x88>
    10ae:	2f 5f       	subi	r18, 0xFF	; 255
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	35 95       	asr	r19
    10b4:	27 95       	ror	r18
    10b6:	f8 01       	movw	r30, r16
    10b8:	20 83       	st	Z, r18
    10ba:	31 83       	std	Z+1, r19	; 0x01
	*y = (uint16_t)((((y_msb << 8) | y_lsb) << 4) / 2);
    10bc:	89 2d       	mov	r24, r9
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	98 2f       	mov	r25, r24
    10c2:	88 27       	eor	r24, r24
    10c4:	88 29       	or	r24, r8
    10c6:	9c 01       	movw	r18, r24
    10c8:	22 95       	swap	r18
    10ca:	32 95       	swap	r19
    10cc:	30 7f       	andi	r19, 0xF0	; 240
    10ce:	32 27       	eor	r19, r18
    10d0:	20 7f       	andi	r18, 0xF0	; 240
    10d2:	32 27       	eor	r19, r18
    10d4:	93 ff       	sbrs	r25, 3
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <FXLS8967_ReadAccel+0xb2>
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	35 95       	asr	r19
    10de:	27 95       	ror	r18
    10e0:	28 83       	st	Y, r18
    10e2:	39 83       	std	Y+1, r19	; 0x01
	*z = (uint16_t)((((z_msb << 8) | z_lsb) << 4) / 2);
    10e4:	8b 2d       	mov	r24, r11
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	98 2f       	mov	r25, r24
    10ea:	88 27       	eor	r24, r24
    10ec:	8a 29       	or	r24, r10
    10ee:	ac 01       	movw	r20, r24
    10f0:	42 95       	swap	r20
    10f2:	52 95       	swap	r21
    10f4:	50 7f       	andi	r21, 0xF0	; 240
    10f6:	54 27       	eor	r21, r20
    10f8:	40 7f       	andi	r20, 0xF0	; 240
    10fa:	54 27       	eor	r21, r20
    10fc:	93 ff       	sbrs	r25, 3
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <FXLS8967_ReadAccel+0xda>
    1100:	4f 5f       	subi	r20, 0xFF	; 255
    1102:	5f 4f       	sbci	r21, 0xFF	; 255
    1104:	55 95       	asr	r21
    1106:	47 95       	ror	r20
    1108:	f6 01       	movw	r30, r12
    110a:	40 83       	st	Z, r20
    110c:	51 83       	std	Z+1, r21	; 0x01
	
	la = (long)*x * (long)*x + (long)*y * (long)*y + (long)*z * (long)*z;
    110e:	f8 01       	movw	r30, r16
    1110:	a0 81       	ld	r26, Z
    1112:	b1 81       	ldd	r27, Z+1	; 0x01
    1114:	9d 01       	movw	r18, r26
    1116:	0e 94 83 09 	call	0x1306	; 0x1306 <__mulhisi3>
    111a:	4b 01       	movw	r8, r22
    111c:	5c 01       	movw	r10, r24
    111e:	a8 81       	ld	r26, Y
    1120:	b9 81       	ldd	r27, Y+1	; 0x01
    1122:	9d 01       	movw	r18, r26
    1124:	0e 94 83 09 	call	0x1306	; 0x1306 <__mulhisi3>
    1128:	86 0e       	add	r8, r22
    112a:	97 1e       	adc	r9, r23
    112c:	a8 1e       	adc	r10, r24
    112e:	b9 1e       	adc	r11, r25
    1130:	9a 01       	movw	r18, r20
    1132:	da 01       	movw	r26, r20
    1134:	0e 94 83 09 	call	0x1306	; 0x1306 <__mulhisi3>
    1138:	68 0d       	add	r22, r8
    113a:	79 1d       	adc	r23, r9
    113c:	8a 1d       	adc	r24, r10
    113e:	9b 1d       	adc	r25, r11
	la = lsqrt(la);
    1140:	0e 94 7b 07 	call	0xef6	; 0xef6 <lsqrt>
	*a = (uint16_t)la;
    1144:	f7 01       	movw	r30, r14
    1146:	60 83       	st	Z, r22
    1148:	71 83       	std	Z+1, r23	; 0x01
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	bf 90       	pop	r11
    115c:	af 90       	pop	r10
    115e:	9f 90       	pop	r9
    1160:	8f 90       	pop	r8
    1162:	7f 90       	pop	r7
    1164:	6f 90       	pop	r6
    1166:	08 95       	ret

00001168 <Timer_Init>:
}

void Set_Brightness(uint8_t brightness) {
    Set_Brightness_Red(brightness);
    Set_Brightness_Green(brightness);
}
    1168:	9c 01       	movw	r18, r24
    116a:	e0 e8       	ldi	r30, 0x80	; 128
    116c:	fa e0       	ldi	r31, 0x0A	; 10
    116e:	90 81       	ld	r25, Z
    1170:	9e 7f       	andi	r25, 0xFE	; 254
    1172:	90 83       	st	Z, r25
    1174:	24 87       	std	Z+12, r18	; 0x0c
    1176:	35 87       	std	Z+13, r19	; 0x0d
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	85 83       	std	Z+5, r24	; 0x05
    117c:	08 95       	ret

0000117e <Timer_Start>:
    117e:	e0 e8       	ldi	r30, 0x80	; 128
    1180:	fa e0       	ldi	r31, 0x0A	; 10
    1182:	80 81       	ld	r24, Z
    1184:	81 60       	ori	r24, 0x01	; 1
    1186:	80 83       	st	Z, r24
    1188:	08 95       	ret

0000118a <Timer_Stop>:
    118a:	e0 e8       	ldi	r30, 0x80	; 128
    118c:	fa e0       	ldi	r31, 0x0A	; 10
    118e:	80 81       	ld	r24, Z
    1190:	8e 7f       	andi	r24, 0xFE	; 254
    1192:	80 83       	st	Z, r24
    1194:	08 95       	ret

00001196 <Set_Brightness_Red>:
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7fca28>
    119c:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7fca29>
    11a0:	08 95       	ret

000011a2 <Set_Brightness_Green>:
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__RODATA_PM_OFFSET__+0x7fca2a>
    11a8:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__RODATA_PM_OFFSET__+0x7fca2b>
    11ac:	08 95       	ret

000011ae <TCA0_Init>:

void TCA0_Init(void) {
	TCA0.SINGLE.PER = 0xFF;
    11ae:	e0 e0       	ldi	r30, 0x00	; 0
    11b0:	fa e0       	ldi	r31, 0x0A	; 10
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	86 a3       	std	Z+38, r24	; 0x26
    11b8:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_SINGLESLOPE_gc | TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm;
    11ba:	83 e3       	ldi	r24, 0x33	; 51
    11bc:	81 83       	std	Z+1, r24	; 0x01
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTF_gc;
    11be:	85 e0       	ldi	r24, 0x05	; 5
    11c0:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__RODATA_PM_OFFSET__+0x7fc5e4>
	TCA0.SINGLE.CTRLA = TCA_SINGLE_ENABLE_bm;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 83       	st	Z, r24
    11c8:	08 95       	ret

000011ca <USART1_Init>:
#include "UART.h"

void USART1_Init(void) {
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
	int8_t sigrow_val = SIGROW.OSC16ERR3V;
    11ce:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
	int32_t baud_reg_val = BAUD_SETTING;
	baud_reg_val *= (1024 + sigrow_val);
    11d2:	0a 2e       	mov	r0, r26
    11d4:	00 0c       	add	r0, r0
    11d6:	bb 0b       	sbc	r27, r27
    11d8:	bc 5f       	subi	r27, 0xFC	; 252
    11da:	27 e5       	ldi	r18, 0x57	; 87
    11dc:	34 e0       	ldi	r19, 0x04	; 4
    11de:	0e 94 9a 09 	call	0x1334	; 0x1334 <__usmulhisi3>
	baud_reg_val /= 1024;
    11e2:	8b 01       	movw	r16, r22
    11e4:	9c 01       	movw	r18, r24
    11e6:	99 23       	and	r25, r25
    11e8:	24 f4       	brge	.+8      	; 0x11f2 <USART1_Init+0x28>
    11ea:	01 50       	subi	r16, 0x01	; 1
    11ec:	1c 4f       	sbci	r17, 0xFC	; 252
    11ee:	2f 4f       	sbci	r18, 0xFF	; 255
    11f0:	3f 4f       	sbci	r19, 0xFF	; 255
    11f2:	d9 01       	movw	r26, r18
    11f4:	c8 01       	movw	r24, r16
    11f6:	07 2e       	mov	r0, r23
    11f8:	7a e0       	ldi	r23, 0x0A	; 10
    11fa:	b5 95       	asr	r27
    11fc:	a7 95       	ror	r26
    11fe:	97 95       	ror	r25
    1200:	87 95       	ror	r24
    1202:	7a 95       	dec	r23
    1204:	d1 f7       	brne	.-12     	; 0x11fa <USART1_Init+0x30>
    1206:	70 2d       	mov	r23, r0
	
	USART1.BAUD = (uint16_t)baud_reg_val;
    1208:	e0 e2       	ldi	r30, 0x20	; 32
    120a:	f8 e0       	ldi	r31, 0x08	; 8
    120c:	80 87       	std	Z+8, r24	; 0x08
    120e:	91 87       	std	Z+9, r25	; 0x09
	PORTC.DIRSET = PIN0_bm;
    1210:	a0 e4       	ldi	r26, 0x40	; 64
    1212:	b4 e0       	ldi	r27, 0x04	; 4
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	11 96       	adiw	r26, 0x01	; 1
    1218:	8c 93       	st	X, r24
    121a:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.DIRCLR = PIN1_bm;
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	12 96       	adiw	r26, 0x02	; 2
    1220:	8c 93       	st	X, r24
	
	USART1.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1222:	80 ec       	ldi	r24, 0xC0	; 192
    1224:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	87 83       	std	Z+7, r24	; 0x07
}
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	08 95       	ret

00001230 <USART1_Transmit>:

void USART1_Transmit(uint8_t data) {
	while (!(USART1.STATUS & USART_DREIF_bm));
    1230:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
    1234:	95 ff       	sbrs	r25, 5
    1236:	fc cf       	rjmp	.-8      	; 0x1230 <USART1_Transmit>
	USART1.TXDATAL = data;
    1238:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7fc822>
    123c:	08 95       	ret

0000123e <USART1_Transmit_Number>:
}

void USART1_Transmit_Number(uint16_t num) {
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	2a 97       	sbiw	r28, 0x0a	; 10
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	de bf       	out	0x3e, r29	; 62
	char buffer[10];
	sprintf(buffer, "%d", num);
    124e:	9f 93       	push	r25
    1250:	8f 93       	push	r24
    1252:	82 eb       	ldi	r24, 0xB2	; 178
    1254:	90 e6       	ldi	r25, 0x60	; 96
    1256:	9f 93       	push	r25
    1258:	8f 93       	push	r24
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	9f 93       	push	r25
    1260:	8f 93       	push	r24
    1262:	0e 94 b1 09 	call	0x1362	; 0x1362 <sprintf>

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	10 e0       	ldi	r17, 0x00	; 0
    1274:	03 c0       	rjmp	.+6      	; 0x127c <USART1_Transmit_Number+0x3e>
		USART1_Transmit((uint8_t)buffer[i]);
    1276:	0e 94 18 09 	call	0x1230	; 0x1230 <USART1_Transmit>

void USART1_Transmit_Number(uint16_t num) {
	char buffer[10];
	sprintf(buffer, "%d", num);

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
    127a:	1f 5f       	subi	r17, 0xFF	; 255
    127c:	e1 e0       	ldi	r30, 0x01	; 1
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	ec 0f       	add	r30, r28
    1282:	fd 1f       	adc	r31, r29
    1284:	e1 0f       	add	r30, r17
    1286:	f1 1d       	adc	r31, r1
    1288:	80 81       	ld	r24, Z
    128a:	81 11       	cpse	r24, r1
    128c:	f4 cf       	rjmp	.-24     	; 0x1276 <USART1_Transmit_Number+0x38>
		USART1_Transmit((uint8_t)buffer[i]);
	}
}
    128e:	2a 96       	adiw	r28, 0x0a	; 10
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	08 95       	ret

0000129c <USART1_Transmit_String>:

void USART1_Transmit_String(char* string) {
    129c:	ef 92       	push	r14
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	7c 01       	movw	r14, r24
	uint16_t string_len = strlen(string);
    12aa:	fc 01       	movw	r30, r24
    12ac:	01 90       	ld	r0, Z+
    12ae:	00 20       	and	r0, r0
    12b0:	e9 f7       	brne	.-6      	; 0x12ac <USART1_Transmit_String+0x10>
    12b2:	31 97       	sbiw	r30, 0x01	; 1
    12b4:	8f 01       	movw	r16, r30
    12b6:	08 1b       	sub	r16, r24
    12b8:	19 0b       	sbc	r17, r25
	for (uint16_t i = 0; i < string_len; i++) {
    12ba:	c0 e0       	ldi	r28, 0x00	; 0
    12bc:	d0 e0       	ldi	r29, 0x00	; 0
    12be:	07 c0       	rjmp	.+14     	; 0x12ce <USART1_Transmit_String+0x32>
		USART1_Transmit((uint8_t)string[i]);
    12c0:	f7 01       	movw	r30, r14
    12c2:	ec 0f       	add	r30, r28
    12c4:	fd 1f       	adc	r31, r29
    12c6:	80 81       	ld	r24, Z
    12c8:	0e 94 18 09 	call	0x1230	; 0x1230 <USART1_Transmit>
	}
}

void USART1_Transmit_String(char* string) {
	uint16_t string_len = strlen(string);
	for (uint16_t i = 0; i < string_len; i++) {
    12cc:	21 96       	adiw	r28, 0x01	; 1
    12ce:	c0 17       	cp	r28, r16
    12d0:	d1 07       	cpc	r29, r17
    12d2:	b0 f3       	brcs	.-20     	; 0x12c0 <USART1_Transmit_String+0x24>
		USART1_Transmit((uint8_t)string[i]);
	}
}
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	08 95       	ret

000012e2 <USART1_Receive>:

uint8_t USART1_Receive(void) {
	while (!(USART1.STATUS & USART_RXCIF_bm)) wdt_reset();
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <USART1_Receive+0x4>
    12e4:	a8 95       	wdr
    12e6:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
    12ea:	88 23       	and	r24, r24
    12ec:	dc f7       	brge	.-10     	; 0x12e4 <USART1_Receive+0x2>
	return USART1.RXDATAL;
    12ee:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7fc820>
}
    12f2:	08 95       	ret

000012f4 <USART1_Receive_No_Wait>:

uint8_t USART1_Receive_No_Wait(void) {
	return USART1.RXDATAL;
    12f4:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7fc820>
    12f8:	08 95       	ret

000012fa <__tablejump2__>:
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	05 90       	lpm	r0, Z+
    1300:	f4 91       	lpm	r31, Z
    1302:	e0 2d       	mov	r30, r0
    1304:	09 94       	ijmp

00001306 <__mulhisi3>:
    1306:	0e 94 8b 09 	call	0x1316	; 0x1316 <__umulhisi3>
    130a:	33 23       	and	r19, r19
    130c:	12 f4       	brpl	.+4      	; 0x1312 <__mulhisi3+0xc>
    130e:	8a 1b       	sub	r24, r26
    1310:	9b 0b       	sbc	r25, r27
    1312:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__usmulhisi3_tail>

00001316 <__umulhisi3>:
    1316:	a2 9f       	mul	r26, r18
    1318:	b0 01       	movw	r22, r0
    131a:	b3 9f       	mul	r27, r19
    131c:	c0 01       	movw	r24, r0
    131e:	a3 9f       	mul	r26, r19
    1320:	70 0d       	add	r23, r0
    1322:	81 1d       	adc	r24, r1
    1324:	11 24       	eor	r1, r1
    1326:	91 1d       	adc	r25, r1
    1328:	b2 9f       	mul	r27, r18
    132a:	70 0d       	add	r23, r0
    132c:	81 1d       	adc	r24, r1
    132e:	11 24       	eor	r1, r1
    1330:	91 1d       	adc	r25, r1
    1332:	08 95       	ret

00001334 <__usmulhisi3>:
    1334:	0e 94 8b 09 	call	0x1316	; 0x1316 <__umulhisi3>

00001338 <__usmulhisi3_tail>:
    1338:	b7 ff       	sbrs	r27, 7
    133a:	08 95       	ret
    133c:	82 1b       	sub	r24, r18
    133e:	93 0b       	sbc	r25, r19
    1340:	08 95       	ret

00001342 <tolower>:
    1342:	91 11       	cpse	r25, r1
    1344:	08 95       	ret
    1346:	81 54       	subi	r24, 0x41	; 65
    1348:	8a 51       	subi	r24, 0x1A	; 26
    134a:	08 f4       	brcc	.+2      	; 0x134e <tolower+0xc>
    134c:	80 5e       	subi	r24, 0xE0	; 224
    134e:	85 5a       	subi	r24, 0xA5	; 165
    1350:	08 95       	ret

00001352 <toupper>:
    1352:	91 11       	cpse	r25, r1
    1354:	08 95       	ret
    1356:	81 56       	subi	r24, 0x61	; 97
    1358:	8a 51       	subi	r24, 0x1A	; 26
    135a:	08 f4       	brcc	.+2      	; 0x135e <toupper+0xc>
    135c:	80 52       	subi	r24, 0x20	; 32
    135e:	85 58       	subi	r24, 0x85	; 133
    1360:	08 95       	ret

00001362 <sprintf>:
    1362:	ae e0       	ldi	r26, 0x0E	; 14
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e7 eb       	ldi	r30, 0xB7	; 183
    1368:	f9 e0       	ldi	r31, 0x09	; 9
    136a:	0c 94 72 0c 	jmp	0x18e4	; 0x18e4 <__prologue_saves__+0x1c>
    136e:	0d 89       	ldd	r16, Y+21	; 0x15
    1370:	1e 89       	ldd	r17, Y+22	; 0x16
    1372:	86 e0       	ldi	r24, 0x06	; 6
    1374:	8c 83       	std	Y+4, r24	; 0x04
    1376:	09 83       	std	Y+1, r16	; 0x01
    1378:	1a 83       	std	Y+2, r17	; 0x02
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	9f e7       	ldi	r25, 0x7F	; 127
    137e:	8d 83       	std	Y+5, r24	; 0x05
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	ae 01       	movw	r20, r28
    1384:	47 5e       	subi	r20, 0xE7	; 231
    1386:	5f 4f       	sbci	r21, 0xFF	; 255
    1388:	6f 89       	ldd	r22, Y+23	; 0x17
    138a:	78 8d       	ldd	r23, Y+24	; 0x18
    138c:	ce 01       	movw	r24, r28
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <vfprintf>
    1394:	ef 81       	ldd	r30, Y+7	; 0x07
    1396:	f8 85       	ldd	r31, Y+8	; 0x08
    1398:	e0 0f       	add	r30, r16
    139a:	f1 1f       	adc	r31, r17
    139c:	10 82       	st	Z, r1
    139e:	2e 96       	adiw	r28, 0x0e	; 14
    13a0:	e4 e0       	ldi	r30, 0x04	; 4
    13a2:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__epilogue_restores__+0x1c>

000013a6 <vfprintf>:
    13a6:	ab e0       	ldi	r26, 0x0B	; 11
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e9 ed       	ldi	r30, 0xD9	; 217
    13ac:	f9 e0       	ldi	r31, 0x09	; 9
    13ae:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__prologue_saves__>
    13b2:	6c 01       	movw	r12, r24
    13b4:	7b 01       	movw	r14, r22
    13b6:	8a 01       	movw	r16, r20
    13b8:	fc 01       	movw	r30, r24
    13ba:	16 82       	std	Z+6, r1	; 0x06
    13bc:	17 82       	std	Z+7, r1	; 0x07
    13be:	83 81       	ldd	r24, Z+3	; 0x03
    13c0:	81 ff       	sbrs	r24, 1
    13c2:	cc c1       	rjmp	.+920    	; 0x175c <vfprintf+0x3b6>
    13c4:	ce 01       	movw	r24, r28
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	3c 01       	movw	r6, r24
    13ca:	f6 01       	movw	r30, r12
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	f7 01       	movw	r30, r14
    13d0:	93 fd       	sbrc	r25, 3
    13d2:	85 91       	lpm	r24, Z+
    13d4:	93 ff       	sbrs	r25, 3
    13d6:	81 91       	ld	r24, Z+
    13d8:	7f 01       	movw	r14, r30
    13da:	88 23       	and	r24, r24
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <vfprintf+0x3a>
    13de:	ba c1       	rjmp	.+884    	; 0x1754 <vfprintf+0x3ae>
    13e0:	85 32       	cpi	r24, 0x25	; 37
    13e2:	39 f4       	brne	.+14     	; 0x13f2 <vfprintf+0x4c>
    13e4:	93 fd       	sbrc	r25, 3
    13e6:	85 91       	lpm	r24, Z+
    13e8:	93 ff       	sbrs	r25, 3
    13ea:	81 91       	ld	r24, Z+
    13ec:	7f 01       	movw	r14, r30
    13ee:	85 32       	cpi	r24, 0x25	; 37
    13f0:	29 f4       	brne	.+10     	; 0x13fc <vfprintf+0x56>
    13f2:	b6 01       	movw	r22, r12
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <fputc>
    13fa:	e7 cf       	rjmp	.-50     	; 0x13ca <vfprintf+0x24>
    13fc:	91 2c       	mov	r9, r1
    13fe:	21 2c       	mov	r2, r1
    1400:	31 2c       	mov	r3, r1
    1402:	ff e1       	ldi	r31, 0x1F	; 31
    1404:	f3 15       	cp	r31, r3
    1406:	d8 f0       	brcs	.+54     	; 0x143e <vfprintf+0x98>
    1408:	8b 32       	cpi	r24, 0x2B	; 43
    140a:	79 f0       	breq	.+30     	; 0x142a <vfprintf+0x84>
    140c:	38 f4       	brcc	.+14     	; 0x141c <vfprintf+0x76>
    140e:	80 32       	cpi	r24, 0x20	; 32
    1410:	79 f0       	breq	.+30     	; 0x1430 <vfprintf+0x8a>
    1412:	83 32       	cpi	r24, 0x23	; 35
    1414:	a1 f4       	brne	.+40     	; 0x143e <vfprintf+0x98>
    1416:	23 2d       	mov	r18, r3
    1418:	20 61       	ori	r18, 0x10	; 16
    141a:	1d c0       	rjmp	.+58     	; 0x1456 <vfprintf+0xb0>
    141c:	8d 32       	cpi	r24, 0x2D	; 45
    141e:	61 f0       	breq	.+24     	; 0x1438 <vfprintf+0x92>
    1420:	80 33       	cpi	r24, 0x30	; 48
    1422:	69 f4       	brne	.+26     	; 0x143e <vfprintf+0x98>
    1424:	23 2d       	mov	r18, r3
    1426:	21 60       	ori	r18, 0x01	; 1
    1428:	16 c0       	rjmp	.+44     	; 0x1456 <vfprintf+0xb0>
    142a:	83 2d       	mov	r24, r3
    142c:	82 60       	ori	r24, 0x02	; 2
    142e:	38 2e       	mov	r3, r24
    1430:	e3 2d       	mov	r30, r3
    1432:	e4 60       	ori	r30, 0x04	; 4
    1434:	3e 2e       	mov	r3, r30
    1436:	2a c0       	rjmp	.+84     	; 0x148c <vfprintf+0xe6>
    1438:	f3 2d       	mov	r31, r3
    143a:	f8 60       	ori	r31, 0x08	; 8
    143c:	1d c0       	rjmp	.+58     	; 0x1478 <vfprintf+0xd2>
    143e:	37 fc       	sbrc	r3, 7
    1440:	2d c0       	rjmp	.+90     	; 0x149c <vfprintf+0xf6>
    1442:	20 ed       	ldi	r18, 0xD0	; 208
    1444:	28 0f       	add	r18, r24
    1446:	2a 30       	cpi	r18, 0x0A	; 10
    1448:	40 f0       	brcs	.+16     	; 0x145a <vfprintf+0xb4>
    144a:	8e 32       	cpi	r24, 0x2E	; 46
    144c:	b9 f4       	brne	.+46     	; 0x147c <vfprintf+0xd6>
    144e:	36 fc       	sbrc	r3, 6
    1450:	81 c1       	rjmp	.+770    	; 0x1754 <vfprintf+0x3ae>
    1452:	23 2d       	mov	r18, r3
    1454:	20 64       	ori	r18, 0x40	; 64
    1456:	32 2e       	mov	r3, r18
    1458:	19 c0       	rjmp	.+50     	; 0x148c <vfprintf+0xe6>
    145a:	36 fe       	sbrs	r3, 6
    145c:	06 c0       	rjmp	.+12     	; 0x146a <vfprintf+0xc4>
    145e:	8a e0       	ldi	r24, 0x0A	; 10
    1460:	98 9e       	mul	r9, r24
    1462:	20 0d       	add	r18, r0
    1464:	11 24       	eor	r1, r1
    1466:	92 2e       	mov	r9, r18
    1468:	11 c0       	rjmp	.+34     	; 0x148c <vfprintf+0xe6>
    146a:	ea e0       	ldi	r30, 0x0A	; 10
    146c:	2e 9e       	mul	r2, r30
    146e:	20 0d       	add	r18, r0
    1470:	11 24       	eor	r1, r1
    1472:	22 2e       	mov	r2, r18
    1474:	f3 2d       	mov	r31, r3
    1476:	f0 62       	ori	r31, 0x20	; 32
    1478:	3f 2e       	mov	r3, r31
    147a:	08 c0       	rjmp	.+16     	; 0x148c <vfprintf+0xe6>
    147c:	8c 36       	cpi	r24, 0x6C	; 108
    147e:	21 f4       	brne	.+8      	; 0x1488 <vfprintf+0xe2>
    1480:	83 2d       	mov	r24, r3
    1482:	80 68       	ori	r24, 0x80	; 128
    1484:	38 2e       	mov	r3, r24
    1486:	02 c0       	rjmp	.+4      	; 0x148c <vfprintf+0xe6>
    1488:	88 36       	cpi	r24, 0x68	; 104
    148a:	41 f4       	brne	.+16     	; 0x149c <vfprintf+0xf6>
    148c:	f7 01       	movw	r30, r14
    148e:	93 fd       	sbrc	r25, 3
    1490:	85 91       	lpm	r24, Z+
    1492:	93 ff       	sbrs	r25, 3
    1494:	81 91       	ld	r24, Z+
    1496:	7f 01       	movw	r14, r30
    1498:	81 11       	cpse	r24, r1
    149a:	b3 cf       	rjmp	.-154    	; 0x1402 <vfprintf+0x5c>
    149c:	98 2f       	mov	r25, r24
    149e:	9f 7d       	andi	r25, 0xDF	; 223
    14a0:	95 54       	subi	r25, 0x45	; 69
    14a2:	93 30       	cpi	r25, 0x03	; 3
    14a4:	28 f4       	brcc	.+10     	; 0x14b0 <vfprintf+0x10a>
    14a6:	0c 5f       	subi	r16, 0xFC	; 252
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	9f e3       	ldi	r25, 0x3F	; 63
    14ac:	99 83       	std	Y+1, r25	; 0x01
    14ae:	0d c0       	rjmp	.+26     	; 0x14ca <vfprintf+0x124>
    14b0:	83 36       	cpi	r24, 0x63	; 99
    14b2:	31 f0       	breq	.+12     	; 0x14c0 <vfprintf+0x11a>
    14b4:	83 37       	cpi	r24, 0x73	; 115
    14b6:	71 f0       	breq	.+28     	; 0x14d4 <vfprintf+0x12e>
    14b8:	83 35       	cpi	r24, 0x53	; 83
    14ba:	09 f0       	breq	.+2      	; 0x14be <vfprintf+0x118>
    14bc:	59 c0       	rjmp	.+178    	; 0x1570 <vfprintf+0x1ca>
    14be:	21 c0       	rjmp	.+66     	; 0x1502 <vfprintf+0x15c>
    14c0:	f8 01       	movw	r30, r16
    14c2:	80 81       	ld	r24, Z
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	0e 5f       	subi	r16, 0xFE	; 254
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	88 24       	eor	r8, r8
    14cc:	83 94       	inc	r8
    14ce:	91 2c       	mov	r9, r1
    14d0:	53 01       	movw	r10, r6
    14d2:	13 c0       	rjmp	.+38     	; 0x14fa <vfprintf+0x154>
    14d4:	28 01       	movw	r4, r16
    14d6:	f2 e0       	ldi	r31, 0x02	; 2
    14d8:	4f 0e       	add	r4, r31
    14da:	51 1c       	adc	r5, r1
    14dc:	f8 01       	movw	r30, r16
    14de:	a0 80       	ld	r10, Z
    14e0:	b1 80       	ldd	r11, Z+1	; 0x01
    14e2:	36 fe       	sbrs	r3, 6
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <vfprintf+0x146>
    14e6:	69 2d       	mov	r22, r9
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <vfprintf+0x14a>
    14ec:	6f ef       	ldi	r22, 0xFF	; 255
    14ee:	7f ef       	ldi	r23, 0xFF	; 255
    14f0:	c5 01       	movw	r24, r10
    14f2:	0e 94 bf 0b 	call	0x177e	; 0x177e <strnlen>
    14f6:	4c 01       	movw	r8, r24
    14f8:	82 01       	movw	r16, r4
    14fa:	f3 2d       	mov	r31, r3
    14fc:	ff 77       	andi	r31, 0x7F	; 127
    14fe:	3f 2e       	mov	r3, r31
    1500:	16 c0       	rjmp	.+44     	; 0x152e <vfprintf+0x188>
    1502:	28 01       	movw	r4, r16
    1504:	22 e0       	ldi	r18, 0x02	; 2
    1506:	42 0e       	add	r4, r18
    1508:	51 1c       	adc	r5, r1
    150a:	f8 01       	movw	r30, r16
    150c:	a0 80       	ld	r10, Z
    150e:	b1 80       	ldd	r11, Z+1	; 0x01
    1510:	36 fe       	sbrs	r3, 6
    1512:	03 c0       	rjmp	.+6      	; 0x151a <vfprintf+0x174>
    1514:	69 2d       	mov	r22, r9
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	02 c0       	rjmp	.+4      	; 0x151e <vfprintf+0x178>
    151a:	6f ef       	ldi	r22, 0xFF	; 255
    151c:	7f ef       	ldi	r23, 0xFF	; 255
    151e:	c5 01       	movw	r24, r10
    1520:	0e 94 b4 0b 	call	0x1768	; 0x1768 <strnlen_P>
    1524:	4c 01       	movw	r8, r24
    1526:	f3 2d       	mov	r31, r3
    1528:	f0 68       	ori	r31, 0x80	; 128
    152a:	3f 2e       	mov	r3, r31
    152c:	82 01       	movw	r16, r4
    152e:	33 fc       	sbrc	r3, 3
    1530:	1b c0       	rjmp	.+54     	; 0x1568 <vfprintf+0x1c2>
    1532:	82 2d       	mov	r24, r2
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	88 16       	cp	r8, r24
    1538:	99 06       	cpc	r9, r25
    153a:	b0 f4       	brcc	.+44     	; 0x1568 <vfprintf+0x1c2>
    153c:	b6 01       	movw	r22, r12
    153e:	80 e2       	ldi	r24, 0x20	; 32
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 ca 0b 	call	0x1794	; 0x1794 <fputc>
    1546:	2a 94       	dec	r2
    1548:	f4 cf       	rjmp	.-24     	; 0x1532 <vfprintf+0x18c>
    154a:	f5 01       	movw	r30, r10
    154c:	37 fc       	sbrc	r3, 7
    154e:	85 91       	lpm	r24, Z+
    1550:	37 fe       	sbrs	r3, 7
    1552:	81 91       	ld	r24, Z+
    1554:	5f 01       	movw	r10, r30
    1556:	b6 01       	movw	r22, r12
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <fputc>
    155e:	21 10       	cpse	r2, r1
    1560:	2a 94       	dec	r2
    1562:	21 e0       	ldi	r18, 0x01	; 1
    1564:	82 1a       	sub	r8, r18
    1566:	91 08       	sbc	r9, r1
    1568:	81 14       	cp	r8, r1
    156a:	91 04       	cpc	r9, r1
    156c:	71 f7       	brne	.-36     	; 0x154a <vfprintf+0x1a4>
    156e:	e8 c0       	rjmp	.+464    	; 0x1740 <vfprintf+0x39a>
    1570:	84 36       	cpi	r24, 0x64	; 100
    1572:	11 f0       	breq	.+4      	; 0x1578 <vfprintf+0x1d2>
    1574:	89 36       	cpi	r24, 0x69	; 105
    1576:	41 f5       	brne	.+80     	; 0x15c8 <vfprintf+0x222>
    1578:	f8 01       	movw	r30, r16
    157a:	37 fe       	sbrs	r3, 7
    157c:	07 c0       	rjmp	.+14     	; 0x158c <vfprintf+0x1e6>
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	0c 5f       	subi	r16, 0xFC	; 252
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	08 c0       	rjmp	.+16     	; 0x159c <vfprintf+0x1f6>
    158c:	60 81       	ld	r22, Z
    158e:	71 81       	ldd	r23, Z+1	; 0x01
    1590:	07 2e       	mov	r0, r23
    1592:	00 0c       	add	r0, r0
    1594:	88 0b       	sbc	r24, r24
    1596:	99 0b       	sbc	r25, r25
    1598:	0e 5f       	subi	r16, 0xFE	; 254
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	f3 2d       	mov	r31, r3
    159e:	ff 76       	andi	r31, 0x6F	; 111
    15a0:	3f 2e       	mov	r3, r31
    15a2:	97 ff       	sbrs	r25, 7
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <vfprintf+0x212>
    15a6:	90 95       	com	r25
    15a8:	80 95       	com	r24
    15aa:	70 95       	com	r23
    15ac:	61 95       	neg	r22
    15ae:	7f 4f       	sbci	r23, 0xFF	; 255
    15b0:	8f 4f       	sbci	r24, 0xFF	; 255
    15b2:	9f 4f       	sbci	r25, 0xFF	; 255
    15b4:	f0 68       	ori	r31, 0x80	; 128
    15b6:	3f 2e       	mov	r3, r31
    15b8:	2a e0       	ldi	r18, 0x0A	; 10
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	a3 01       	movw	r20, r6
    15be:	0e 94 06 0c 	call	0x180c	; 0x180c <__ultoa_invert>
    15c2:	88 2e       	mov	r8, r24
    15c4:	86 18       	sub	r8, r6
    15c6:	45 c0       	rjmp	.+138    	; 0x1652 <vfprintf+0x2ac>
    15c8:	85 37       	cpi	r24, 0x75	; 117
    15ca:	31 f4       	brne	.+12     	; 0x15d8 <vfprintf+0x232>
    15cc:	23 2d       	mov	r18, r3
    15ce:	2f 7e       	andi	r18, 0xEF	; 239
    15d0:	b2 2e       	mov	r11, r18
    15d2:	2a e0       	ldi	r18, 0x0A	; 10
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	25 c0       	rjmp	.+74     	; 0x1622 <vfprintf+0x27c>
    15d8:	93 2d       	mov	r25, r3
    15da:	99 7f       	andi	r25, 0xF9	; 249
    15dc:	b9 2e       	mov	r11, r25
    15de:	8f 36       	cpi	r24, 0x6F	; 111
    15e0:	c1 f0       	breq	.+48     	; 0x1612 <vfprintf+0x26c>
    15e2:	18 f4       	brcc	.+6      	; 0x15ea <vfprintf+0x244>
    15e4:	88 35       	cpi	r24, 0x58	; 88
    15e6:	79 f0       	breq	.+30     	; 0x1606 <vfprintf+0x260>
    15e8:	b5 c0       	rjmp	.+362    	; 0x1754 <vfprintf+0x3ae>
    15ea:	80 37       	cpi	r24, 0x70	; 112
    15ec:	19 f0       	breq	.+6      	; 0x15f4 <vfprintf+0x24e>
    15ee:	88 37       	cpi	r24, 0x78	; 120
    15f0:	21 f0       	breq	.+8      	; 0x15fa <vfprintf+0x254>
    15f2:	b0 c0       	rjmp	.+352    	; 0x1754 <vfprintf+0x3ae>
    15f4:	e9 2f       	mov	r30, r25
    15f6:	e0 61       	ori	r30, 0x10	; 16
    15f8:	be 2e       	mov	r11, r30
    15fa:	b4 fe       	sbrs	r11, 4
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <vfprintf+0x272>
    15fe:	fb 2d       	mov	r31, r11
    1600:	f4 60       	ori	r31, 0x04	; 4
    1602:	bf 2e       	mov	r11, r31
    1604:	09 c0       	rjmp	.+18     	; 0x1618 <vfprintf+0x272>
    1606:	34 fe       	sbrs	r3, 4
    1608:	0a c0       	rjmp	.+20     	; 0x161e <vfprintf+0x278>
    160a:	29 2f       	mov	r18, r25
    160c:	26 60       	ori	r18, 0x06	; 6
    160e:	b2 2e       	mov	r11, r18
    1610:	06 c0       	rjmp	.+12     	; 0x161e <vfprintf+0x278>
    1612:	28 e0       	ldi	r18, 0x08	; 8
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <vfprintf+0x27c>
    1618:	20 e1       	ldi	r18, 0x10	; 16
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <vfprintf+0x27c>
    161e:	20 e1       	ldi	r18, 0x10	; 16
    1620:	32 e0       	ldi	r19, 0x02	; 2
    1622:	f8 01       	movw	r30, r16
    1624:	b7 fe       	sbrs	r11, 7
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <vfprintf+0x290>
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	0c 5f       	subi	r16, 0xFC	; 252
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	06 c0       	rjmp	.+12     	; 0x1642 <vfprintf+0x29c>
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 5f       	subi	r16, 0xFE	; 254
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	a3 01       	movw	r20, r6
    1644:	0e 94 06 0c 	call	0x180c	; 0x180c <__ultoa_invert>
    1648:	88 2e       	mov	r8, r24
    164a:	86 18       	sub	r8, r6
    164c:	fb 2d       	mov	r31, r11
    164e:	ff 77       	andi	r31, 0x7F	; 127
    1650:	3f 2e       	mov	r3, r31
    1652:	36 fe       	sbrs	r3, 6
    1654:	0d c0       	rjmp	.+26     	; 0x1670 <vfprintf+0x2ca>
    1656:	23 2d       	mov	r18, r3
    1658:	2e 7f       	andi	r18, 0xFE	; 254
    165a:	a2 2e       	mov	r10, r18
    165c:	89 14       	cp	r8, r9
    165e:	58 f4       	brcc	.+22     	; 0x1676 <vfprintf+0x2d0>
    1660:	34 fe       	sbrs	r3, 4
    1662:	0b c0       	rjmp	.+22     	; 0x167a <vfprintf+0x2d4>
    1664:	32 fc       	sbrc	r3, 2
    1666:	09 c0       	rjmp	.+18     	; 0x167a <vfprintf+0x2d4>
    1668:	83 2d       	mov	r24, r3
    166a:	8e 7e       	andi	r24, 0xEE	; 238
    166c:	a8 2e       	mov	r10, r24
    166e:	05 c0       	rjmp	.+10     	; 0x167a <vfprintf+0x2d4>
    1670:	b8 2c       	mov	r11, r8
    1672:	a3 2c       	mov	r10, r3
    1674:	03 c0       	rjmp	.+6      	; 0x167c <vfprintf+0x2d6>
    1676:	b8 2c       	mov	r11, r8
    1678:	01 c0       	rjmp	.+2      	; 0x167c <vfprintf+0x2d6>
    167a:	b9 2c       	mov	r11, r9
    167c:	a4 fe       	sbrs	r10, 4
    167e:	0f c0       	rjmp	.+30     	; 0x169e <vfprintf+0x2f8>
    1680:	fe 01       	movw	r30, r28
    1682:	e8 0d       	add	r30, r8
    1684:	f1 1d       	adc	r31, r1
    1686:	80 81       	ld	r24, Z
    1688:	80 33       	cpi	r24, 0x30	; 48
    168a:	21 f4       	brne	.+8      	; 0x1694 <vfprintf+0x2ee>
    168c:	9a 2d       	mov	r25, r10
    168e:	99 7e       	andi	r25, 0xE9	; 233
    1690:	a9 2e       	mov	r10, r25
    1692:	09 c0       	rjmp	.+18     	; 0x16a6 <vfprintf+0x300>
    1694:	a2 fe       	sbrs	r10, 2
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <vfprintf+0x2fe>
    1698:	b3 94       	inc	r11
    169a:	b3 94       	inc	r11
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <vfprintf+0x300>
    169e:	8a 2d       	mov	r24, r10
    16a0:	86 78       	andi	r24, 0x86	; 134
    16a2:	09 f0       	breq	.+2      	; 0x16a6 <vfprintf+0x300>
    16a4:	b3 94       	inc	r11
    16a6:	a3 fc       	sbrc	r10, 3
    16a8:	11 c0       	rjmp	.+34     	; 0x16cc <vfprintf+0x326>
    16aa:	a0 fe       	sbrs	r10, 0
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0x314>
    16ae:	b2 14       	cp	r11, r2
    16b0:	88 f4       	brcc	.+34     	; 0x16d4 <vfprintf+0x32e>
    16b2:	28 0c       	add	r2, r8
    16b4:	92 2c       	mov	r9, r2
    16b6:	9b 18       	sub	r9, r11
    16b8:	0e c0       	rjmp	.+28     	; 0x16d6 <vfprintf+0x330>
    16ba:	b2 14       	cp	r11, r2
    16bc:	60 f4       	brcc	.+24     	; 0x16d6 <vfprintf+0x330>
    16be:	b6 01       	movw	r22, r12
    16c0:	80 e2       	ldi	r24, 0x20	; 32
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <fputc>
    16c8:	b3 94       	inc	r11
    16ca:	f7 cf       	rjmp	.-18     	; 0x16ba <vfprintf+0x314>
    16cc:	b2 14       	cp	r11, r2
    16ce:	18 f4       	brcc	.+6      	; 0x16d6 <vfprintf+0x330>
    16d0:	2b 18       	sub	r2, r11
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <vfprintf+0x332>
    16d4:	98 2c       	mov	r9, r8
    16d6:	21 2c       	mov	r2, r1
    16d8:	a4 fe       	sbrs	r10, 4
    16da:	10 c0       	rjmp	.+32     	; 0x16fc <vfprintf+0x356>
    16dc:	b6 01       	movw	r22, r12
    16de:	80 e3       	ldi	r24, 0x30	; 48
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <fputc>
    16e6:	a2 fe       	sbrs	r10, 2
    16e8:	17 c0       	rjmp	.+46     	; 0x1718 <vfprintf+0x372>
    16ea:	a1 fc       	sbrc	r10, 1
    16ec:	03 c0       	rjmp	.+6      	; 0x16f4 <vfprintf+0x34e>
    16ee:	88 e7       	ldi	r24, 0x78	; 120
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <vfprintf+0x352>
    16f4:	88 e5       	ldi	r24, 0x58	; 88
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	b6 01       	movw	r22, r12
    16fa:	0c c0       	rjmp	.+24     	; 0x1714 <vfprintf+0x36e>
    16fc:	8a 2d       	mov	r24, r10
    16fe:	86 78       	andi	r24, 0x86	; 134
    1700:	59 f0       	breq	.+22     	; 0x1718 <vfprintf+0x372>
    1702:	a1 fe       	sbrs	r10, 1
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfprintf+0x364>
    1706:	8b e2       	ldi	r24, 0x2B	; 43
    1708:	01 c0       	rjmp	.+2      	; 0x170c <vfprintf+0x366>
    170a:	80 e2       	ldi	r24, 0x20	; 32
    170c:	a7 fc       	sbrc	r10, 7
    170e:	8d e2       	ldi	r24, 0x2D	; 45
    1710:	b6 01       	movw	r22, r12
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 ca 0b 	call	0x1794	; 0x1794 <fputc>
    1718:	89 14       	cp	r8, r9
    171a:	38 f4       	brcc	.+14     	; 0x172a <vfprintf+0x384>
    171c:	b6 01       	movw	r22, r12
    171e:	80 e3       	ldi	r24, 0x30	; 48
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 ca 0b 	call	0x1794	; 0x1794 <fputc>
    1726:	9a 94       	dec	r9
    1728:	f7 cf       	rjmp	.-18     	; 0x1718 <vfprintf+0x372>
    172a:	8a 94       	dec	r8
    172c:	f3 01       	movw	r30, r6
    172e:	e8 0d       	add	r30, r8
    1730:	f1 1d       	adc	r31, r1
    1732:	80 81       	ld	r24, Z
    1734:	b6 01       	movw	r22, r12
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 ca 0b 	call	0x1794	; 0x1794 <fputc>
    173c:	81 10       	cpse	r8, r1
    173e:	f5 cf       	rjmp	.-22     	; 0x172a <vfprintf+0x384>
    1740:	22 20       	and	r2, r2
    1742:	09 f4       	brne	.+2      	; 0x1746 <vfprintf+0x3a0>
    1744:	42 ce       	rjmp	.-892    	; 0x13ca <vfprintf+0x24>
    1746:	b6 01       	movw	r22, r12
    1748:	80 e2       	ldi	r24, 0x20	; 32
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <fputc>
    1750:	2a 94       	dec	r2
    1752:	f6 cf       	rjmp	.-20     	; 0x1740 <vfprintf+0x39a>
    1754:	f6 01       	movw	r30, r12
    1756:	86 81       	ldd	r24, Z+6	; 0x06
    1758:	97 81       	ldd	r25, Z+7	; 0x07
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x3ba>
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	9f ef       	ldi	r25, 0xFF	; 255
    1760:	2b 96       	adiw	r28, 0x0b	; 11
    1762:	e2 e1       	ldi	r30, 0x12	; 18
    1764:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__epilogue_restores__>

00001768 <strnlen_P>:
    1768:	fc 01       	movw	r30, r24
    176a:	05 90       	lpm	r0, Z+
    176c:	61 50       	subi	r22, 0x01	; 1
    176e:	70 40       	sbci	r23, 0x00	; 0
    1770:	01 10       	cpse	r0, r1
    1772:	d8 f7       	brcc	.-10     	; 0x176a <strnlen_P+0x2>
    1774:	80 95       	com	r24
    1776:	90 95       	com	r25
    1778:	8e 0f       	add	r24, r30
    177a:	9f 1f       	adc	r25, r31
    177c:	08 95       	ret

0000177e <strnlen>:
    177e:	fc 01       	movw	r30, r24
    1780:	61 50       	subi	r22, 0x01	; 1
    1782:	70 40       	sbci	r23, 0x00	; 0
    1784:	01 90       	ld	r0, Z+
    1786:	01 10       	cpse	r0, r1
    1788:	d8 f7       	brcc	.-10     	; 0x1780 <strnlen+0x2>
    178a:	80 95       	com	r24
    178c:	90 95       	com	r25
    178e:	8e 0f       	add	r24, r30
    1790:	9f 1f       	adc	r25, r31
    1792:	08 95       	ret

00001794 <fputc>:
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	fb 01       	movw	r30, r22
    179e:	23 81       	ldd	r18, Z+3	; 0x03
    17a0:	21 fd       	sbrc	r18, 1
    17a2:	03 c0       	rjmp	.+6      	; 0x17aa <fputc+0x16>
    17a4:	8f ef       	ldi	r24, 0xFF	; 255
    17a6:	9f ef       	ldi	r25, 0xFF	; 255
    17a8:	2c c0       	rjmp	.+88     	; 0x1802 <fputc+0x6e>
    17aa:	22 ff       	sbrs	r18, 2
    17ac:	16 c0       	rjmp	.+44     	; 0x17da <fputc+0x46>
    17ae:	46 81       	ldd	r20, Z+6	; 0x06
    17b0:	57 81       	ldd	r21, Z+7	; 0x07
    17b2:	24 81       	ldd	r18, Z+4	; 0x04
    17b4:	35 81       	ldd	r19, Z+5	; 0x05
    17b6:	42 17       	cp	r20, r18
    17b8:	53 07       	cpc	r21, r19
    17ba:	44 f4       	brge	.+16     	; 0x17cc <fputc+0x38>
    17bc:	a0 81       	ld	r26, Z
    17be:	b1 81       	ldd	r27, Z+1	; 0x01
    17c0:	9d 01       	movw	r18, r26
    17c2:	2f 5f       	subi	r18, 0xFF	; 255
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
    17c6:	20 83       	st	Z, r18
    17c8:	31 83       	std	Z+1, r19	; 0x01
    17ca:	8c 93       	st	X, r24
    17cc:	26 81       	ldd	r18, Z+6	; 0x06
    17ce:	37 81       	ldd	r19, Z+7	; 0x07
    17d0:	2f 5f       	subi	r18, 0xFF	; 255
    17d2:	3f 4f       	sbci	r19, 0xFF	; 255
    17d4:	26 83       	std	Z+6, r18	; 0x06
    17d6:	37 83       	std	Z+7, r19	; 0x07
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <fputc+0x6e>
    17da:	8b 01       	movw	r16, r22
    17dc:	ec 01       	movw	r28, r24
    17de:	fb 01       	movw	r30, r22
    17e0:	00 84       	ldd	r0, Z+8	; 0x08
    17e2:	f1 85       	ldd	r31, Z+9	; 0x09
    17e4:	e0 2d       	mov	r30, r0
    17e6:	09 95       	icall
    17e8:	89 2b       	or	r24, r25
    17ea:	e1 f6       	brne	.-72     	; 0x17a4 <fputc+0x10>
    17ec:	d8 01       	movw	r26, r16
    17ee:	16 96       	adiw	r26, 0x06	; 6
    17f0:	8d 91       	ld	r24, X+
    17f2:	9c 91       	ld	r25, X
    17f4:	17 97       	sbiw	r26, 0x07	; 7
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	16 96       	adiw	r26, 0x06	; 6
    17fa:	8d 93       	st	X+, r24
    17fc:	9c 93       	st	X, r25
    17fe:	17 97       	sbiw	r26, 0x07	; 7
    1800:	ce 01       	movw	r24, r28
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	08 95       	ret

0000180c <__ultoa_invert>:
    180c:	fa 01       	movw	r30, r20
    180e:	aa 27       	eor	r26, r26
    1810:	28 30       	cpi	r18, 0x08	; 8
    1812:	51 f1       	breq	.+84     	; 0x1868 <__ultoa_invert+0x5c>
    1814:	20 31       	cpi	r18, 0x10	; 16
    1816:	81 f1       	breq	.+96     	; 0x1878 <__ultoa_invert+0x6c>
    1818:	e8 94       	clt
    181a:	6f 93       	push	r22
    181c:	6e 7f       	andi	r22, 0xFE	; 254
    181e:	6e 5f       	subi	r22, 0xFE	; 254
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	8f 4f       	sbci	r24, 0xFF	; 255
    1824:	9f 4f       	sbci	r25, 0xFF	; 255
    1826:	af 4f       	sbci	r26, 0xFF	; 255
    1828:	b1 e0       	ldi	r27, 0x01	; 1
    182a:	3e d0       	rcall	.+124    	; 0x18a8 <__ultoa_invert+0x9c>
    182c:	b4 e0       	ldi	r27, 0x04	; 4
    182e:	3c d0       	rcall	.+120    	; 0x18a8 <__ultoa_invert+0x9c>
    1830:	67 0f       	add	r22, r23
    1832:	78 1f       	adc	r23, r24
    1834:	89 1f       	adc	r24, r25
    1836:	9a 1f       	adc	r25, r26
    1838:	a1 1d       	adc	r26, r1
    183a:	68 0f       	add	r22, r24
    183c:	79 1f       	adc	r23, r25
    183e:	8a 1f       	adc	r24, r26
    1840:	91 1d       	adc	r25, r1
    1842:	a1 1d       	adc	r26, r1
    1844:	6a 0f       	add	r22, r26
    1846:	71 1d       	adc	r23, r1
    1848:	81 1d       	adc	r24, r1
    184a:	91 1d       	adc	r25, r1
    184c:	a1 1d       	adc	r26, r1
    184e:	20 d0       	rcall	.+64     	; 0x1890 <__ultoa_invert+0x84>
    1850:	09 f4       	brne	.+2      	; 0x1854 <__ultoa_invert+0x48>
    1852:	68 94       	set
    1854:	3f 91       	pop	r19
    1856:	2a e0       	ldi	r18, 0x0A	; 10
    1858:	26 9f       	mul	r18, r22
    185a:	11 24       	eor	r1, r1
    185c:	30 19       	sub	r19, r0
    185e:	30 5d       	subi	r19, 0xD0	; 208
    1860:	31 93       	st	Z+, r19
    1862:	de f6       	brtc	.-74     	; 0x181a <__ultoa_invert+0xe>
    1864:	cf 01       	movw	r24, r30
    1866:	08 95       	ret
    1868:	46 2f       	mov	r20, r22
    186a:	47 70       	andi	r20, 0x07	; 7
    186c:	40 5d       	subi	r20, 0xD0	; 208
    186e:	41 93       	st	Z+, r20
    1870:	b3 e0       	ldi	r27, 0x03	; 3
    1872:	0f d0       	rcall	.+30     	; 0x1892 <__ultoa_invert+0x86>
    1874:	c9 f7       	brne	.-14     	; 0x1868 <__ultoa_invert+0x5c>
    1876:	f6 cf       	rjmp	.-20     	; 0x1864 <__ultoa_invert+0x58>
    1878:	46 2f       	mov	r20, r22
    187a:	4f 70       	andi	r20, 0x0F	; 15
    187c:	40 5d       	subi	r20, 0xD0	; 208
    187e:	4a 33       	cpi	r20, 0x3A	; 58
    1880:	18 f0       	brcs	.+6      	; 0x1888 <__ultoa_invert+0x7c>
    1882:	49 5d       	subi	r20, 0xD9	; 217
    1884:	31 fd       	sbrc	r19, 1
    1886:	40 52       	subi	r20, 0x20	; 32
    1888:	41 93       	st	Z+, r20
    188a:	02 d0       	rcall	.+4      	; 0x1890 <__ultoa_invert+0x84>
    188c:	a9 f7       	brne	.-22     	; 0x1878 <__ultoa_invert+0x6c>
    188e:	ea cf       	rjmp	.-44     	; 0x1864 <__ultoa_invert+0x58>
    1890:	b4 e0       	ldi	r27, 0x04	; 4
    1892:	a6 95       	lsr	r26
    1894:	97 95       	ror	r25
    1896:	87 95       	ror	r24
    1898:	77 95       	ror	r23
    189a:	67 95       	ror	r22
    189c:	ba 95       	dec	r27
    189e:	c9 f7       	brne	.-14     	; 0x1892 <__ultoa_invert+0x86>
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	61 05       	cpc	r22, r1
    18a4:	71 05       	cpc	r23, r1
    18a6:	08 95       	ret
    18a8:	9b 01       	movw	r18, r22
    18aa:	ac 01       	movw	r20, r24
    18ac:	0a 2e       	mov	r0, r26
    18ae:	06 94       	lsr	r0
    18b0:	57 95       	ror	r21
    18b2:	47 95       	ror	r20
    18b4:	37 95       	ror	r19
    18b6:	27 95       	ror	r18
    18b8:	ba 95       	dec	r27
    18ba:	c9 f7       	brne	.-14     	; 0x18ae <__ultoa_invert+0xa2>
    18bc:	62 0f       	add	r22, r18
    18be:	73 1f       	adc	r23, r19
    18c0:	84 1f       	adc	r24, r20
    18c2:	95 1f       	adc	r25, r21
    18c4:	a0 1d       	adc	r26, r0
    18c6:	08 95       	ret

000018c8 <__prologue_saves__>:
    18c8:	2f 92       	push	r2
    18ca:	3f 92       	push	r3
    18cc:	4f 92       	push	r4
    18ce:	5f 92       	push	r5
    18d0:	6f 92       	push	r6
    18d2:	7f 92       	push	r7
    18d4:	8f 92       	push	r8
    18d6:	9f 92       	push	r9
    18d8:	af 92       	push	r10
    18da:	bf 92       	push	r11
    18dc:	cf 92       	push	r12
    18de:	df 92       	push	r13
    18e0:	ef 92       	push	r14
    18e2:	ff 92       	push	r15
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	ca 1b       	sub	r28, r26
    18f2:	db 0b       	sbc	r29, r27
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	09 94       	ijmp

000018fa <__epilogue_restores__>:
    18fa:	2a 88       	ldd	r2, Y+18	; 0x12
    18fc:	39 88       	ldd	r3, Y+17	; 0x11
    18fe:	48 88       	ldd	r4, Y+16	; 0x10
    1900:	5f 84       	ldd	r5, Y+15	; 0x0f
    1902:	6e 84       	ldd	r6, Y+14	; 0x0e
    1904:	7d 84       	ldd	r7, Y+13	; 0x0d
    1906:	8c 84       	ldd	r8, Y+12	; 0x0c
    1908:	9b 84       	ldd	r9, Y+11	; 0x0b
    190a:	aa 84       	ldd	r10, Y+10	; 0x0a
    190c:	b9 84       	ldd	r11, Y+9	; 0x09
    190e:	c8 84       	ldd	r12, Y+8	; 0x08
    1910:	df 80       	ldd	r13, Y+7	; 0x07
    1912:	ee 80       	ldd	r14, Y+6	; 0x06
    1914:	fd 80       	ldd	r15, Y+5	; 0x05
    1916:	0c 81       	ldd	r16, Y+4	; 0x04
    1918:	1b 81       	ldd	r17, Y+3	; 0x03
    191a:	aa 81       	ldd	r26, Y+2	; 0x02
    191c:	b9 81       	ldd	r27, Y+1	; 0x01
    191e:	ce 0f       	add	r28, r30
    1920:	d1 1d       	adc	r29, r1
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	ed 01       	movw	r28, r26
    1928:	08 95       	ret

0000192a <_exit>:
    192a:	f8 94       	cli

0000192c <__stop_program>:
    192c:	ff cf       	rjmp	.-2      	; 0x192c <__stop_program>
