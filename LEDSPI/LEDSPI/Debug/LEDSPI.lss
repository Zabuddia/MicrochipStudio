
LEDSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d8d  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000023ed  00000000  00000000  00003345  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a9  00000000  00000000  00005732  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00005ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001240  00000000  00000000  00005f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000483  00000000  00000000  000071c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00007647  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  a0:	0c 94 1c 02 	jmp	0x438	; 0x438 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <LED_Init>:
#include "LED.h"

void LED_Init(void) {
	PORTF.DIRSET = (0x01 << RED_LED);
  a8:	e0 ea       	ldi	r30, 0xA0	; 160
  aa:	f4 e0       	ldi	r31, 0x04	; 4
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = (0x01 << GREEN_LED);
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTCLR = (0x01 << RED_LED);
  b4:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = (0x01 << GREEN_LED);
  b6:	86 83       	std	Z+6, r24	; 0x06
  b8:	08 95       	ret

000000ba <LED_On>:
}

void LED_On(uint8_t led) {
	PORTF.OUTSET = (0x01 << led);
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <LED_On+0xa>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <LED_On+0x6>
  c8:	20 93 a5 04 	sts	0x04A5, r18	; 0x8004a5 <__RODATA_PM_OFFSET__+0x7fc4a5>
  cc:	08 95       	ret

000000ce <LED_Off>:
}

void LED_Off(uint8_t led) {
	PORTF.OUTCLR = (0x01 << led);
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <LED_Off+0xa>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <LED_Off+0x6>
  dc:	20 93 a6 04 	sts	0x04A6, r18	; 0x8004a6 <__RODATA_PM_OFFSET__+0x7fc4a6>
  e0:	08 95       	ret

000000e2 <main>:
#include <avr/wdt.h>
#include "SPI.h"
#include "LED.h"

int main(void)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	28 97       	sbiw	r28, 0x08	; 8
  ec:	cd bf       	out	0x3d, r28	; 61
  ee:	de bf       	out	0x3e, r29	; 62
	int16_t x = 0;
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	1a 82       	std	Y+2, r1	; 0x02
	int16_t y = 0;
  f4:	1b 82       	std	Y+3, r1	; 0x03
  f6:	1c 82       	std	Y+4, r1	; 0x04
	int16_t z = 0;
  f8:	1d 82       	std	Y+5, r1	; 0x05
  fa:	1e 82       	std	Y+6, r1	; 0x06
	int16_t a = 0;
  fc:	1f 82       	std	Y+7, r1	; 0x07
  fe:	18 86       	std	Y+8, r1	; 0x08
    LED_Init();
 100:	0e 94 54 00 	call	0xa8	; 0xa8 <LED_Init>
	SPI_Init();
 104:	0e 94 20 01 	call	0x240	; 0x240 <SPI_Init>
	FXLS8967_Init();
 108:	0e 94 52 01 	call	0x2a4	; 0x2a4 <FXLS8967_Init>
    while (1) 
    {
		wdt_reset();
 10c:	a8 95       	wdr
		FXLS8967_ReadAccel(&x, &y, &z, &a);
 10e:	9e 01       	movw	r18, r28
 110:	29 5f       	subi	r18, 0xF9	; 249
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	ae 01       	movw	r20, r28
 116:	4b 5f       	subi	r20, 0xFB	; 251
 118:	5f 4f       	sbci	r21, 0xFF	; 255
 11a:	be 01       	movw	r22, r28
 11c:	6d 5f       	subi	r22, 0xFD	; 253
 11e:	7f 4f       	sbci	r23, 0xFF	; 255
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	0e 94 5f 01 	call	0x2be	; 0x2be <FXLS8967_ReadAccel>
		if (x > 800 || x < -800) {
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	80 5e       	subi	r24, 0xE0	; 224
 12e:	9c 4f       	sbci	r25, 0xFC	; 252
 130:	81 34       	cpi	r24, 0x41	; 65
 132:	96 40       	sbci	r25, 0x06	; 6
 134:	38 f0       	brcs	.+14     	; 0x144 <__EEPROM_REGION_LENGTH__+0x44>
			LED_On(RED_LED);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 5d 00 	call	0xba	; 0xba <LED_On>
			LED_Off(GREEN_LED);	
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 67 00 	call	0xce	; 0xce <LED_Off>
 142:	e4 cf       	rjmp	.-56     	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
		} else if (y > 800 || y < -800) {
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	9c 81       	ldd	r25, Y+4	; 0x04
 148:	80 5e       	subi	r24, 0xE0	; 224
 14a:	9c 4f       	sbci	r25, 0xFC	; 252
 14c:	81 34       	cpi	r24, 0x41	; 65
 14e:	96 40       	sbci	r25, 0x06	; 6
 150:	38 f0       	brcs	.+14     	; 0x160 <__EEPROM_REGION_LENGTH__+0x60>
			LED_Off(RED_LED);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 67 00 	call	0xce	; 0xce <LED_Off>
			LED_On(GREEN_LED);	
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 5d 00 	call	0xba	; 0xba <LED_On>
 15e:	d6 cf       	rjmp	.-84     	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
		} else if (z > 800 || z < -800) {
 160:	8d 81       	ldd	r24, Y+5	; 0x05
 162:	9e 81       	ldd	r25, Y+6	; 0x06
 164:	80 5e       	subi	r24, 0xE0	; 224
 166:	9c 4f       	sbci	r25, 0xFC	; 252
 168:	81 34       	cpi	r24, 0x41	; 65
 16a:	96 40       	sbci	r25, 0x06	; 6
 16c:	38 f0       	brcs	.+14     	; 0x17c <__EEPROM_REGION_LENGTH__+0x7c>
			LED_On(RED_LED);
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 5d 00 	call	0xba	; 0xba <LED_On>
			LED_On(GREEN_LED);	
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 5d 00 	call	0xba	; 0xba <LED_On>
 17a:	c8 cf       	rjmp	.-112    	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
		} else {
			LED_Off(RED_LED);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 67 00 	call	0xce	; 0xce <LED_Off>
			LED_Off(GREEN_LED);	
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 67 00 	call	0xce	; 0xce <LED_Off>
 188:	c1 cf       	rjmp	.-126    	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>

0000018a <lsqrt>:
	SPI_Transfer(reg | 0x80); // Read command
	SPI_Transfer(0x00);
	data = SPI_Transfer(0x00);
	FXLS8967_Deselect();
	return data;
}
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	8b 01       	movw	r16, r22
 198:	9c 01       	movw	r18, r24
 19a:	99 23       	and	r25, r25
 19c:	0c f4       	brge	.+2      	; 0x1a0 <lsqrt+0x16>
 19e:	43 c0       	rjmp	.+134    	; 0x226 <lsqrt+0x9c>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	a0 e0       	ldi	r26, 0x00	; 0
 1a6:	b0 e4       	ldi	r27, 0x40	; 64
 1a8:	08 c0       	rjmp	.+16     	; 0x1ba <lsqrt+0x30>
 1aa:	b5 95       	asr	r27
 1ac:	a7 95       	ror	r26
 1ae:	97 95       	ror	r25
 1b0:	87 95       	ror	r24
 1b2:	b5 95       	asr	r27
 1b4:	a7 95       	ror	r26
 1b6:	97 95       	ror	r25
 1b8:	87 95       	ror	r24
 1ba:	08 17       	cp	r16, r24
 1bc:	19 07       	cpc	r17, r25
 1be:	2a 07       	cpc	r18, r26
 1c0:	3b 07       	cpc	r19, r27
 1c2:	9c f3       	brlt	.-26     	; 0x1aa <lsqrt+0x20>
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	ba 01       	movw	r22, r20
 1ca:	24 c0       	rjmp	.+72     	; 0x214 <lsqrt+0x8a>
 1cc:	6a 01       	movw	r12, r20
 1ce:	7b 01       	movw	r14, r22
 1d0:	c8 0e       	add	r12, r24
 1d2:	d9 1e       	adc	r13, r25
 1d4:	ea 1e       	adc	r14, r26
 1d6:	fb 1e       	adc	r15, r27
 1d8:	0c 15       	cp	r16, r12
 1da:	1d 05       	cpc	r17, r13
 1dc:	2e 05       	cpc	r18, r14
 1de:	3f 05       	cpc	r19, r15
 1e0:	6c f0       	brlt	.+26     	; 0x1fc <lsqrt+0x72>
 1e2:	0c 19       	sub	r16, r12
 1e4:	1d 09       	sbc	r17, r13
 1e6:	2e 09       	sbc	r18, r14
 1e8:	3f 09       	sbc	r19, r15
 1ea:	75 95       	asr	r23
 1ec:	67 95       	ror	r22
 1ee:	57 95       	ror	r21
 1f0:	47 95       	ror	r20
 1f2:	48 0f       	add	r20, r24
 1f4:	59 1f       	adc	r21, r25
 1f6:	6a 1f       	adc	r22, r26
 1f8:	7b 1f       	adc	r23, r27
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <lsqrt+0x7a>
 1fc:	75 95       	asr	r23
 1fe:	67 95       	ror	r22
 200:	57 95       	ror	r21
 202:	47 95       	ror	r20
 204:	b5 95       	asr	r27
 206:	a7 95       	ror	r26
 208:	97 95       	ror	r25
 20a:	87 95       	ror	r24
 20c:	b5 95       	asr	r27
 20e:	a7 95       	ror	r26
 210:	97 95       	ror	r25
 212:	87 95       	ror	r24
 214:	00 97       	sbiw	r24, 0x00	; 0
 216:	a1 05       	cpc	r26, r1
 218:	b1 05       	cpc	r27, r1
 21a:	c1 f6       	brne	.-80     	; 0x1cc <lsqrt+0x42>
 21c:	34 2f       	mov	r19, r20
 21e:	25 2f       	mov	r18, r21
 220:	86 2f       	mov	r24, r22
 222:	97 2f       	mov	r25, r23
 224:	04 c0       	rjmp	.+8      	; 0x22e <lsqrt+0xa4>
 226:	3f ef       	ldi	r19, 0xFF	; 255
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	9f ef       	ldi	r25, 0xFF	; 255
 22e:	63 2f       	mov	r22, r19
 230:	72 2f       	mov	r23, r18
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	ff 90       	pop	r15
 238:	ef 90       	pop	r14
 23a:	df 90       	pop	r13
 23c:	cf 90       	pop	r12
 23e:	08 95       	ret

00000240 <SPI_Init>:
 240:	e0 e0       	ldi	r30, 0x00	; 0
 242:	f4 e0       	ldi	r31, 0x04	; 4
 244:	80 e5       	ldi	r24, 0x50	; 80
 246:	81 83       	std	Z+1, r24	; 0x01
 248:	80 e2       	ldi	r24, 0x20	; 32
 24a:	82 83       	std	Z+2, r24	; 0x02
 24c:	80 e8       	ldi	r24, 0x80	; 128
 24e:	81 83       	std	Z+1, r24	; 0x01
 250:	87 e2       	ldi	r24, 0x27	; 39
 252:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__RODATA_PM_OFFSET__+0x7fc8c0>
 256:	08 95       	ret

00000258 <SPI_Transfer>:
 258:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
 25c:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__RODATA_PM_OFFSET__+0x7fc8c3>
 260:	88 23       	and	r24, r24
 262:	e4 f7       	brge	.-8      	; 0x25c <SPI_Transfer+0x4>
 264:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
 268:	08 95       	ret

0000026a <FXLS8967_Select>:
 26a:	80 e8       	ldi	r24, 0x80	; 128
 26c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7fc406>
 270:	08 95       	ret

00000272 <FXLS8967_Deselect>:
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7fc405>
 278:	08 95       	ret

0000027a <FXLS8967_WriteByte>:
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	d8 2f       	mov	r29, r24
 280:	c6 2f       	mov	r28, r22
 282:	0e 94 35 01 	call	0x26a	; 0x26a <FXLS8967_Select>
 286:	8d 2f       	mov	r24, r29
 288:	8f 77       	andi	r24, 0x7F	; 127
 28a:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
 294:	8c 2f       	mov	r24, r28
 296:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
 29a:	0e 94 39 01 	call	0x272	; 0x272 <FXLS8967_Deselect>
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <FXLS8967_Init>:

// Initialize the FXLS8967
void FXLS8967_Init(void) {
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG1, 0x00);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	85 e1       	ldi	r24, 0x15	; 21
 2a8:	0e 94 3d 01 	call	0x27a	; 0x27a <FXLS8967_WriteByte>
	
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG5, 0x10);
 2ac:	60 e1       	ldi	r22, 0x10	; 16
 2ae:	89 e1       	ldi	r24, 0x19	; 25
 2b0:	0e 94 3d 01 	call	0x27a	; 0x27a <FXLS8967_WriteByte>
	
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG1, 0x07); // Set to active mode
 2b4:	67 e0       	ldi	r22, 0x07	; 7
 2b6:	85 e1       	ldi	r24, 0x15	; 21
 2b8:	0e 94 3d 01 	call	0x27a	; 0x27a <FXLS8967_WriteByte>
 2bc:	08 95       	ret

000002be <FXLS8967_ReadAccel>:
}

// Read accelerometer data
void FXLS8967_ReadAccel(int16_t *x, int16_t *y, int16_t *z, int16_t *a) {
 2be:	6f 92       	push	r6
 2c0:	7f 92       	push	r7
 2c2:	8f 92       	push	r8
 2c4:	9f 92       	push	r9
 2c6:	af 92       	push	r10
 2c8:	bf 92       	push	r11
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	8c 01       	movw	r16, r24
 2dc:	eb 01       	movw	r28, r22
 2de:	6a 01       	movw	r12, r20
 2e0:	79 01       	movw	r14, r18
	uint8_t x_msb, x_lsb, y_msb, y_lsb, z_msb, z_lsb;
	long la;
	
	FXLS8967_Select();
 2e2:	0e 94 35 01 	call	0x26a	; 0x26a <FXLS8967_Select>
	SPI_Transfer(FXLS8967_REG_OUT_X_LSB | 0x80);
 2e6:	84 e8       	ldi	r24, 0x84	; 132
 2e8:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
	SPI_Transfer(0x00);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
	x_lsb = SPI_Transfer(0x00);
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
 2f8:	68 2e       	mov	r6, r24
	x_msb = SPI_Transfer(0x00);
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
 300:	78 2e       	mov	r7, r24
	y_lsb = SPI_Transfer(0x00);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
 308:	88 2e       	mov	r8, r24
	y_msb = SPI_Transfer(0x00);
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
 310:	98 2e       	mov	r9, r24
	z_lsb = SPI_Transfer(0x00);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
 318:	a8 2e       	mov	r10, r24
	z_msb = SPI_Transfer(0x00);
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 2c 01 	call	0x258	; 0x258 <SPI_Transfer>
 320:	b8 2e       	mov	r11, r24
	FXLS8967_Deselect();
 322:	0e 94 39 01 	call	0x272	; 0x272 <FXLS8967_Deselect>

	*x = (uint16_t)((((x_msb << 8) | x_lsb) << 4) / 2);
 326:	87 2d       	mov	r24, r7
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	98 2f       	mov	r25, r24
 32c:	88 27       	eor	r24, r24
 32e:	86 29       	or	r24, r6
 330:	9c 01       	movw	r18, r24
 332:	22 95       	swap	r18
 334:	32 95       	swap	r19
 336:	30 7f       	andi	r19, 0xF0	; 240
 338:	32 27       	eor	r19, r18
 33a:	20 7f       	andi	r18, 0xF0	; 240
 33c:	32 27       	eor	r19, r18
 33e:	93 ff       	sbrs	r25, 3
 340:	02 c0       	rjmp	.+4      	; 0x346 <FXLS8967_ReadAccel+0x88>
 342:	2f 5f       	subi	r18, 0xFF	; 255
 344:	3f 4f       	sbci	r19, 0xFF	; 255
 346:	35 95       	asr	r19
 348:	27 95       	ror	r18
 34a:	f8 01       	movw	r30, r16
 34c:	20 83       	st	Z, r18
 34e:	31 83       	std	Z+1, r19	; 0x01
	*y = (uint16_t)((((y_msb << 8) | y_lsb) << 4) / 2);
 350:	89 2d       	mov	r24, r9
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	98 2f       	mov	r25, r24
 356:	88 27       	eor	r24, r24
 358:	88 29       	or	r24, r8
 35a:	9c 01       	movw	r18, r24
 35c:	22 95       	swap	r18
 35e:	32 95       	swap	r19
 360:	30 7f       	andi	r19, 0xF0	; 240
 362:	32 27       	eor	r19, r18
 364:	20 7f       	andi	r18, 0xF0	; 240
 366:	32 27       	eor	r19, r18
 368:	93 ff       	sbrs	r25, 3
 36a:	02 c0       	rjmp	.+4      	; 0x370 <FXLS8967_ReadAccel+0xb2>
 36c:	2f 5f       	subi	r18, 0xFF	; 255
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
 370:	35 95       	asr	r19
 372:	27 95       	ror	r18
 374:	28 83       	st	Y, r18
 376:	39 83       	std	Y+1, r19	; 0x01
	*z = (uint16_t)((((z_msb << 8) | z_lsb) << 4) / 2);
 378:	8b 2d       	mov	r24, r11
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	98 2f       	mov	r25, r24
 37e:	88 27       	eor	r24, r24
 380:	8a 29       	or	r24, r10
 382:	ac 01       	movw	r20, r24
 384:	42 95       	swap	r20
 386:	52 95       	swap	r21
 388:	50 7f       	andi	r21, 0xF0	; 240
 38a:	54 27       	eor	r21, r20
 38c:	40 7f       	andi	r20, 0xF0	; 240
 38e:	54 27       	eor	r21, r20
 390:	93 ff       	sbrs	r25, 3
 392:	02 c0       	rjmp	.+4      	; 0x398 <FXLS8967_ReadAccel+0xda>
 394:	4f 5f       	subi	r20, 0xFF	; 255
 396:	5f 4f       	sbci	r21, 0xFF	; 255
 398:	55 95       	asr	r21
 39a:	47 95       	ror	r20
 39c:	f6 01       	movw	r30, r12
 39e:	40 83       	st	Z, r20
 3a0:	51 83       	std	Z+1, r21	; 0x01
	
	la = (long)*x * (long)*x + (long)*y * (long)*y + (long)*z * (long)*z;
 3a2:	f8 01       	movw	r30, r16
 3a4:	a0 81       	ld	r26, Z
 3a6:	b1 81       	ldd	r27, Z+1	; 0x01
 3a8:	9d 01       	movw	r18, r26
 3aa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__mulhisi3>
 3ae:	4b 01       	movw	r8, r22
 3b0:	5c 01       	movw	r10, r24
 3b2:	a8 81       	ld	r26, Y
 3b4:	b9 81       	ldd	r27, Y+1	; 0x01
 3b6:	9d 01       	movw	r18, r26
 3b8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__mulhisi3>
 3bc:	86 0e       	add	r8, r22
 3be:	97 1e       	adc	r9, r23
 3c0:	a8 1e       	adc	r10, r24
 3c2:	b9 1e       	adc	r11, r25
 3c4:	9a 01       	movw	r18, r20
 3c6:	da 01       	movw	r26, r20
 3c8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__mulhisi3>
 3cc:	68 0d       	add	r22, r8
 3ce:	79 1d       	adc	r23, r9
 3d0:	8a 1d       	adc	r24, r10
 3d2:	9b 1d       	adc	r25, r11
	la = lsqrt(la);
 3d4:	0e 94 c5 00 	call	0x18a	; 0x18a <lsqrt>
	*a = (uint16_t)la;
 3d8:	f7 01       	movw	r30, r14
 3da:	60 83       	st	Z, r22
 3dc:	71 83       	std	Z+1, r23	; 0x01
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	ff 90       	pop	r15
 3e8:	ef 90       	pop	r14
 3ea:	df 90       	pop	r13
 3ec:	cf 90       	pop	r12
 3ee:	bf 90       	pop	r11
 3f0:	af 90       	pop	r10
 3f2:	9f 90       	pop	r9
 3f4:	8f 90       	pop	r8
 3f6:	7f 90       	pop	r7
 3f8:	6f 90       	pop	r6
 3fa:	08 95       	ret

000003fc <__mulhisi3>:
 3fc:	0e 94 06 02 	call	0x40c	; 0x40c <__umulhisi3>
 400:	33 23       	and	r19, r19
 402:	12 f4       	brpl	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	8a 1b       	sub	r24, r26
 406:	9b 0b       	sbc	r25, r27
 408:	0c 94 17 02 	jmp	0x42e	; 0x42e <__usmulhisi3_tail>

0000040c <__umulhisi3>:
 40c:	a2 9f       	mul	r26, r18
 40e:	b0 01       	movw	r22, r0
 410:	b3 9f       	mul	r27, r19
 412:	c0 01       	movw	r24, r0
 414:	a3 9f       	mul	r26, r19
 416:	70 0d       	add	r23, r0
 418:	81 1d       	adc	r24, r1
 41a:	11 24       	eor	r1, r1
 41c:	91 1d       	adc	r25, r1
 41e:	b2 9f       	mul	r27, r18
 420:	70 0d       	add	r23, r0
 422:	81 1d       	adc	r24, r1
 424:	11 24       	eor	r1, r1
 426:	91 1d       	adc	r25, r1
 428:	08 95       	ret

0000042a <__usmulhisi3>:
 42a:	0e 94 06 02 	call	0x40c	; 0x40c <__umulhisi3>

0000042e <__usmulhisi3_tail>:
 42e:	b7 ff       	sbrs	r27, 7
 430:	08 95       	ret
 432:	82 1b       	sub	r24, r18
 434:	93 0b       	sbc	r25, r19
 436:	08 95       	ret

00000438 <_exit>:
 438:	f8 94       	cli

0000043a <__stop_program>:
 43a:	ff cf       	rjmp	.-2      	; 0x43a <__stop_program>
