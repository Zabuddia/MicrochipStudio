
SerialButtonLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000006e7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000087  000045cc  000005cc  00000660  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000015  00803800  00803800  000006e7  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000006e7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000d8  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032f1  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023bc  00000000  00000000  00003b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000917  00000000  00000000  00005edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e4  00000000  00000000  000067f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001793  00000000  00000000  000069d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000035d  00000000  00000000  0000816b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c8  00000000  00000000  000084c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e3       	ldi	r18, 0x38	; 56
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e3       	ldi	r27, 0x38	; 56
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a5 31       	cpi	r26, 0x15	; 21
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 c0 02 	call	0x580	; 0x580 <main>
  b0:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <fsmIGN1>:
	sprintf(buffer, "%d", num);

	for (uint8_t i = 0; buffer[i] != '\0'; i++) {
		USART1_Transmit((uint8_t)buffer[i]);
	}
}
  b8:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <IGN1_state.3459>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	81 f0       	breq	.+32     	; 0xe0 <fsmIGN1+0x28>
  c0:	18 f0       	brcs	.+6      	; 0xc8 <fsmIGN1+0x10>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	c1 f0       	breq	.+48     	; 0xf6 <fsmIGN1+0x3e>
  c6:	08 95       	ret
  c8:	10 92 0f 38 	sts	0x380F, r1	; 0x80380f <Send_IGN1_message>
  cc:	10 92 11 38 	sts	0x3811, r1	; 0x803811 <Turn_red_on>
  d0:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <IGN1_pressed>
  d4:	88 23       	and	r24, r24
  d6:	a1 f0       	breq	.+40     	; 0x100 <__EEPROM_REGION_LENGTH__>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <IGN1_state.3459>
  de:	08 95       	ret
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <Turn_red_on>
  e6:	80 91 14 38 	lds	r24, 0x3814	; 0x803814 <IGN1_pressed>
  ea:	81 11       	cpse	r24, r1
  ec:	09 c0       	rjmp	.+18     	; 0x100 <__EEPROM_REGION_LENGTH__>
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <IGN1_state.3459>
  f4:	08 95       	ret
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 0f 38 	sts	0x380F, r24	; 0x80380f <Send_IGN1_message>
  fc:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <IGN1_state.3459>
 100:	08 95       	ret

00000102 <fsmIGN2>:
 102:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <IGN2_state.3467>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	81 f0       	breq	.+32     	; 0x12a <fsmIGN2+0x28>
 10a:	18 f0       	brcs	.+6      	; 0x112 <fsmIGN2+0x10>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	c1 f0       	breq	.+48     	; 0x140 <fsmIGN2+0x3e>
 110:	08 95       	ret
 112:	10 92 0e 38 	sts	0x380E, r1	; 0x80380e <Send_IGN2_message>
 116:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <Turn_green_on>
 11a:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <IGN2_pressed>
 11e:	88 23       	and	r24, r24
 120:	a1 f0       	breq	.+40     	; 0x14a <fsmIGN2+0x48>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <IGN2_state.3467>
 128:	08 95       	ret
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <Turn_green_on>
 130:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <IGN2_pressed>
 134:	81 11       	cpse	r24, r1
 136:	09 c0       	rjmp	.+18     	; 0x14a <fsmIGN2+0x48>
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <IGN2_state.3467>
 13e:	08 95       	ret
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <Send_IGN2_message>
 146:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <IGN2_state.3467>
 14a:	08 95       	ret

0000014c <fsmHorn>:
 14c:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <Horn_state.3475>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	71 f0       	breq	.+28     	; 0x170 <fsmHorn+0x24>
 154:	18 f0       	brcs	.+6      	; 0x15c <fsmHorn+0x10>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	c1 f0       	breq	.+48     	; 0x18a <fsmHorn+0x3e>
 15a:	08 95       	ret
 15c:	10 92 0d 38 	sts	0x380D, r1	; 0x80380d <Send_Horn_message>
 160:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <Horn_pressed>
 164:	88 23       	and	r24, r24
 166:	b1 f0       	breq	.+44     	; 0x194 <fsmHorn+0x48>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <Horn_state.3475>
 16e:	08 95       	ret
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <Turn_red_on>
 176:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <Turn_green_on>
 17a:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <Horn_pressed>
 17e:	81 11       	cpse	r24, r1
 180:	09 c0       	rjmp	.+18     	; 0x194 <fsmHorn+0x48>
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <Horn_state.3475>
 188:	08 95       	ret
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <Send_Horn_message>
 190:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <Horn_state.3475>
 194:	08 95       	ret

00000196 <fsmR>:
 196:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <R_state.3483>
 19a:	88 23       	and	r24, r24
 19c:	19 f0       	breq	.+6      	; 0x1a4 <fsmR+0xe>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <fsmR+0x22>
 1a2:	08 95       	ret
 1a4:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <Toggle_red>
 1a8:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <Input_R>
 1ac:	88 23       	and	r24, r24
 1ae:	49 f0       	breq	.+18     	; 0x1c2 <fsmR+0x2c>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <R_state.3483>
 1b6:	08 95       	ret
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <Toggle_red>
 1be:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <R_state.3483>
 1c2:	08 95       	ret

000001c4 <fsmG>:
 1c4:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <G_state.3490>
 1c8:	88 23       	and	r24, r24
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <fsmG+0xe>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	59 f0       	breq	.+22     	; 0x1e6 <fsmG+0x22>
 1d0:	08 95       	ret
 1d2:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <Toggle_green>
 1d6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <Input_G>
 1da:	88 23       	and	r24, r24
 1dc:	49 f0       	breq	.+18     	; 0x1f0 <fsmG+0x2c>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <G_state.3490>
 1e4:	08 95       	ret
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <Toggle_green>
 1ec:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <G_state.3490>
 1f0:	08 95       	ret

000001f2 <fsmY>:
 1f2:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 1f6:	88 23       	and	r24, r24
 1f8:	19 f0       	breq	.+6      	; 0x200 <fsmY+0xe>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	59 f0       	breq	.+22     	; 0x214 <fsmY+0x22>
 1fe:	08 95       	ret
 200:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <Toggle_yellow>
 204:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <Input_Y>
 208:	88 23       	and	r24, r24
 20a:	49 f0       	breq	.+18     	; 0x21e <fsmY+0x2c>
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 212:	08 95       	ret
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <Toggle_yellow>
 21a:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__DATA_REGION_ORIGIN__>
 21e:	08 95       	ret

00000220 <Planning>:
 220:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <Get_input>
 224:	88 23       	and	r24, r24
 226:	39 f0       	breq	.+14     	; 0x236 <Planning+0x16>
 228:	0e 94 cb 00 	call	0x196	; 0x196 <fsmR>
 22c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <fsmG>
 230:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <fsmY>
 234:	08 95       	ret
 236:	0e 94 5c 00 	call	0xb8	; 0xb8 <fsmIGN1>
 23a:	0e 94 81 00 	call	0x102	; 0x102 <fsmIGN2>
 23e:	0e 94 a6 00 	call	0x14c	; 0x14c <fsmHorn>
 242:	08 95       	ret

00000244 <USART1_Init>:
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
 24c:	0a 2e       	mov	r0, r26
 24e:	00 0c       	add	r0, r0
 250:	bb 0b       	sbc	r27, r27
 252:	bc 5f       	subi	r27, 0xFC	; 252
 254:	27 e5       	ldi	r18, 0x57	; 87
 256:	34 e0       	ldi	r19, 0x04	; 4
 258:	0e 94 ce 02 	call	0x59c	; 0x59c <__usmulhisi3>
 25c:	8b 01       	movw	r16, r22
 25e:	9c 01       	movw	r18, r24
 260:	99 23       	and	r25, r25
 262:	24 f4       	brge	.+8      	; 0x26c <USART1_Init+0x28>
 264:	01 50       	subi	r16, 0x01	; 1
 266:	1c 4f       	sbci	r17, 0xFC	; 252
 268:	2f 4f       	sbci	r18, 0xFF	; 255
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	d9 01       	movw	r26, r18
 26e:	c8 01       	movw	r24, r16
 270:	07 2e       	mov	r0, r23
 272:	7a e0       	ldi	r23, 0x0A	; 10
 274:	b5 95       	asr	r27
 276:	a7 95       	ror	r26
 278:	97 95       	ror	r25
 27a:	87 95       	ror	r24
 27c:	7a 95       	dec	r23
 27e:	d1 f7       	brne	.-12     	; 0x274 <USART1_Init+0x30>
 280:	70 2d       	mov	r23, r0
 282:	e0 e2       	ldi	r30, 0x20	; 32
 284:	f8 e0       	ldi	r31, 0x08	; 8
 286:	80 87       	std	Z+8, r24	; 0x08
 288:	91 87       	std	Z+9, r25	; 0x09
 28a:	a0 e4       	ldi	r26, 0x40	; 64
 28c:	b4 e0       	ldi	r27, 0x04	; 4
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	11 96       	adiw	r26, 0x01	; 1
 292:	8c 93       	st	X, r24
 294:	11 97       	sbiw	r26, 0x01	; 1
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	12 96       	adiw	r26, 0x02	; 2
 29a:	8c 93       	st	X, r24
 29c:	80 ec       	ldi	r24, 0xC0	; 192
 29e:	86 83       	std	Z+6, r24	; 0x06
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	87 83       	std	Z+7, r24	; 0x07
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <USART1_Transmit>:
 2aa:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 2ae:	95 ff       	sbrs	r25, 5
 2b0:	fc cf       	rjmp	.-8      	; 0x2aa <USART1_Transmit>
 2b2:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7fc822>
 2b6:	08 95       	ret

000002b8 <USART1_Transmit_String>:

void USART1_Transmit_String(char* string) {
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	7c 01       	movw	r14, r24
	uint16_t string_len = strlen(string);
 2c6:	fc 01       	movw	r30, r24
 2c8:	01 90       	ld	r0, Z+
 2ca:	00 20       	and	r0, r0
 2cc:	e9 f7       	brne	.-6      	; 0x2c8 <USART1_Transmit_String+0x10>
 2ce:	31 97       	sbiw	r30, 0x01	; 1
 2d0:	8f 01       	movw	r16, r30
 2d2:	08 1b       	sub	r16, r24
 2d4:	19 0b       	sbc	r17, r25
	for (uint16_t i = 0; i < string_len; i++) {
 2d6:	c0 e0       	ldi	r28, 0x00	; 0
 2d8:	d0 e0       	ldi	r29, 0x00	; 0
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <USART1_Transmit_String+0x32>
		USART1_Transmit((uint8_t)string[i]);
 2dc:	f7 01       	movw	r30, r14
 2de:	ec 0f       	add	r30, r28
 2e0:	fd 1f       	adc	r31, r29
 2e2:	80 81       	ld	r24, Z
 2e4:	0e 94 55 01 	call	0x2aa	; 0x2aa <USART1_Transmit>
	}
}

void USART1_Transmit_String(char* string) {
	uint16_t string_len = strlen(string);
	for (uint16_t i = 0; i < string_len; i++) {
 2e8:	21 96       	adiw	r28, 0x01	; 1
 2ea:	c0 17       	cp	r28, r16
 2ec:	d1 07       	cpc	r29, r17
 2ee:	b0 f3       	brcs	.-20     	; 0x2dc <USART1_Transmit_String+0x24>
		USART1_Transmit((uint8_t)string[i]);
	}
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	08 95       	ret

000002fe <USART1_Receive>:

uint8_t USART1_Receive(void) {
	while (!(USART1.STATUS & USART_RXCIF_bm));
 2fe:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 302:	88 23       	and	r24, r24
 304:	e4 f7       	brge	.-8      	; 0x2fe <USART1_Receive>
	return USART1.RXDATAL;
 306:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7fc820>
}
 30a:	08 95       	ret

0000030c <Perceive_Input>:
}

void Perceive_Input(void) {
	uint8_t input = 0;
	do {
		wdt_reset();
 30c:	a8 95       	wdr
		input = USART1_Receive();
 30e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <USART1_Receive>
	} while (!((input == 'G') || (input == 'R') || (input == 'Y')));
 312:	87 34       	cpi	r24, 0x47	; 71
 314:	21 f0       	breq	.+8      	; 0x31e <Perceive_Input+0x12>
 316:	82 35       	cpi	r24, 0x52	; 82
 318:	11 f0       	breq	.+4      	; 0x31e <Perceive_Input+0x12>
 31a:	89 35       	cpi	r24, 0x59	; 89
 31c:	b9 f7       	brne	.-18     	; 0x30c <Perceive_Input>
	
	switch (input)
 31e:	82 35       	cpi	r24, 0x52	; 82
 320:	29 f0       	breq	.+10     	; 0x32c <Perceive_Input+0x20>
 322:	89 35       	cpi	r24, 0x59	; 89
 324:	59 f0       	breq	.+22     	; 0x33c <Perceive_Input+0x30>
 326:	87 34       	cpi	r24, 0x47	; 71
 328:	69 f4       	brne	.+26     	; 0x344 <Perceive_Input+0x38>
 32a:	04 c0       	rjmp	.+8      	; 0x334 <Perceive_Input+0x28>
	{
	case 'R':
		Input_R = true;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <Input_R>
		break;
 332:	08 95       	ret
	case 'G':
		Input_G = true;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <Input_G>
		break;
 33a:	08 95       	ret
	case 'Y':
		Input_Y = true;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <Input_Y>
		break;
 342:	08 95       	ret
	default:
		Input_R = false;
 344:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <Input_R>
		Input_G = false;
 348:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <Input_G>
		Input_Y = false;
 34c:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <Input_Y>
 350:	08 95       	ret

00000352 <LED_Init>:
	while (!(USART1.STATUS & USART_RXCIF_bm));
	return USART1.RXDATAL;
}

void LED_Init(void) {
	PORTF.DIRSET = (0x01 << RED_LED);
 352:	e0 ea       	ldi	r30, 0xA0	; 160
 354:	f4 e0       	ldi	r31, 0x04	; 4
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = (0x01 << GREEN_LED);
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTCLR = (0x01 << RED_LED);
 35e:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = (0x01 << GREEN_LED);
 360:	86 83       	std	Z+6, r24	; 0x06
 362:	08 95       	ret

00000364 <LED_On>:
}

void LED_On(uint8_t led) {
	PORTF.OUTSET = (0x01 << led);
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <LED_On+0xa>
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	8a 95       	dec	r24
 370:	e2 f7       	brpl	.-8      	; 0x36a <LED_On+0x6>
 372:	20 93 a5 04 	sts	0x04A5, r18	; 0x8004a5 <__RODATA_PM_OFFSET__+0x7fc4a5>
 376:	08 95       	ret

00000378 <LED_Off>:
}

void LED_Off(uint8_t led) {
	PORTF.OUTCLR = (0x01 << led);
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <LED_Off+0xa>
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	8a 95       	dec	r24
 384:	e2 f7       	brpl	.-8      	; 0x37e <LED_Off+0x6>
 386:	20 93 a6 04 	sts	0x04A6, r18	; 0x8004a6 <__RODATA_PM_OFFSET__+0x7fc4a6>
 38a:	08 95       	ret

0000038c <LED_Tgl>:
}
void LED_Tgl(uint8_t led) {
	PORTF.OUT ^= (0x01 << led);
 38c:	e0 ea       	ldi	r30, 0xA0	; 160
 38e:	f4 e0       	ldi	r31, 0x04	; 4
 390:	94 81       	ldd	r25, Z+4	; 0x04
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <LED_Tgl+0x10>
 398:	22 0f       	add	r18, r18
 39a:	33 1f       	adc	r19, r19
 39c:	8a 95       	dec	r24
 39e:	e2 f7       	brpl	.-8      	; 0x398 <LED_Tgl+0xc>
 3a0:	29 27       	eor	r18, r25
 3a2:	24 83       	std	Z+4, r18	; 0x04
 3a4:	08 95       	ret

000003a6 <Action>:
		fsmHorn();
	}
}

void Action(void) {
	if (Get_input) {
 3a6:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <Get_input>
 3aa:	88 23       	and	r24, r24
 3ac:	c9 f1       	breq	.+114    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		if (Toggle_red) {
 3ae:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <Toggle_red>
 3b2:	88 23       	and	r24, r24
 3b4:	61 f0       	breq	.+24     	; 0x3ce <Action+0x28>
			LED_Tgl(RED_LED);
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_Tgl>
			while (USART1_Receive() != 'R') {
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <Action+0x1a>
				wdt_reset();
 3be:	a8 95       	wdr

void Action(void) {
	if (Get_input) {
		if (Toggle_red) {
			LED_Tgl(RED_LED);
			while (USART1_Receive() != 'R') {
 3c0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <USART1_Receive>
 3c4:	82 35       	cpi	r24, 0x52	; 82
 3c6:	d9 f7       	brne	.-10     	; 0x3be <Action+0x18>
				wdt_reset();
			}
			LED_Tgl(RED_LED);
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_Tgl>
		}
		
		if (Toggle_green) {
 3ce:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <Toggle_green>
 3d2:	88 23       	and	r24, r24
 3d4:	61 f0       	breq	.+24     	; 0x3ee <Action+0x48>
			LED_Tgl(GREEN_LED);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_Tgl>
			while (USART1_Receive() != 'G') {
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <Action+0x3a>
				wdt_reset();
 3de:	a8 95       	wdr
			LED_Tgl(RED_LED);
		}
		
		if (Toggle_green) {
			LED_Tgl(GREEN_LED);
			while (USART1_Receive() != 'G') {
 3e0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <USART1_Receive>
 3e4:	87 34       	cpi	r24, 0x47	; 71
 3e6:	d9 f7       	brne	.-10     	; 0x3de <Action+0x38>
				wdt_reset();
			}
			LED_Tgl(GREEN_LED);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_Tgl>
		}
		
		if (Toggle_yellow) {
 3ee:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <Toggle_yellow>
 3f2:	88 23       	and	r24, r24
 3f4:	91 f0       	breq	.+36     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			LED_Tgl(GREEN_LED);
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_Tgl>
			LED_Tgl(RED_LED);
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_Tgl>
			while (USART1_Receive() != 'Y') {
 402:	01 c0       	rjmp	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
				wdt_reset();
 404:	a8 95       	wdr
		}
		
		if (Toggle_yellow) {
			LED_Tgl(GREEN_LED);
			LED_Tgl(RED_LED);
			while (USART1_Receive() != 'Y') {
 406:	0e 94 7f 01 	call	0x2fe	; 0x2fe <USART1_Receive>
 40a:	89 35       	cpi	r24, 0x59	; 89
 40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
				wdt_reset();
			}
			LED_Tgl(GREEN_LED);
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_Tgl>
			LED_Tgl(RED_LED);
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_Tgl>
		}
		Get_input = false;
 41a:	10 92 0c 38 	sts	0x380C, r1	; 0x80380c <Get_input>
 41e:	08 95       	ret
	} else {
		Turn_red_on ? LED_On(RED_LED) : LED_Off(RED_LED);
 420:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <Turn_red_on>
 424:	88 23       	and	r24, r24
 426:	21 f0       	breq	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 b2 01 	call	0x364	; 0x364 <LED_On>
 42e:	03 c0       	rjmp	.+6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 bc 01 	call	0x378	; 0x378 <LED_Off>
			
		Turn_green_on ? LED_On(GREEN_LED) : LED_Off(GREEN_LED);
 436:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <Turn_green_on>
 43a:	88 23       	and	r24, r24
 43c:	21 f0       	breq	.+8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 b2 01 	call	0x364	; 0x364 <LED_On>
 444:	03 c0       	rjmp	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 bc 01 	call	0x378	; 0x378 <LED_Off>

		Send_IGN1_message ? USART1_Transmit_String("IGN_1 button was pressed\r\n") : (void)0;
 44c:	80 91 0f 38 	lds	r24, 0x380F	; 0x80380f <Send_IGN1_message>
 450:	88 23       	and	r24, r24
 452:	21 f0       	breq	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 454:	8f ec       	ldi	r24, 0xCF	; 207
 456:	95 e4       	ldi	r25, 0x45	; 69
 458:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <USART1_Transmit_String>

		Send_IGN2_message ? USART1_Transmit_String("IGN_2 button was pressed\r\n") : (void)0;
 45c:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <Send_IGN2_message>
 460:	88 23       	and	r24, r24
 462:	21 f0       	breq	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 464:	8a ee       	ldi	r24, 0xEA	; 234
 466:	95 e4       	ldi	r25, 0x45	; 69
 468:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <USART1_Transmit_String>

		Send_Horn_message ? USART1_Transmit_String("HORN button was pressed\r\n") : (void)0;
 46c:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <Send_Horn_message>
 470:	88 23       	and	r24, r24
 472:	21 f0       	breq	.+8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 474:	85 e0       	ldi	r24, 0x05	; 5
 476:	96 e4       	ldi	r25, 0x46	; 70
 478:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <USART1_Transmit_String>
 47c:	08 95       	ret

0000047e <ADC_Init>:
void LED_Tgl(uint8_t led) {
	PORTF.OUT ^= (0x01 << led);
}

void ADC_Init(void) {
	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_8BIT_gc;
 47e:	e0 e0       	ldi	r30, 0x00	; 0
 480:	f6 e0       	ldi	r31, 0x06	; 6
 482:	85 e0       	ldi	r24, 0x05	; 5
 484:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_REFSEL_VDDREF_gc;
 486:	80 e1       	ldi	r24, 0x10	; 16
 488:	81 83       	std	Z+1, r24	; 0x01
 48a:	08 95       	ret

0000048c <ADC_Switch>:
}

void ADC_Switch(uint8_t btn) {
	switch (btn)
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	41 f0       	breq	.+16     	; 0x4a0 <ADC_Switch+0x14>
 490:	18 f0       	brcs	.+6      	; 0x498 <ADC_Switch+0xc>
 492:	82 30       	cpi	r24, 0x02	; 2
 494:	49 f0       	breq	.+18     	; 0x4a8 <ADC_Switch+0x1c>
 496:	08 95       	ret
	{
		case IGN_1:
			ADC0.MUXPOS = 0x01;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
 49e:	08 95       	ret
		case IGN_2:
			ADC0.MUXPOS = 0x0E;
 4a0:	8e e0       	ldi	r24, 0x0E	; 14
 4a2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
 4a6:	08 95       	ret
		case HORN:
			ADC0.MUXPOS = 0x04;
 4a8:	84 e0       	ldi	r24, 0x04	; 4
 4aa:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
 4ae:	08 95       	ret

000004b0 <BTN_Pressed>:
			break;
	}
}

bool BTN_Pressed(uint8_t btn) {
	ADC_Switch(btn);
 4b0:	0e 94 46 02 	call	0x48c	; 0x48c <ADC_Switch>
	ADC0.COMMAND = 0x01;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7fc608>
	while((!ADC0.INTFLAGS & 0x01)) {
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <BTN_Pressed+0xe>
		wdt_reset(); //Wait for result
 4bc:	a8 95       	wdr
}

bool BTN_Pressed(uint8_t btn) {
	ADC_Switch(btn);
	ADC0.COMMAND = 0x01;
	while((!ADC0.INTFLAGS & 0x01)) {
 4be:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7fc60b>
 4c2:	88 23       	and	r24, r24
 4c4:	d9 f3       	breq	.-10     	; 0x4bc <BTN_Pressed+0xc>
		wdt_reset(); //Wait for result
	}
	if (ADC0.RES > 0xF0) {
 4c6:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7fc610>
 4ca:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7fc611>
 4ce:	81 3f       	cpi	r24, 0xF1	; 241
 4d0:	91 05       	cpc	r25, r1
 4d2:	10 f0       	brcs	.+4      	; 0x4d8 <BTN_Pressed+0x28>
		return true;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	08 95       	ret
	} else {
		return false;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
	}
 4da:	08 95       	ret

000004dc <Perceive_Buttons>:
		Planning();
		Action();
    }
}

void Perceive_Buttons(void) {
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
	bool ign1_pressed = BTN_Pressed(IGN_1);
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <BTN_Pressed>
 4e6:	c8 2f       	mov	r28, r24
	bool ign2_pressed = BTN_Pressed(IGN_2);
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 58 02 	call	0x4b0	; 0x4b0 <BTN_Pressed>
 4ee:	d8 2f       	mov	r29, r24
	bool horn_pressed = BTN_Pressed(HORN);
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <BTN_Pressed>
	if (ign1_pressed && !ign2_pressed && !horn_pressed) {
 4f6:	cc 23       	and	r28, r28
 4f8:	41 f0       	breq	.+16     	; 0x50a <Perceive_Buttons+0x2e>
 4fa:	d1 11       	cpse	r29, r1
 4fc:	06 c0       	rjmp	.+12     	; 0x50a <Perceive_Buttons+0x2e>
 4fe:	81 11       	cpse	r24, r1
 500:	04 c0       	rjmp	.+8      	; 0x50a <Perceive_Buttons+0x2e>
			IGN1_pressed = true;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	80 93 14 38 	sts	0x3814, r24	; 0x803814 <IGN1_pressed>
 508:	2e c0       	rjmp	.+92     	; 0x566 <Perceive_Buttons+0x8a>
		} else if (!ign1_pressed && ign2_pressed && !horn_pressed) {
 50a:	c1 11       	cpse	r28, r1
 50c:	08 c0       	rjmp	.+16     	; 0x51e <Perceive_Buttons+0x42>
 50e:	dd 23       	and	r29, r29
 510:	31 f0       	breq	.+12     	; 0x51e <Perceive_Buttons+0x42>
 512:	81 11       	cpse	r24, r1
 514:	04 c0       	rjmp	.+8      	; 0x51e <Perceive_Buttons+0x42>
			IGN2_pressed = true;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	80 93 13 38 	sts	0x3813, r24	; 0x803813 <IGN2_pressed>
 51c:	24 c0       	rjmp	.+72     	; 0x566 <Perceive_Buttons+0x8a>
		} else if (!ign1_pressed && !ign2_pressed && horn_pressed) {
 51e:	c1 11       	cpse	r28, r1
 520:	08 c0       	rjmp	.+16     	; 0x532 <Perceive_Buttons+0x56>
 522:	d1 11       	cpse	r29, r1
 524:	06 c0       	rjmp	.+12     	; 0x532 <Perceive_Buttons+0x56>
 526:	88 23       	and	r24, r24
 528:	21 f0       	breq	.+8      	; 0x532 <Perceive_Buttons+0x56>
			Horn_pressed = true;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <Horn_pressed>
 530:	1a c0       	rjmp	.+52     	; 0x566 <Perceive_Buttons+0x8a>
		} else if (ign1_pressed && ign2_pressed && horn_pressed) {
 532:	cc 23       	and	r28, r28
 534:	91 f0       	breq	.+36     	; 0x55a <Perceive_Buttons+0x7e>
 536:	dd 23       	and	r29, r29
 538:	81 f0       	breq	.+32     	; 0x55a <Perceive_Buttons+0x7e>
 53a:	88 23       	and	r24, r24
 53c:	71 f0       	breq	.+28     	; 0x55a <Perceive_Buttons+0x7e>
			Get_input = true;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	80 93 0c 38 	sts	0x380C, r24	; 0x80380c <Get_input>
			IGN1_pressed = false;
 544:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <IGN1_pressed>
			IGN2_pressed = false;
 548:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <IGN2_pressed>
			Horn_pressed = false;
 54c:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <Horn_pressed>
			USART1_Transmit_String("Give the letter of the light you want to turn on:\r\n");
 550:	8f e1       	ldi	r24, 0x1F	; 31
 552:	96 e4       	ldi	r25, 0x46	; 70
 554:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <USART1_Transmit_String>
 558:	06 c0       	rjmp	.+12     	; 0x566 <Perceive_Buttons+0x8a>
		} else {
			IGN1_pressed = false;
 55a:	10 92 14 38 	sts	0x3814, r1	; 0x803814 <IGN1_pressed>
			IGN2_pressed = false;
 55e:	10 92 13 38 	sts	0x3813, r1	; 0x803813 <IGN2_pressed>
			Horn_pressed = false;
 562:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <Horn_pressed>
	}
}
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <Perception>:
		Input_Y = false;
	}
}

void Perception(void) {
	Get_input ? Perceive_Input() : Perceive_Buttons();
 56c:	80 91 0c 38 	lds	r24, 0x380C	; 0x80380c <Get_input>
 570:	88 23       	and	r24, r24
 572:	19 f0       	breq	.+6      	; 0x57a <Perception+0xe>
 574:	0e 94 86 01 	call	0x30c	; 0x30c <Perceive_Input>
 578:	08 95       	ret
 57a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Perceive_Buttons>
 57e:	08 95       	ret

00000580 <main>:
bool Toggle_green = false;
bool Toggle_yellow = false;

int main(void)
{
	USART1_Init();
 580:	0e 94 22 01 	call	0x244	; 0x244 <USART1_Init>
	LED_Init();
 584:	0e 94 a9 01 	call	0x352	; 0x352 <LED_Init>
	ADC_Init();
 588:	0e 94 3f 02 	call	0x47e	; 0x47e <ADC_Init>
	
    while (1)
    {
		wdt_reset();
 58c:	a8 95       	wdr
		Perception();
 58e:	0e 94 b6 02 	call	0x56c	; 0x56c <Perception>
		Planning();
 592:	0e 94 10 01 	call	0x220	; 0x220 <Planning>
		Action();
 596:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Action>
 59a:	f8 cf       	rjmp	.-16     	; 0x58c <main+0xc>

0000059c <__usmulhisi3>:
 59c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__umulhisi3>

000005a0 <__usmulhisi3_tail>:
 5a0:	b7 ff       	sbrs	r27, 7
 5a2:	08 95       	ret
 5a4:	82 1b       	sub	r24, r18
 5a6:	93 0b       	sbc	r25, r19
 5a8:	08 95       	ret

000005aa <__umulhisi3>:
 5aa:	a2 9f       	mul	r26, r18
 5ac:	b0 01       	movw	r22, r0
 5ae:	b3 9f       	mul	r27, r19
 5b0:	c0 01       	movw	r24, r0
 5b2:	a3 9f       	mul	r26, r19
 5b4:	70 0d       	add	r23, r0
 5b6:	81 1d       	adc	r24, r1
 5b8:	11 24       	eor	r1, r1
 5ba:	91 1d       	adc	r25, r1
 5bc:	b2 9f       	mul	r27, r18
 5be:	70 0d       	add	r23, r0
 5c0:	81 1d       	adc	r24, r1
 5c2:	11 24       	eor	r1, r1
 5c4:	91 1d       	adc	r25, r1
 5c6:	08 95       	ret

000005c8 <_exit>:
 5c8:	f8 94       	cli

000005ca <__stop_program>:
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <__stop_program>
