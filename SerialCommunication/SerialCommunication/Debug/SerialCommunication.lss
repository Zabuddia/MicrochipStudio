
SerialCommunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002abe  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000022a0  00000000  00000000  00002d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000391  00000000  00000000  00004fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00005350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000014e3  00000000  00000000  000053f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021b  00000000  00000000  000068d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00006af2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  a0:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <USART1_Init>:
void USART1_Transmit_String(char* string) {
	uint16_t string_len = strlen(string);
	for (uint16_t i = 0; i < string_len; i++) {
		USART1_Transmit((uint8_t)string[i]);
	}
}
  a8:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
  ac:	0a 2e       	mov	r0, r26
  ae:	00 0c       	add	r0, r0
  b0:	bb 0b       	sbc	r27, r27
  b2:	bc 5f       	subi	r27, 0xFC	; 252
  b4:	27 e5       	ldi	r18, 0x57	; 87
  b6:	34 e0       	ldi	r19, 0x04	; 4
  b8:	0e 94 92 00 	call	0x124	; 0x124 <__usmulhisi3>
  bc:	dc 01       	movw	r26, r24
  be:	cb 01       	movw	r24, r22
  c0:	2a e0       	ldi	r18, 0x0A	; 10
  c2:	b5 95       	asr	r27
  c4:	a7 95       	ror	r26
  c6:	97 95       	ror	r25
  c8:	87 95       	ror	r24
  ca:	2a 95       	dec	r18
  cc:	d1 f7       	brne	.-12     	; 0xc2 <USART1_Init+0x1a>
  ce:	e0 e2       	ldi	r30, 0x20	; 32
  d0:	f8 e0       	ldi	r31, 0x08	; 8
  d2:	80 87       	std	Z+8, r24	; 0x08
  d4:	91 87       	std	Z+9, r25	; 0x09
  d6:	a0 e4       	ldi	r26, 0x40	; 64
  d8:	b4 e0       	ldi	r27, 0x04	; 4
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	11 96       	adiw	r26, 0x01	; 1
  de:	8c 93       	st	X, r24
  e0:	11 97       	sbiw	r26, 0x01	; 1
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	12 96       	adiw	r26, 0x02	; 2
  e6:	8c 93       	st	X, r24
  e8:	80 ec       	ldi	r24, 0xC0	; 192
  ea:	86 83       	std	Z+6, r24	; 0x06
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	87 83       	std	Z+7, r24	; 0x07
  f0:	08 95       	ret

000000f2 <USART1_Transmit>:
  f2:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
  f6:	95 fd       	sbrc	r25, 5
  f8:	02 c0       	rjmp	.+4      	; 0xfe <USART1_Transmit+0xc>
  fa:	a8 95       	wdr
  fc:	fa cf       	rjmp	.-12     	; 0xf2 <USART1_Transmit>
  fe:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7fc822>
 102:	08 95       	ret

00000104 <USART1_Receive>:

uint8_t USART1_Receive(void) {
	while (!(USART1.STATUS & USART_RXCIF_bm)) wdt_reset();  // Wait for data to be received
 104:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 108:	87 fd       	sbrc	r24, 7
 10a:	02 c0       	rjmp	.+4      	; 0x110 <USART1_Receive+0xc>
 10c:	a8 95       	wdr
 10e:	fa cf       	rjmp	.-12     	; 0x104 <USART1_Receive>
	return USART1.RXDATAL;  // Get and return received data from buffer
 110:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__RODATA_PM_OFFSET__+0x7fc820>
}
 114:	08 95       	ret

00000116 <main>:

int main(void) {
	USART1_Init();
 116:	0e 94 54 00 	call	0xa8	; 0xa8 <USART1_Init>
	while (1) {
		uint8_t message = USART1_Receive();
 11a:	0e 94 82 00 	call	0x104	; 0x104 <USART1_Receive>
		USART1_Transmit(message);
 11e:	0e 94 79 00 	call	0xf2	; 0xf2 <USART1_Transmit>
 122:	fb cf       	rjmp	.-10     	; 0x11a <main+0x4>

00000124 <__usmulhisi3>:
 124:	0e 94 99 00 	call	0x132	; 0x132 <__umulhisi3>

00000128 <__usmulhisi3_tail>:
 128:	b7 ff       	sbrs	r27, 7
 12a:	08 95       	ret
 12c:	82 1b       	sub	r24, r18
 12e:	93 0b       	sbc	r25, r19
 130:	08 95       	ret

00000132 <__umulhisi3>:
 132:	a2 9f       	mul	r26, r18
 134:	b0 01       	movw	r22, r0
 136:	b3 9f       	mul	r27, r19
 138:	c0 01       	movw	r24, r0
 13a:	a3 9f       	mul	r26, r19
 13c:	70 0d       	add	r23, r0
 13e:	81 1d       	adc	r24, r1
 140:	11 24       	eor	r1, r1
 142:	91 1d       	adc	r25, r1
 144:	b2 9f       	mul	r27, r18
 146:	70 0d       	add	r23, r0
 148:	81 1d       	adc	r24, r1
 14a:	11 24       	eor	r1, r1
 14c:	91 1d       	adc	r25, r1
 14e:	08 95       	ret

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
