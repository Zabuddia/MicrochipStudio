
PressButton.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c91  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002328  00000000  00000000  00002f11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c8  00000000  00000000  00005239  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00005604  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000154a  00000000  00000000  00005680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000148  00000000  00000000  00006bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00006d12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  a0:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <USART1_Init>:

	// Transmit each character of the string
	for (int i = 0; buffer[i] != '\0'; i++) {
		USART1_Transmit((uint8_t)buffer[i]);
	}
}
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
  b0:	0a 2e       	mov	r0, r26
  b2:	00 0c       	add	r0, r0
  b4:	bb 0b       	sbc	r27, r27
  b6:	bc 5f       	subi	r27, 0xFC	; 252
  b8:	27 e5       	ldi	r18, 0x57	; 87
  ba:	34 e0       	ldi	r19, 0x04	; 4
  bc:	0e 94 aa 00 	call	0x154	; 0x154 <__usmulhisi3>
  c0:	8b 01       	movw	r16, r22
  c2:	9c 01       	movw	r18, r24
  c4:	99 23       	and	r25, r25
  c6:	24 f4       	brge	.+8      	; 0xd0 <USART1_Init+0x28>
  c8:	01 50       	subi	r16, 0x01	; 1
  ca:	1c 4f       	sbci	r17, 0xFC	; 252
  cc:	2f 4f       	sbci	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	d9 01       	movw	r26, r18
  d2:	c8 01       	movw	r24, r16
  d4:	07 2e       	mov	r0, r23
  d6:	7a e0       	ldi	r23, 0x0A	; 10
  d8:	b5 95       	asr	r27
  da:	a7 95       	ror	r26
  dc:	97 95       	ror	r25
  de:	87 95       	ror	r24
  e0:	7a 95       	dec	r23
  e2:	d1 f7       	brne	.-12     	; 0xd8 <USART1_Init+0x30>
  e4:	70 2d       	mov	r23, r0
  e6:	e0 e2       	ldi	r30, 0x20	; 32
  e8:	f8 e0       	ldi	r31, 0x08	; 8
  ea:	80 87       	std	Z+8, r24	; 0x08
  ec:	91 87       	std	Z+9, r25	; 0x09
  ee:	a0 e4       	ldi	r26, 0x40	; 64
  f0:	b4 e0       	ldi	r27, 0x04	; 4
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	11 96       	adiw	r26, 0x01	; 1
  f6:	8c 93       	st	X, r24
  f8:	11 97       	sbiw	r26, 0x01	; 1
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	12 96       	adiw	r26, 0x02	; 2
  fe:	8c 93       	st	X, r24
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	86 83       	std	Z+6, r24	; 0x06
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	87 83       	std	Z+7, r24	; 0x07
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	08 95       	ret

0000010e <main>:

int main(void)
{
	PORTF.DIRSET = (0x01 << RED_LED);
 10e:	e0 ea       	ldi	r30, 0xA0	; 160
 110:	f4 e0       	ldi	r31, 0x04	; 4
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTCLR = (0x01 << RED_LED);
 116:	86 83       	std	Z+6, r24	; 0x06
	
	ADC0.CTRLA = 0x07; //Set Resolution, Freerun, and Enable ADC
 118:	e0 e0       	ldi	r30, 0x00	; 0
 11a:	f6 e0       	ldi	r31, 0x06	; 6
 11c:	97 e0       	ldi	r25, 0x07	; 7
 11e:	90 83       	st	Z, r25
	ADC0.MUXPOS = 0x0E; //Set the ADC input pin to pin 14
 120:	9e e0       	ldi	r25, 0x0E	; 14
 122:	96 83       	std	Z+6, r25	; 0x06
	ADC0.COMMAND = 0x01; //Told it to start doing ADC
 124:	80 87       	std	Z+8, r24	; 0x08
	
	USART1_Init();
 126:	0e 94 54 00 	call	0xa8	; 0xa8 <USART1_Init>
	
	while(1) {
		wdt_reset();
 12a:	a8 95       	wdr
		if (ADC0.RES > 0xFE) {
 12c:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7fc610>
 130:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7fc611>
 134:	8f 3f       	cpi	r24, 0xFF	; 255
 136:	91 05       	cpc	r25, r1
 138:	20 f0       	brcs	.+8      	; 0x142 <main+0x34>
			PORTF.OUTSET = (0x01 << RED_LED);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__RODATA_PM_OFFSET__+0x7fc4a5>
 140:	03 c0       	rjmp	.+6      	; 0x148 <main+0x3a>
		} else {
			PORTF.OUTCLR = (0x01 << RED_LED);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__RODATA_PM_OFFSET__+0x7fc4a6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	9a e1       	ldi	r25, 0x1A	; 26
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x3e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x44>
 152:	eb cf       	rjmp	.-42     	; 0x12a <main+0x1c>

00000154 <__usmulhisi3>:
 154:	0e 94 b1 00 	call	0x162	; 0x162 <__umulhisi3>

00000158 <__usmulhisi3_tail>:
 158:	b7 ff       	sbrs	r27, 7
 15a:	08 95       	ret
 15c:	82 1b       	sub	r24, r18
 15e:	93 0b       	sbc	r25, r19
 160:	08 95       	ret

00000162 <__umulhisi3>:
 162:	a2 9f       	mul	r26, r18
 164:	b0 01       	movw	r22, r0
 166:	b3 9f       	mul	r27, r19
 168:	c0 01       	movw	r24, r0
 16a:	a3 9f       	mul	r26, r19
 16c:	70 0d       	add	r23, r0
 16e:	81 1d       	adc	r24, r1
 170:	11 24       	eor	r1, r1
 172:	91 1d       	adc	r25, r1
 174:	b2 9f       	mul	r27, r18
 176:	70 0d       	add	r23, r0
 178:	81 1d       	adc	r24, r1
 17a:	11 24       	eor	r1, r1
 17c:	91 1d       	adc	r25, r1
 17e:	08 95       	ret

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
