
SerialButtonLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000004ef  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000408  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000053  00004408  00000408  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000000b  00803800  00803800  000004ef  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  000004ef  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000b0  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000308b  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002393  00000000  00000000  0000369b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006f5  00000000  00000000  00005a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000194  00000000  00000000  00006124  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001704  00000000  00000000  000062b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000031e  00000000  00000000  000079bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00007cda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e3       	ldi	r18, 0x38	; 56
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e3       	ldi	r27, 0x38	; 56
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	ab 30       	cpi	r26, 0x0B	; 11
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 de 01 	call	0x3bc	; 0x3bc <main>
  b0:	0c 94 02 02 	jmp	0x404	; 0x404 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <fsmIGN1>:

void LED_Off(uint8_t led) {
	PORTF.OUTCLR = (0x01 << led);
}
void LED_Tgl(uint8_t led) {
	PORTF.OUT ^= (0x01 << led);
  b8:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <IGN1_state.3422>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	81 f0       	breq	.+32     	; 0xe0 <fsmIGN1+0x28>
  c0:	18 f0       	brcs	.+6      	; 0xc8 <fsmIGN1+0x10>
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	c1 f0       	breq	.+48     	; 0xf6 <fsmIGN1+0x3e>
  c6:	08 95       	ret
  c8:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <Send_IGN1_message>
  cc:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <Turn_red_on>
  d0:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <IGN1_pressed>
  d4:	88 23       	and	r24, r24
  d6:	a1 f0       	breq	.+40     	; 0x100 <__EEPROM_REGION_LENGTH__>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <IGN1_state.3422>
  de:	08 95       	ret
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <Turn_red_on>
  e6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <IGN1_pressed>
  ea:	81 11       	cpse	r24, r1
  ec:	09 c0       	rjmp	.+18     	; 0x100 <__EEPROM_REGION_LENGTH__>
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <IGN1_state.3422>
  f4:	08 95       	ret
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <Send_IGN1_message>
  fc:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <IGN1_state.3422>
 100:	08 95       	ret

00000102 <fsmIGN2>:
 102:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <IGN2_state.3430>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	81 f0       	breq	.+32     	; 0x12a <fsmIGN2+0x28>
 10a:	18 f0       	brcs	.+6      	; 0x112 <fsmIGN2+0x10>
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	c1 f0       	breq	.+48     	; 0x140 <fsmIGN2+0x3e>
 110:	08 95       	ret
 112:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <Send_IGN2_message>
 116:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <Turn_green_on>
 11a:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <IGN2_pressed>
 11e:	88 23       	and	r24, r24
 120:	a1 f0       	breq	.+40     	; 0x14a <fsmIGN2+0x48>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <IGN2_state.3430>
 128:	08 95       	ret
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <Turn_green_on>
 130:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <IGN2_pressed>
 134:	81 11       	cpse	r24, r1
 136:	09 c0       	rjmp	.+18     	; 0x14a <fsmIGN2+0x48>
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <IGN2_state.3430>
 13e:	08 95       	ret
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <Send_IGN2_message>
 146:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <IGN2_state.3430>
 14a:	08 95       	ret

0000014c <fsmHorn>:
 14c:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	71 f0       	breq	.+28     	; 0x170 <fsmHorn+0x24>
 154:	18 f0       	brcs	.+6      	; 0x15c <fsmHorn+0x10>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	c1 f0       	breq	.+48     	; 0x18a <fsmHorn+0x3e>
 15a:	08 95       	ret
 15c:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <Send_Horn_message>
 160:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <Horn_pressed>
 164:	88 23       	and	r24, r24
 166:	b1 f0       	breq	.+44     	; 0x194 <fsmHorn+0x48>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 16e:	08 95       	ret
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <Turn_red_on>
 176:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <Turn_green_on>
 17a:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <Horn_pressed>
 17e:	81 11       	cpse	r24, r1
 180:	09 c0       	rjmp	.+18     	; 0x194 <fsmHorn+0x48>
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
 188:	08 95       	ret
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <Send_Horn_message>
 190:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <__DATA_REGION_ORIGIN__>
 194:	08 95       	ret

00000196 <Planning>:
 196:	0e 94 5c 00 	call	0xb8	; 0xb8 <fsmIGN1>
 19a:	0e 94 81 00 	call	0x102	; 0x102 <fsmIGN2>
 19e:	0e 94 a6 00 	call	0x14c	; 0x14c <fsmHorn>
 1a2:	08 95       	ret

000001a4 <USART1_Init>:
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
 1ac:	0a 2e       	mov	r0, r26
 1ae:	00 0c       	add	r0, r0
 1b0:	bb 0b       	sbc	r27, r27
 1b2:	bc 5f       	subi	r27, 0xFC	; 252
 1b4:	27 e5       	ldi	r18, 0x57	; 87
 1b6:	34 e0       	ldi	r19, 0x04	; 4
 1b8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__usmulhisi3>
 1bc:	8b 01       	movw	r16, r22
 1be:	9c 01       	movw	r18, r24
 1c0:	99 23       	and	r25, r25
 1c2:	24 f4       	brge	.+8      	; 0x1cc <USART1_Init+0x28>
 1c4:	01 50       	subi	r16, 0x01	; 1
 1c6:	1c 4f       	sbci	r17, 0xFC	; 252
 1c8:	2f 4f       	sbci	r18, 0xFF	; 255
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	d9 01       	movw	r26, r18
 1ce:	c8 01       	movw	r24, r16
 1d0:	07 2e       	mov	r0, r23
 1d2:	7a e0       	ldi	r23, 0x0A	; 10
 1d4:	b5 95       	asr	r27
 1d6:	a7 95       	ror	r26
 1d8:	97 95       	ror	r25
 1da:	87 95       	ror	r24
 1dc:	7a 95       	dec	r23
 1de:	d1 f7       	brne	.-12     	; 0x1d4 <USART1_Init+0x30>
 1e0:	70 2d       	mov	r23, r0
 1e2:	e0 e2       	ldi	r30, 0x20	; 32
 1e4:	f8 e0       	ldi	r31, 0x08	; 8
 1e6:	80 87       	std	Z+8, r24	; 0x08
 1e8:	91 87       	std	Z+9, r25	; 0x09
 1ea:	a0 e4       	ldi	r26, 0x40	; 64
 1ec:	b4 e0       	ldi	r27, 0x04	; 4
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	11 96       	adiw	r26, 0x01	; 1
 1f2:	8c 93       	st	X, r24
 1f4:	11 97       	sbiw	r26, 0x01	; 1
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	12 96       	adiw	r26, 0x02	; 2
 1fa:	8c 93       	st	X, r24
 1fc:	80 ec       	ldi	r24, 0xC0	; 192
 1fe:	86 83       	std	Z+6, r24	; 0x06
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	87 83       	std	Z+7, r24	; 0x07
 204:	1f 91       	pop	r17
 206:	0f 91       	pop	r16
 208:	08 95       	ret

0000020a <USART1_Transmit>:
 20a:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7fc824>
 20e:	95 ff       	sbrs	r25, 5
 210:	fc cf       	rjmp	.-8      	; 0x20a <USART1_Transmit>
 212:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7fc822>
 216:	08 95       	ret

00000218 <USART1_Transmit_String>:
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	7c 01       	movw	r14, r24
 226:	fc 01       	movw	r30, r24
 228:	01 90       	ld	r0, Z+
 22a:	00 20       	and	r0, r0
 22c:	e9 f7       	brne	.-6      	; 0x228 <USART1_Transmit_String+0x10>
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	8f 01       	movw	r16, r30
 232:	08 1b       	sub	r16, r24
 234:	19 0b       	sbc	r17, r25
 236:	c0 e0       	ldi	r28, 0x00	; 0
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	07 c0       	rjmp	.+14     	; 0x24a <USART1_Transmit_String+0x32>
 23c:	f7 01       	movw	r30, r14
 23e:	ec 0f       	add	r30, r28
 240:	fd 1f       	adc	r31, r29
 242:	80 81       	ld	r24, Z
 244:	0e 94 05 01 	call	0x20a	; 0x20a <USART1_Transmit>
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	c0 17       	cp	r28, r16
 24c:	d1 07       	cpc	r29, r17
 24e:	b0 f3       	brcs	.-20     	; 0x23c <USART1_Transmit_String+0x24>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	08 95       	ret

0000025e <LED_Init>:
 25e:	e0 ea       	ldi	r30, 0xA0	; 160
 260:	f4 e0       	ldi	r31, 0x04	; 4
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	91 83       	std	Z+1, r25	; 0x01
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	81 83       	std	Z+1, r24	; 0x01
 26a:	96 83       	std	Z+6, r25	; 0x06
 26c:	86 83       	std	Z+6, r24	; 0x06
 26e:	08 95       	ret

00000270 <LED_On>:
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <LED_On+0xa>
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	8a 95       	dec	r24
 27c:	e2 f7       	brpl	.-8      	; 0x276 <LED_On+0x6>
 27e:	20 93 a5 04 	sts	0x04A5, r18	; 0x8004a5 <__RODATA_PM_OFFSET__+0x7fc4a5>
 282:	08 95       	ret

00000284 <LED_Off>:
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <LED_Off+0xa>
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	8a 95       	dec	r24
 290:	e2 f7       	brpl	.-8      	; 0x28a <LED_Off+0x6>
 292:	20 93 a6 04 	sts	0x04A6, r18	; 0x8004a6 <__RODATA_PM_OFFSET__+0x7fc4a6>
 296:	08 95       	ret

00000298 <Action>:
 298:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <Turn_red_on>
 29c:	88 23       	and	r24, r24
 29e:	21 f0       	breq	.+8      	; 0x2a8 <Action+0x10>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 38 01 	call	0x270	; 0x270 <LED_On>
 2a6:	03 c0       	rjmp	.+6      	; 0x2ae <Action+0x16>
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 42 01 	call	0x284	; 0x284 <LED_Off>
 2ae:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <Turn_green_on>
 2b2:	88 23       	and	r24, r24
 2b4:	21 f0       	breq	.+8      	; 0x2be <Action+0x26>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 38 01 	call	0x270	; 0x270 <LED_On>
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <Action+0x2c>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 42 01 	call	0x284	; 0x284 <LED_Off>
 2c4:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <Send_IGN1_message>
 2c8:	88 23       	and	r24, r24
 2ca:	21 f0       	breq	.+8      	; 0x2d4 <Action+0x3c>
 2cc:	8b e0       	ldi	r24, 0x0B	; 11
 2ce:	94 e4       	ldi	r25, 0x44	; 68
 2d0:	0e 94 0c 01 	call	0x218	; 0x218 <USART1_Transmit_String>
 2d4:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <Send_IGN2_message>
 2d8:	88 23       	and	r24, r24
 2da:	21 f0       	breq	.+8      	; 0x2e4 <Action+0x4c>
 2dc:	86 e2       	ldi	r24, 0x26	; 38
 2de:	94 e4       	ldi	r25, 0x44	; 68
 2e0:	0e 94 0c 01 	call	0x218	; 0x218 <USART1_Transmit_String>
 2e4:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <Send_Horn_message>
 2e8:	88 23       	and	r24, r24
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <Action+0x5c>
 2ec:	81 e4       	ldi	r24, 0x41	; 65
 2ee:	94 e4       	ldi	r25, 0x44	; 68
 2f0:	0e 94 0c 01 	call	0x218	; 0x218 <USART1_Transmit_String>
 2f4:	08 95       	ret

000002f6 <ADC_Init>:
}

void ADC_Init(void) {
	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_8BIT_gc;
 2f6:	e0 e0       	ldi	r30, 0x00	; 0
 2f8:	f6 e0       	ldi	r31, 0x06	; 6
 2fa:	85 e0       	ldi	r24, 0x05	; 5
 2fc:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_REFSEL_VDDREF_gc;
 2fe:	80 e1       	ldi	r24, 0x10	; 16
 300:	81 83       	std	Z+1, r24	; 0x01
 302:	08 95       	ret

00000304 <ADC_Switch>:
}

void ADC_Switch(uint8_t btn) {
	switch (btn)
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	41 f0       	breq	.+16     	; 0x318 <ADC_Switch+0x14>
 308:	18 f0       	brcs	.+6      	; 0x310 <ADC_Switch+0xc>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	49 f0       	breq	.+18     	; 0x320 <ADC_Switch+0x1c>
 30e:	08 95       	ret
	{
		case IGN_1:
			ADC0.MUXPOS = 0x01;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
 316:	08 95       	ret
		case IGN_2:
			ADC0.MUXPOS = 0x0E;
 318:	8e e0       	ldi	r24, 0x0E	; 14
 31a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
 31e:	08 95       	ret
		case HORN:
			ADC0.MUXPOS = 0x04;
 320:	84 e0       	ldi	r24, 0x04	; 4
 322:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
 326:	08 95       	ret

00000328 <BTN_Pressed>:
			break;
	}
}

bool BTN_Pressed(uint8_t btn) {
	ADC_Switch(btn);
 328:	0e 94 82 01 	call	0x304	; 0x304 <ADC_Switch>
	ADC0.COMMAND = 0x01;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7fc608>
	while((!ADC0.INTFLAGS & 0x01)) {
 332:	01 c0       	rjmp	.+2      	; 0x336 <BTN_Pressed+0xe>
		wdt_reset(); //Wait for result
 334:	a8 95       	wdr
}

bool BTN_Pressed(uint8_t btn) {
	ADC_Switch(btn);
	ADC0.COMMAND = 0x01;
	while((!ADC0.INTFLAGS & 0x01)) {
 336:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7fc60b>
 33a:	88 23       	and	r24, r24
 33c:	d9 f3       	breq	.-10     	; 0x334 <BTN_Pressed+0xc>
		wdt_reset(); //Wait for result
	}
	if (ADC0.RES > 0xF0) {
 33e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7fc610>
 342:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7fc611>
 346:	81 3f       	cpi	r24, 0xF1	; 241
 348:	91 05       	cpc	r25, r1
 34a:	10 f0       	brcs	.+4      	; 0x350 <BTN_Pressed+0x28>
		return true;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	08 95       	ret
	} else {
		return false;
 350:	80 e0       	ldi	r24, 0x00	; 0
	}
 352:	08 95       	ret

00000354 <Perception>:
		Planning();
		Action();
    }
}

void Perception(void) {
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
	bool ign1_pressed = BTN_Pressed(IGN_1);
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 94 01 	call	0x328	; 0x328 <BTN_Pressed>
 35e:	c8 2f       	mov	r28, r24
	bool ign2_pressed = BTN_Pressed(IGN_2);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 94 01 	call	0x328	; 0x328 <BTN_Pressed>
 366:	d8 2f       	mov	r29, r24
	bool horn_pressed = BTN_Pressed(HORN);
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 94 01 	call	0x328	; 0x328 <BTN_Pressed>
	if (ign1_pressed && !ign2_pressed && !horn_pressed) {
 36e:	cc 23       	and	r28, r28
 370:	41 f0       	breq	.+16     	; 0x382 <Perception+0x2e>
 372:	d1 11       	cpse	r29, r1
 374:	06 c0       	rjmp	.+12     	; 0x382 <Perception+0x2e>
 376:	81 11       	cpse	r24, r1
 378:	04 c0       	rjmp	.+8      	; 0x382 <Perception+0x2e>
		IGN1_pressed = true;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <IGN1_pressed>
 380:	1a c0       	rjmp	.+52     	; 0x3b6 <Perception+0x62>
	} else if (!ign1_pressed && ign2_pressed && !horn_pressed) {
 382:	c1 11       	cpse	r28, r1
 384:	08 c0       	rjmp	.+16     	; 0x396 <Perception+0x42>
 386:	dd 23       	and	r29, r29
 388:	31 f0       	breq	.+12     	; 0x396 <Perception+0x42>
 38a:	81 11       	cpse	r24, r1
 38c:	04 c0       	rjmp	.+8      	; 0x396 <Perception+0x42>
		IGN2_pressed = true;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <IGN2_pressed>
 394:	10 c0       	rjmp	.+32     	; 0x3b6 <Perception+0x62>
	} else if (!ign1_pressed && !ign2_pressed && horn_pressed) {
 396:	c1 11       	cpse	r28, r1
 398:	08 c0       	rjmp	.+16     	; 0x3aa <Perception+0x56>
 39a:	d1 11       	cpse	r29, r1
 39c:	06 c0       	rjmp	.+12     	; 0x3aa <Perception+0x56>
 39e:	88 23       	and	r24, r24
 3a0:	21 f0       	breq	.+8      	; 0x3aa <Perception+0x56>
		Horn_pressed = true;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <Horn_pressed>
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <Perception+0x62>
	} else {
		IGN1_pressed = false;
 3aa:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <IGN1_pressed>
		IGN2_pressed = false;
 3ae:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <IGN2_pressed>
		Horn_pressed = false;
 3b2:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <Horn_pressed>
	}
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <main>:
bool Send_IGN2_message = false;
bool Send_Horn_message = false;

int main(void)
{
	USART1_Init();
 3bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <USART1_Init>
	LED_Init();
 3c0:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_Init>
	ADC_Init();
 3c4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <ADC_Init>
	
    while (1)
    {
		wdt_reset();
 3c8:	a8 95       	wdr
		Perception();
 3ca:	0e 94 aa 01 	call	0x354	; 0x354 <Perception>
		Planning();
 3ce:	0e 94 cb 00 	call	0x196	; 0x196 <Planning>
		Action();
 3d2:	0e 94 4c 01 	call	0x298	; 0x298 <Action>
 3d6:	f8 cf       	rjmp	.-16     	; 0x3c8 <main+0xc>

000003d8 <__usmulhisi3>:
 3d8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__umulhisi3>

000003dc <__usmulhisi3_tail>:
 3dc:	b7 ff       	sbrs	r27, 7
 3de:	08 95       	ret
 3e0:	82 1b       	sub	r24, r18
 3e2:	93 0b       	sbc	r25, r19
 3e4:	08 95       	ret

000003e6 <__umulhisi3>:
 3e6:	a2 9f       	mul	r26, r18
 3e8:	b0 01       	movw	r22, r0
 3ea:	b3 9f       	mul	r27, r19
 3ec:	c0 01       	movw	r24, r0
 3ee:	a3 9f       	mul	r26, r19
 3f0:	70 0d       	add	r23, r0
 3f2:	81 1d       	adc	r24, r1
 3f4:	11 24       	eor	r1, r1
 3f6:	91 1d       	adc	r25, r1
 3f8:	b2 9f       	mul	r27, r18
 3fa:	70 0d       	add	r23, r0
 3fc:	81 1d       	adc	r24, r1
 3fe:	11 24       	eor	r1, r1
 400:	91 1d       	adc	r25, r1
 402:	08 95       	ret

00000404 <_exit>:
 404:	f8 94       	cli

00000406 <__stop_program>:
 406:	ff cf       	rjmp	.-2      	; 0x406 <__stop_program>
