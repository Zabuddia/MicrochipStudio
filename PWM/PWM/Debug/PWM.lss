
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00803800  0000035c  000003f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00803802  00803802  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033a5  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024bd  00000000  00000000  000038d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f3  00000000  00000000  00005d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00006584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016a8  00000000  00000000  000066cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  00007d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00007eb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	18 e3       	ldi	r17, 0x38	; 56
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e3       	ldi	r27, 0x38	; 56
  a2:	ec e5       	ldi	r30, 0x5C	; 92
  a4:	f3 e0       	ldi	r31, 0x03	; 3
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	28 e3       	ldi	r18, 0x38	; 56
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b8 e3       	ldi	r27, 0x38	; 56
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 93 01 	call	0x326	; 0x326 <main>
  c6:	0c 94 ac 01 	jmp	0x358	; 0x358 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <ADC_Init>:
#include "Button.h"

void ADC_Init(void) {
	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_8BIT_gc;
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f6 e0       	ldi	r31, 0x06	; 6
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	80 83       	st	Z, r24
	ADC0.CTRLB = ADC_REFSEL_VDDREF_gc;
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	81 83       	std	Z+1, r24	; 0x01
  da:	08 95       	ret

000000dc <ADC_Switch>:
}

void ADC_Switch(uint8_t btn) {
	switch (btn)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	41 f0       	breq	.+16     	; 0xf0 <ADC_Switch+0x14>
  e0:	18 f0       	brcs	.+6      	; 0xe8 <ADC_Switch+0xc>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	49 f0       	breq	.+18     	; 0xf8 <ADC_Switch+0x1c>
  e6:	08 95       	ret
	{
		case IGN_1:
			ADC0.MUXPOS = IGN_1_bm;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
  ee:	08 95       	ret
		case IGN_2:
			ADC0.MUXPOS = IGN_2_bm;
  f0:	8e e0       	ldi	r24, 0x0E	; 14
  f2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
			break;
  f6:	08 95       	ret
		case HORN:
			ADC0.MUXPOS = HORN_bm;
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__RODATA_PM_OFFSET__+0x7fc606>
  fe:	08 95       	ret

00000100 <BTN_Pressed>:
			break;
	}
}

uint8_t BTN_Pressed(uint8_t btn) {
	ADC_Switch(btn);
 100:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_Switch>
	ADC0.COMMAND = 0x01;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7fc608>
	while((!ADC0.INTFLAGS & 0x01));
 10a:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7fc60b>
 10e:	88 23       	and	r24, r24
 110:	e1 f3       	breq	.-8      	; 0x10a <BTN_Pressed+0xa>
	if (ADC0.RES > 0xF0) {
 112:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7fc610>
 116:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7fc611>
 11a:	81 3f       	cpi	r24, 0xF1	; 241
 11c:	91 05       	cpc	r25, r1
 11e:	10 f0       	brcs	.+4      	; 0x124 <BTN_Pressed+0x24>
		return 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	08 95       	ret
	} else {
		return 0;
 124:	80 e0       	ldi	r24, 0x00	; 0
	}
 126:	08 95       	ret

00000128 <LED_Init>:
#include "LED.h"

void LED_Init(void) {
	PORTF.DIRSET = (0x01 << RED_LED);
 128:	e0 ea       	ldi	r30, 0xA0	; 160
 12a:	f4 e0       	ldi	r31, 0x04	; 4
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = (0x01 << GREEN_LED);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTCLR = (0x01 << RED_LED);
 134:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = (0x01 << GREEN_LED);
 136:	86 83       	std	Z+6, r24	; 0x06
 138:	08 95       	ret

0000013a <Set_Brightness_Red>:
#include "Button.h"

#define DEFAULT_BRIGHTNESS 200;

void Set_Brightness_Red(uint8_t brightness) {
	TCA0.SINGLE.CMP0 = brightness;
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7fca28>
 140:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7fca29>
 144:	08 95       	ret

00000146 <Set_Brightness_Green>:
}

void Set_Brightness_Green(uint8_t brightness) {
	TCA0.SINGLE.CMP1 = brightness;
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__RODATA_PM_OFFSET__+0x7fca2a>
 14c:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__RODATA_PM_OFFSET__+0x7fca2b>
 150:	08 95       	ret

00000152 <Perception>:

bool IGN1_pressed = false;
bool IGN2_pressed = false;
bool Horn_pressed = false;

void Perception(void) {
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
	bool ign1_pressed = BTN_Pressed(IGN_1);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 80 00 	call	0x100	; 0x100 <BTN_Pressed>
 15c:	c8 2f       	mov	r28, r24
	bool ign2_pressed = BTN_Pressed(IGN_2);
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 80 00 	call	0x100	; 0x100 <BTN_Pressed>
 164:	d8 2f       	mov	r29, r24
	bool horn_pressed = BTN_Pressed(HORN);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 80 00 	call	0x100	; 0x100 <BTN_Pressed>
	if (ign1_pressed && !ign2_pressed && !horn_pressed) {
 16c:	cc 23       	and	r28, r28
 16e:	41 f0       	breq	.+16     	; 0x180 <Perception+0x2e>
 170:	d1 11       	cpse	r29, r1
 172:	06 c0       	rjmp	.+12     	; 0x180 <Perception+0x2e>
 174:	81 11       	cpse	r24, r1
 176:	04 c0       	rjmp	.+8      	; 0x180 <Perception+0x2e>
		IGN1_pressed = true;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <IGN1_pressed>
 17e:	1a c0       	rjmp	.+52     	; 0x1b4 <Perception+0x62>
	} else if (!ign1_pressed && ign2_pressed && !horn_pressed) {
 180:	c1 11       	cpse	r28, r1
 182:	08 c0       	rjmp	.+16     	; 0x194 <Perception+0x42>
 184:	dd 23       	and	r29, r29
 186:	31 f0       	breq	.+12     	; 0x194 <Perception+0x42>
 188:	81 11       	cpse	r24, r1
 18a:	04 c0       	rjmp	.+8      	; 0x194 <Perception+0x42>
		IGN2_pressed = true;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <IGN2_pressed>
 192:	10 c0       	rjmp	.+32     	; 0x1b4 <Perception+0x62>
	} else if (!ign1_pressed && !ign2_pressed && horn_pressed) {
 194:	c1 11       	cpse	r28, r1
 196:	08 c0       	rjmp	.+16     	; 0x1a8 <Perception+0x56>
 198:	d1 11       	cpse	r29, r1
 19a:	06 c0       	rjmp	.+12     	; 0x1a8 <Perception+0x56>
 19c:	88 23       	and	r24, r24
 19e:	21 f0       	breq	.+8      	; 0x1a8 <Perception+0x56>
		Horn_pressed = true;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <Horn_pressed>
 1a6:	06 c0       	rjmp	.+12     	; 0x1b4 <Perception+0x62>
	} else {
		IGN1_pressed = false;
 1a8:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <IGN1_pressed>
		IGN2_pressed = false;
 1ac:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <IGN2_pressed>
		Horn_pressed = false;
 1b0:	10 92 05 38 	sts	0x3805, r1	; 0x803805 <Horn_pressed>
	}
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <fsmIGN1>:

void fsmIGN1(void) {
	static uint8_t IGN1_state = 0;
	switch (IGN1_state)
 1ba:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <IGN1_state.2951>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	71 f0       	breq	.+28     	; 0x1de <fsmIGN1+0x24>
 1c2:	18 f0       	brcs	.+6      	; 0x1ca <fsmIGN1+0x10>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	99 f0       	breq	.+38     	; 0x1ee <fsmIGN1+0x34>
 1c8:	08 95       	ret
	{
		case 0:
		decrease_brightness = false;
 1ca:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <decrease_brightness>
		if (IGN1_pressed) {
 1ce:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <IGN1_pressed>
 1d2:	88 23       	and	r24, r24
 1d4:	89 f0       	breq	.+34     	; 0x1f8 <fsmIGN1+0x3e>
			IGN1_state = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <IGN1_state.2951>
 1dc:	08 95       	ret
		}
		break;
		case 1:
		if (!IGN1_pressed) {
 1de:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <IGN1_pressed>
 1e2:	81 11       	cpse	r24, r1
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <fsmIGN1+0x3e>
			IGN1_state = 2;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <IGN1_state.2951>
 1ec:	08 95       	ret
		}
		break;
		case 2:
		decrease_brightness = true;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <decrease_brightness>
		IGN1_state = 0;
 1f4:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <IGN1_state.2951>
 1f8:	08 95       	ret

000001fa <fsmIGN2>:
	}
}

void fsmIGN2(void) {
	static uint8_t IGN2_state = 0;
	switch (IGN2_state)
 1fa:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <IGN2_state.2959>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	71 f0       	breq	.+28     	; 0x21e <fsmIGN2+0x24>
 202:	18 f0       	brcs	.+6      	; 0x20a <fsmIGN2+0x10>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	99 f0       	breq	.+38     	; 0x22e <fsmIGN2+0x34>
 208:	08 95       	ret
	{
		case 0:
		increase_brightness = false;
 20a:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <increase_brightness>
		if (IGN2_pressed) {
 20e:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <IGN2_pressed>
 212:	88 23       	and	r24, r24
 214:	89 f0       	breq	.+34     	; 0x238 <fsmIGN2+0x3e>
			IGN2_state = 1;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <IGN2_state.2959>
 21c:	08 95       	ret
		}
		break;
		case 1:
		if (!IGN2_pressed) {
 21e:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <IGN2_pressed>
 222:	81 11       	cpse	r24, r1
 224:	09 c0       	rjmp	.+18     	; 0x238 <fsmIGN2+0x3e>
			IGN2_state = 2;
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <IGN2_state.2959>
 22c:	08 95       	ret
		}
		break;
		case 2:
		increase_brightness = true;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <increase_brightness>
		IGN2_state = 0;
 234:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <IGN2_state.2959>
 238:	08 95       	ret

0000023a <fsmHorn>:
	}
}

void fsmHorn(void) {
	static uint8_t Horn_state = 0;
	switch (Horn_state)
 23a:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <__data_end>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	71 f0       	breq	.+28     	; 0x25e <fsmHorn+0x24>
 242:	18 f0       	brcs	.+6      	; 0x24a <fsmHorn+0x10>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	99 f0       	breq	.+38     	; 0x26e <fsmHorn+0x34>
 248:	08 95       	ret
	{
		case 0:
		change_light_color = false;
 24a:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <change_light_color>
		if (Horn_pressed) {
 24e:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <Horn_pressed>
 252:	88 23       	and	r24, r24
 254:	89 f0       	breq	.+34     	; 0x278 <fsmHorn+0x3e>
			Horn_state = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__data_end>
 25c:	08 95       	ret
		}
		break;
		case 1:
		if (!Horn_pressed) {
 25e:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <Horn_pressed>
 262:	81 11       	cpse	r24, r1
 264:	09 c0       	rjmp	.+18     	; 0x278 <fsmHorn+0x3e>
			Horn_state = 2;
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <__data_end>
 26c:	08 95       	ret
		}
		break;
		case 2:
		change_light_color = true;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <change_light_color>
		Horn_state = 0;
 274:	10 92 02 38 	sts	0x3802, r1	; 0x803802 <__data_end>
 278:	08 95       	ret

0000027a <Planning>:
		break;
	}
}

void Planning(void) {
	fsmIGN1();
 27a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <fsmIGN1>
	fsmIGN2();
 27e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <fsmIGN2>
	fsmHorn();
 282:	0e 94 1d 01 	call	0x23a	; 0x23a <fsmHorn>
 286:	08 95       	ret

00000288 <Action>:
}

void Action(void) {
	if (change_light_color) {
 288:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <change_light_color>
 28c:	88 23       	and	r24, r24
 28e:	59 f0       	breq	.+22     	; 0x2a6 <Action+0x1e>
		light_color++;
 290:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <light_color>
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <light_color>
		if (light_color > OFF) light_color = RED;
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	10 f0       	brcs	.+4      	; 0x2a2 <Action+0x1a>
 29e:	10 92 01 38 	sts	0x3801, r1	; 0x803801 <light_color>
		change_light_color = 0;
 2a2:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <change_light_color>
	}
	if (increase_brightness) {
 2a6:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <increase_brightness>
 2aa:	88 23       	and	r24, r24
 2ac:	39 f0       	breq	.+14     	; 0x2bc <Action+0x34>
		if (brightness < 250) brightness += 10;
 2ae:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 2b2:	8a 3f       	cpi	r24, 0xFA	; 250
 2b4:	18 f4       	brcc	.+6      	; 0x2bc <Action+0x34>
 2b6:	86 5f       	subi	r24, 0xF6	; 246
 2b8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}
	if (decrease_brightness) {
 2bc:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <decrease_brightness>
 2c0:	88 23       	and	r24, r24
 2c2:	39 f0       	breq	.+14     	; 0x2d2 <Action+0x4a>
		if (brightness > 0) brightness -= 10;
 2c4:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 2c8:	88 23       	and	r24, r24
 2ca:	19 f0       	breq	.+6      	; 0x2d2 <Action+0x4a>
 2cc:	8a 50       	subi	r24, 0x0A	; 10
 2ce:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	}
	switch (light_color)
 2d2:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <light_color>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	71 f0       	breq	.+28     	; 0x2f6 <Action+0x6e>
 2da:	28 f0       	brcs	.+10     	; 0x2e6 <Action+0x5e>
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	99 f0       	breq	.+38     	; 0x306 <Action+0x7e>
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	d1 f0       	breq	.+52     	; 0x318 <Action+0x90>
 2e4:	08 95       	ret
	{
	case RED:
		Set_Brightness_Red(brightness);
 2e6:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 2ea:	0e 94 9d 00 	call	0x13a	; 0x13a <Set_Brightness_Red>
		Set_Brightness_Green(0);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 a3 00 	call	0x146	; 0x146 <Set_Brightness_Green>
		break;
 2f4:	08 95       	ret
	case GREEN:
		Set_Brightness_Red(0);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 9d 00 	call	0x13a	; 0x13a <Set_Brightness_Red>
		Set_Brightness_Green(brightness);
 2fc:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 300:	0e 94 a3 00 	call	0x146	; 0x146 <Set_Brightness_Green>
		break;
 304:	08 95       	ret
	case YELLOW:
		Set_Brightness_Red(brightness);
 306:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 30a:	0e 94 9d 00 	call	0x13a	; 0x13a <Set_Brightness_Red>
		Set_Brightness_Green(brightness);
 30e:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
 312:	0e 94 a3 00 	call	0x146	; 0x146 <Set_Brightness_Green>
		break;
 316:	08 95       	ret
	case OFF:
		Set_Brightness_Red(0);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 9d 00 	call	0x13a	; 0x13a <Set_Brightness_Red>
		Set_Brightness_Green(0);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 a3 00 	call	0x146	; 0x146 <Set_Brightness_Green>
 324:	08 95       	ret

00000326 <main>:
	}
}

int main(void)
{
	TCA0.SINGLE.PER = 0xFF;
 326:	c0 e0       	ldi	r28, 0x00	; 0
 328:	da e0       	ldi	r29, 0x0A	; 10
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	8e a3       	std	Y+38, r24	; 0x26
 330:	9f a3       	std	Y+39, r25	; 0x27
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_SINGLESLOPE_gc | TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm;
 332:	83 e3       	ldi	r24, 0x33	; 51
 334:	89 83       	std	Y+1, r24	; 0x01
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTF_gc;
 336:	85 e0       	ldi	r24, 0x05	; 5
 338:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__RODATA_PM_OFFSET__+0x7fc5e4>
	ADC_Init();
 33c:	0e 94 67 00 	call	0xce	; 0xce <ADC_Init>
	LED_Init();
 340:	0e 94 94 00 	call	0x128	; 0x128 <LED_Init>
	TCA0.SINGLE.CTRLA = TCA_SINGLE_ENABLE_bm;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	88 83       	st	Y, r24
    while (1) 
    {
		wdt_reset();
 348:	a8 95       	wdr
		Perception();
 34a:	0e 94 a9 00 	call	0x152	; 0x152 <Perception>
		Planning();
 34e:	0e 94 3d 01 	call	0x27a	; 0x27a <Planning>
		Action();
 352:	0e 94 44 01 	call	0x288	; 0x288 <Action>
 356:	f8 cf       	rjmp	.-16     	; 0x348 <main+0x22>

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
