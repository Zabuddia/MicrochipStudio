
AccelerometerPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003cd7  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000026b6  00000000  00000000  00004353  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000973  00000000  00000000  00006a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  0000737c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000198b  00000000  00000000  000075fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065f  00000000  00000000  00008f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000095e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 77 00 	call	0xee	; 0xee <main>
  a0:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <LED_Init>:
#include "LED.h"

void LED_Init(void) {
	PORTF.DIRSET = (0x01 << RED_LED);
  a8:	e0 ea       	ldi	r30, 0xA0	; 160
  aa:	f4 e0       	ldi	r31, 0x04	; 4
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRSET = (0x01 << GREEN_LED);
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTCLR = (0x01 << RED_LED);
  b4:	96 83       	std	Z+6, r25	; 0x06
	PORTF.OUTCLR = (0x01 << GREEN_LED);
  b6:	86 83       	std	Z+6, r24	; 0x06
  b8:	08 95       	ret

000000ba <Set_Brightness_Red>:
#include "SPI.h"
#include "UART.h"
#include <util/delay.h>

void Set_Brightness_Red(uint8_t brightness) {
	TCA0.SINGLE.CMP0 = brightness;
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__RODATA_PM_OFFSET__+0x7fca28>
  c0:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__RODATA_PM_OFFSET__+0x7fca29>
  c4:	08 95       	ret

000000c6 <Set_Brightness_Green>:
}

void Set_Brightness_Green(uint8_t brightness) {
	TCA0.SINGLE.CMP1 = brightness;
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__RODATA_PM_OFFSET__+0x7fca2a>
  cc:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__RODATA_PM_OFFSET__+0x7fca2b>
  d0:	08 95       	ret

000000d2 <TCA0_Init>:
}

void TCA0_Init(void) {
	TCA0.SINGLE.PER = 0xFF;
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	fa e0       	ldi	r31, 0x0A	; 10
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	86 a3       	std	Z+38, r24	; 0x26
  dc:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_SINGLESLOPE_gc | TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm;
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	81 83       	std	Z+1, r24	; 0x01
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTF_gc;
  e2:	85 e0       	ldi	r24, 0x05	; 5
  e4:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <__RODATA_PM_OFFSET__+0x7fc5e4>
	TCA0.SINGLE.CTRLA = TCA_SINGLE_ENABLE_bm;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <main>:
}

int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	28 97       	sbiw	r28, 0x08	; 8
  f8:	cd bf       	out	0x3d, r28	; 61
  fa:	de bf       	out	0x3e, r29	; 62
	int16_t x = 0;
  fc:	19 82       	std	Y+1, r1	; 0x01
  fe:	1a 82       	std	Y+2, r1	; 0x02
	int16_t y = 0;
 100:	1b 82       	std	Y+3, r1	; 0x03
 102:	1c 82       	std	Y+4, r1	; 0x04
	int16_t z = 0;
 104:	1d 82       	std	Y+5, r1	; 0x05
 106:	1e 82       	std	Y+6, r1	; 0x06
	int16_t a = 0;
 108:	1f 82       	std	Y+7, r1	; 0x07
 10a:	18 86       	std	Y+8, r1	; 0x08
	LED_Init();
 10c:	0e 94 54 00 	call	0xa8	; 0xa8 <LED_Init>
	USART1_Init();
 110:	0e 94 00 02 	call	0x400	; 0x400 <USART1_Init>
    SPI_Init();
 114:	0e 94 22 01 	call	0x244	; 0x244 <SPI_Init>
	FXLS8967_Init();
 118:	0e 94 54 01 	call	0x2a8	; 0x2a8 <FXLS8967_Init>
	TCA0_Init();
 11c:	0e 94 69 00 	call	0xd2	; 0xd2 <TCA0_Init>
    while (1) 
    {
		wdt_reset();
 120:	a8 95       	wdr
		FXLS8967_ReadAccel(&x, &y, &z, &a);
 122:	9e 01       	movw	r18, r28
 124:	29 5f       	subi	r18, 0xF9	; 249
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	ae 01       	movw	r20, r28
 12a:	4b 5f       	subi	r20, 0xFB	; 251
 12c:	5f 4f       	sbci	r21, 0xFF	; 255
 12e:	be 01       	movw	r22, r28
 130:	6d 5f       	subi	r22, 0xFD	; 253
 132:	7f 4f       	sbci	r23, 0xFF	; 255
 134:	ce 01       	movw	r24, r28
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	0e 94 61 01 	call	0x2c2	; 0x2c2 <FXLS8967_ReadAccel>
		y = abs(y);
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	9c 81       	ldd	r25, Y+4	; 0x04
 140:	99 23       	and	r25, r25
 142:	1c f4       	brge	.+6      	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
 144:	91 95       	neg	r25
 146:	81 95       	neg	r24
 148:	91 09       	sbc	r25, r1
 14a:	9c 01       	movw	r18, r24
 14c:	8b 83       	std	Y+3, r24	; 0x03
 14e:	9c 83       	std	Y+4, r25	; 0x04
		x = abs(x);
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	9a 81       	ldd	r25, Y+2	; 0x02
 154:	99 23       	and	r25, r25
 156:	1c f4       	brge	.+6      	; 0x15e <__EEPROM_REGION_LENGTH__+0x5e>
 158:	91 95       	neg	r25
 15a:	81 95       	neg	r24
 15c:	91 09       	sbc	r25, r1
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	9a 83       	std	Y+2, r25	; 0x02
		Set_Brightness_Red(y / 4);
 162:	c9 01       	movw	r24, r18
 164:	99 23       	and	r25, r25
 166:	0c f4       	brge	.+2      	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
 168:	03 96       	adiw	r24, 0x03	; 3
 16a:	95 95       	asr	r25
 16c:	87 95       	ror	r24
 16e:	95 95       	asr	r25
 170:	87 95       	ror	r24
 172:	0e 94 5d 00 	call	0xba	; 0xba <Set_Brightness_Red>
		Set_Brightness_Green(x / 4);
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	9a 81       	ldd	r25, Y+2	; 0x02
 17a:	99 23       	and	r25, r25
 17c:	0c f4       	brge	.+2      	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
 17e:	03 96       	adiw	r24, 0x03	; 3
 180:	95 95       	asr	r25
 182:	87 95       	ror	r24
 184:	95 95       	asr	r25
 186:	87 95       	ror	r24
 188:	0e 94 63 00 	call	0xc6	; 0xc6 <Set_Brightness_Green>
 18c:	c9 cf       	rjmp	.-110    	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>

0000018e <lsqrt>:
	SPI_Transfer(reg | 0x80); // Read command
	SPI_Transfer(0x00);
	data = SPI_Transfer(0x00);
	FXLS8967_Deselect();
	return data;
}
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	8b 01       	movw	r16, r22
 19c:	9c 01       	movw	r18, r24
 19e:	99 23       	and	r25, r25
 1a0:	0c f4       	brge	.+2      	; 0x1a4 <lsqrt+0x16>
 1a2:	43 c0       	rjmp	.+134    	; 0x22a <lsqrt+0x9c>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	a0 e0       	ldi	r26, 0x00	; 0
 1aa:	b0 e4       	ldi	r27, 0x40	; 64
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <lsqrt+0x30>
 1ae:	b5 95       	asr	r27
 1b0:	a7 95       	ror	r26
 1b2:	97 95       	ror	r25
 1b4:	87 95       	ror	r24
 1b6:	b5 95       	asr	r27
 1b8:	a7 95       	ror	r26
 1ba:	97 95       	ror	r25
 1bc:	87 95       	ror	r24
 1be:	08 17       	cp	r16, r24
 1c0:	19 07       	cpc	r17, r25
 1c2:	2a 07       	cpc	r18, r26
 1c4:	3b 07       	cpc	r19, r27
 1c6:	9c f3       	brlt	.-26     	; 0x1ae <lsqrt+0x20>
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	ba 01       	movw	r22, r20
 1ce:	24 c0       	rjmp	.+72     	; 0x218 <lsqrt+0x8a>
 1d0:	6a 01       	movw	r12, r20
 1d2:	7b 01       	movw	r14, r22
 1d4:	c8 0e       	add	r12, r24
 1d6:	d9 1e       	adc	r13, r25
 1d8:	ea 1e       	adc	r14, r26
 1da:	fb 1e       	adc	r15, r27
 1dc:	0c 15       	cp	r16, r12
 1de:	1d 05       	cpc	r17, r13
 1e0:	2e 05       	cpc	r18, r14
 1e2:	3f 05       	cpc	r19, r15
 1e4:	6c f0       	brlt	.+26     	; 0x200 <lsqrt+0x72>
 1e6:	0c 19       	sub	r16, r12
 1e8:	1d 09       	sbc	r17, r13
 1ea:	2e 09       	sbc	r18, r14
 1ec:	3f 09       	sbc	r19, r15
 1ee:	75 95       	asr	r23
 1f0:	67 95       	ror	r22
 1f2:	57 95       	ror	r21
 1f4:	47 95       	ror	r20
 1f6:	48 0f       	add	r20, r24
 1f8:	59 1f       	adc	r21, r25
 1fa:	6a 1f       	adc	r22, r26
 1fc:	7b 1f       	adc	r23, r27
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <lsqrt+0x7a>
 200:	75 95       	asr	r23
 202:	67 95       	ror	r22
 204:	57 95       	ror	r21
 206:	47 95       	ror	r20
 208:	b5 95       	asr	r27
 20a:	a7 95       	ror	r26
 20c:	97 95       	ror	r25
 20e:	87 95       	ror	r24
 210:	b5 95       	asr	r27
 212:	a7 95       	ror	r26
 214:	97 95       	ror	r25
 216:	87 95       	ror	r24
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	a1 05       	cpc	r26, r1
 21c:	b1 05       	cpc	r27, r1
 21e:	c1 f6       	brne	.-80     	; 0x1d0 <lsqrt+0x42>
 220:	34 2f       	mov	r19, r20
 222:	25 2f       	mov	r18, r21
 224:	86 2f       	mov	r24, r22
 226:	97 2f       	mov	r25, r23
 228:	04 c0       	rjmp	.+8      	; 0x232 <lsqrt+0xa4>
 22a:	3f ef       	ldi	r19, 0xFF	; 255
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	9f ef       	ldi	r25, 0xFF	; 255
 232:	63 2f       	mov	r22, r19
 234:	72 2f       	mov	r23, r18
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	df 90       	pop	r13
 240:	cf 90       	pop	r12
 242:	08 95       	ret

00000244 <SPI_Init>:
 244:	e0 e0       	ldi	r30, 0x00	; 0
 246:	f4 e0       	ldi	r31, 0x04	; 4
 248:	80 e5       	ldi	r24, 0x50	; 80
 24a:	81 83       	std	Z+1, r24	; 0x01
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	82 83       	std	Z+2, r24	; 0x02
 250:	80 e8       	ldi	r24, 0x80	; 128
 252:	81 83       	std	Z+1, r24	; 0x01
 254:	87 e2       	ldi	r24, 0x27	; 39
 256:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__RODATA_PM_OFFSET__+0x7fc8c0>
 25a:	08 95       	ret

0000025c <SPI_Transfer>:
 25c:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
 260:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__RODATA_PM_OFFSET__+0x7fc8c3>
 264:	88 23       	and	r24, r24
 266:	e4 f7       	brge	.-8      	; 0x260 <SPI_Transfer+0x4>
 268:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__RODATA_PM_OFFSET__+0x7fc8c4>
 26c:	08 95       	ret

0000026e <FXLS8967_Select>:
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__RODATA_PM_OFFSET__+0x7fc406>
 274:	08 95       	ret

00000276 <FXLS8967_Deselect>:
 276:	80 e8       	ldi	r24, 0x80	; 128
 278:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__RODATA_PM_OFFSET__+0x7fc405>
 27c:	08 95       	ret

0000027e <FXLS8967_WriteByte>:
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	d8 2f       	mov	r29, r24
 284:	c6 2f       	mov	r28, r22
 286:	0e 94 37 01 	call	0x26e	; 0x26e <FXLS8967_Select>
 28a:	8d 2f       	mov	r24, r29
 28c:	8f 77       	andi	r24, 0x7F	; 127
 28e:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
 298:	8c 2f       	mov	r24, r28
 29a:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
 29e:	0e 94 3b 01 	call	0x276	; 0x276 <FXLS8967_Deselect>
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <FXLS8967_Init>:

// Initialize the FXLS8967
void FXLS8967_Init(void) {
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG1, 0x00);
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	85 e1       	ldi	r24, 0x15	; 21
 2ac:	0e 94 3f 01 	call	0x27e	; 0x27e <FXLS8967_WriteByte>
	
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG5, 0x10);
 2b0:	60 e1       	ldi	r22, 0x10	; 16
 2b2:	89 e1       	ldi	r24, 0x19	; 25
 2b4:	0e 94 3f 01 	call	0x27e	; 0x27e <FXLS8967_WriteByte>
	
	FXLS8967_WriteByte(FXLS8967_REG_SENS_CONFIG1, 0x07); // Set to active mode
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	85 e1       	ldi	r24, 0x15	; 21
 2bc:	0e 94 3f 01 	call	0x27e	; 0x27e <FXLS8967_WriteByte>
 2c0:	08 95       	ret

000002c2 <FXLS8967_ReadAccel>:
}

// Read accelerometer data
void FXLS8967_ReadAccel(int16_t *x, int16_t *y, int16_t *z, int16_t *a) {
 2c2:	6f 92       	push	r6
 2c4:	7f 92       	push	r7
 2c6:	8f 92       	push	r8
 2c8:	9f 92       	push	r9
 2ca:	af 92       	push	r10
 2cc:	bf 92       	push	r11
 2ce:	cf 92       	push	r12
 2d0:	df 92       	push	r13
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	8c 01       	movw	r16, r24
 2e0:	eb 01       	movw	r28, r22
 2e2:	6a 01       	movw	r12, r20
 2e4:	79 01       	movw	r14, r18
	uint8_t x_msb, x_lsb, y_msb, y_lsb, z_msb, z_lsb;
	long la;
	
	FXLS8967_Select();
 2e6:	0e 94 37 01 	call	0x26e	; 0x26e <FXLS8967_Select>
	SPI_Transfer(FXLS8967_REG_OUT_X_LSB | 0x80);
 2ea:	84 e8       	ldi	r24, 0x84	; 132
 2ec:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
	SPI_Transfer(0x00);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
	x_lsb = SPI_Transfer(0x00);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
 2fc:	68 2e       	mov	r6, r24
	x_msb = SPI_Transfer(0x00);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
 304:	78 2e       	mov	r7, r24
	y_lsb = SPI_Transfer(0x00);
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
 30c:	88 2e       	mov	r8, r24
	y_msb = SPI_Transfer(0x00);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
 314:	98 2e       	mov	r9, r24
	z_lsb = SPI_Transfer(0x00);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
 31c:	a8 2e       	mov	r10, r24
	z_msb = SPI_Transfer(0x00);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 2e 01 	call	0x25c	; 0x25c <SPI_Transfer>
 324:	b8 2e       	mov	r11, r24
	FXLS8967_Deselect();
 326:	0e 94 3b 01 	call	0x276	; 0x276 <FXLS8967_Deselect>

	*x = (uint16_t)((((x_msb << 8) | x_lsb) << 4) / 2);
 32a:	87 2d       	mov	r24, r7
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	98 2f       	mov	r25, r24
 330:	88 27       	eor	r24, r24
 332:	86 29       	or	r24, r6
 334:	9c 01       	movw	r18, r24
 336:	22 95       	swap	r18
 338:	32 95       	swap	r19
 33a:	30 7f       	andi	r19, 0xF0	; 240
 33c:	32 27       	eor	r19, r18
 33e:	20 7f       	andi	r18, 0xF0	; 240
 340:	32 27       	eor	r19, r18
 342:	93 ff       	sbrs	r25, 3
 344:	02 c0       	rjmp	.+4      	; 0x34a <FXLS8967_ReadAccel+0x88>
 346:	2f 5f       	subi	r18, 0xFF	; 255
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	35 95       	asr	r19
 34c:	27 95       	ror	r18
 34e:	f8 01       	movw	r30, r16
 350:	20 83       	st	Z, r18
 352:	31 83       	std	Z+1, r19	; 0x01
	*y = (uint16_t)((((y_msb << 8) | y_lsb) << 4) / 2);
 354:	89 2d       	mov	r24, r9
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	98 2f       	mov	r25, r24
 35a:	88 27       	eor	r24, r24
 35c:	88 29       	or	r24, r8
 35e:	9c 01       	movw	r18, r24
 360:	22 95       	swap	r18
 362:	32 95       	swap	r19
 364:	30 7f       	andi	r19, 0xF0	; 240
 366:	32 27       	eor	r19, r18
 368:	20 7f       	andi	r18, 0xF0	; 240
 36a:	32 27       	eor	r19, r18
 36c:	93 ff       	sbrs	r25, 3
 36e:	02 c0       	rjmp	.+4      	; 0x374 <FXLS8967_ReadAccel+0xb2>
 370:	2f 5f       	subi	r18, 0xFF	; 255
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	35 95       	asr	r19
 376:	27 95       	ror	r18
 378:	28 83       	st	Y, r18
 37a:	39 83       	std	Y+1, r19	; 0x01
	*z = (uint16_t)((((z_msb << 8) | z_lsb) << 4) / 2);
 37c:	8b 2d       	mov	r24, r11
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	98 2f       	mov	r25, r24
 382:	88 27       	eor	r24, r24
 384:	8a 29       	or	r24, r10
 386:	ac 01       	movw	r20, r24
 388:	42 95       	swap	r20
 38a:	52 95       	swap	r21
 38c:	50 7f       	andi	r21, 0xF0	; 240
 38e:	54 27       	eor	r21, r20
 390:	40 7f       	andi	r20, 0xF0	; 240
 392:	54 27       	eor	r21, r20
 394:	93 ff       	sbrs	r25, 3
 396:	02 c0       	rjmp	.+4      	; 0x39c <FXLS8967_ReadAccel+0xda>
 398:	4f 5f       	subi	r20, 0xFF	; 255
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	55 95       	asr	r21
 39e:	47 95       	ror	r20
 3a0:	f6 01       	movw	r30, r12
 3a2:	40 83       	st	Z, r20
 3a4:	51 83       	std	Z+1, r21	; 0x01
	
	la = (long)*x * (long)*x + (long)*y * (long)*y + (long)*z * (long)*z;
 3a6:	f8 01       	movw	r30, r16
 3a8:	a0 81       	ld	r26, Z
 3aa:	b1 81       	ldd	r27, Z+1	; 0x01
 3ac:	9d 01       	movw	r18, r26
 3ae:	0e 94 33 02 	call	0x466	; 0x466 <__mulhisi3>
 3b2:	4b 01       	movw	r8, r22
 3b4:	5c 01       	movw	r10, r24
 3b6:	a8 81       	ld	r26, Y
 3b8:	b9 81       	ldd	r27, Y+1	; 0x01
 3ba:	9d 01       	movw	r18, r26
 3bc:	0e 94 33 02 	call	0x466	; 0x466 <__mulhisi3>
 3c0:	86 0e       	add	r8, r22
 3c2:	97 1e       	adc	r9, r23
 3c4:	a8 1e       	adc	r10, r24
 3c6:	b9 1e       	adc	r11, r25
 3c8:	9a 01       	movw	r18, r20
 3ca:	da 01       	movw	r26, r20
 3cc:	0e 94 33 02 	call	0x466	; 0x466 <__mulhisi3>
 3d0:	68 0d       	add	r22, r8
 3d2:	79 1d       	adc	r23, r9
 3d4:	8a 1d       	adc	r24, r10
 3d6:	9b 1d       	adc	r25, r11
	la = lsqrt(la);
 3d8:	0e 94 c7 00 	call	0x18e	; 0x18e <lsqrt>
	*a = (uint16_t)la;
 3dc:	f7 01       	movw	r30, r14
 3de:	60 83       	st	Z, r22
 3e0:	71 83       	std	Z+1, r23	; 0x01
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	df 90       	pop	r13
 3f0:	cf 90       	pop	r12
 3f2:	bf 90       	pop	r11
 3f4:	af 90       	pop	r10
 3f6:	9f 90       	pop	r9
 3f8:	8f 90       	pop	r8
 3fa:	7f 90       	pop	r7
 3fc:	6f 90       	pop	r6
 3fe:	08 95       	ret

00000400 <USART1_Init>:
#include "UART.h"

void USART1_Init(void) {
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
	int8_t sigrow_val = SIGROW.OSC16ERR3V;
 404:	a0 91 22 11 	lds	r26, 0x1122	; 0x801122 <__RODATA_PM_OFFSET__+0x7fd122>
	int32_t baud_reg_val = BAUD_SETTING;
	baud_reg_val *= (1024 + sigrow_val);
 408:	0a 2e       	mov	r0, r26
 40a:	00 0c       	add	r0, r0
 40c:	bb 0b       	sbc	r27, r27
 40e:	bc 5f       	subi	r27, 0xFC	; 252
 410:	27 e5       	ldi	r18, 0x57	; 87
 412:	34 e0       	ldi	r19, 0x04	; 4
 414:	0e 94 4a 02 	call	0x494	; 0x494 <__usmulhisi3>
	baud_reg_val /= 1024;
 418:	8b 01       	movw	r16, r22
 41a:	9c 01       	movw	r18, r24
 41c:	99 23       	and	r25, r25
 41e:	24 f4       	brge	.+8      	; 0x428 <USART1_Init+0x28>
 420:	01 50       	subi	r16, 0x01	; 1
 422:	1c 4f       	sbci	r17, 0xFC	; 252
 424:	2f 4f       	sbci	r18, 0xFF	; 255
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	d9 01       	movw	r26, r18
 42a:	c8 01       	movw	r24, r16
 42c:	07 2e       	mov	r0, r23
 42e:	7a e0       	ldi	r23, 0x0A	; 10
 430:	b5 95       	asr	r27
 432:	a7 95       	ror	r26
 434:	97 95       	ror	r25
 436:	87 95       	ror	r24
 438:	7a 95       	dec	r23
 43a:	d1 f7       	brne	.-12     	; 0x430 <USART1_Init+0x30>
 43c:	70 2d       	mov	r23, r0
	
	USART1.BAUD = (uint16_t)baud_reg_val;
 43e:	e0 e2       	ldi	r30, 0x20	; 32
 440:	f8 e0       	ldi	r31, 0x08	; 8
 442:	80 87       	std	Z+8, r24	; 0x08
 444:	91 87       	std	Z+9, r25	; 0x09
	PORTC.DIRSET = PIN0_bm;
 446:	a0 e4       	ldi	r26, 0x40	; 64
 448:	b4 e0       	ldi	r27, 0x04	; 4
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	11 96       	adiw	r26, 0x01	; 1
 44e:	8c 93       	st	X, r24
 450:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.DIRCLR = PIN1_bm;
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	12 96       	adiw	r26, 0x02	; 2
 456:	8c 93       	st	X, r24
	
	USART1.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 458:	80 ec       	ldi	r24, 0xC0	; 192
 45a:	86 83       	std	Z+6, r24	; 0x06
	USART1.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	87 83       	std	Z+7, r24	; 0x07
}
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <__mulhisi3>:
 466:	0e 94 3b 02 	call	0x476	; 0x476 <__umulhisi3>
 46a:	33 23       	and	r19, r19
 46c:	12 f4       	brpl	.+4      	; 0x472 <__mulhisi3+0xc>
 46e:	8a 1b       	sub	r24, r26
 470:	9b 0b       	sbc	r25, r27
 472:	0c 94 4c 02 	jmp	0x498	; 0x498 <__usmulhisi3_tail>

00000476 <__umulhisi3>:
 476:	a2 9f       	mul	r26, r18
 478:	b0 01       	movw	r22, r0
 47a:	b3 9f       	mul	r27, r19
 47c:	c0 01       	movw	r24, r0
 47e:	a3 9f       	mul	r26, r19
 480:	70 0d       	add	r23, r0
 482:	81 1d       	adc	r24, r1
 484:	11 24       	eor	r1, r1
 486:	91 1d       	adc	r25, r1
 488:	b2 9f       	mul	r27, r18
 48a:	70 0d       	add	r23, r0
 48c:	81 1d       	adc	r24, r1
 48e:	11 24       	eor	r1, r1
 490:	91 1d       	adc	r25, r1
 492:	08 95       	ret

00000494 <__usmulhisi3>:
 494:	0e 94 3b 02 	call	0x476	; 0x476 <__umulhisi3>

00000498 <__usmulhisi3_tail>:
 498:	b7 ff       	sbrs	r27, 7
 49a:	08 95       	ret
 49c:	82 1b       	sub	r24, r18
 49e:	93 0b       	sbc	r25, r19
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
